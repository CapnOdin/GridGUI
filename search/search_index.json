{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GridGUI Simplify Control Placement and Resizing If you have ever felt that placing controls in a gui was too complicated or that you wished that you could reuse a previously started section in a gui this is the lib for you. How to Use Classe Reference Examples Features Relative Control Placement Place controls relative to each other in a grid, where no two columns or two rows will overlap unless thay have zero area. Align controls without having to worry about coordinates. Auto Resizing Never again do you need to painstakinly craft custom GuiSize labels, just tell the lib which controls should take up any unused space. Object Wrappers Thin Object Wrappers for Window, Gui and Controls, that works like you are used to but with the convenience of class instances. What you are giving up Computational power - This library is computationally expensive. Precise control - This library handles the exact control placement.","title":"Home"},{"location":"#gridgui","text":"Simplify Control Placement and Resizing If you have ever felt that placing controls in a gui was too complicated or that you wished that you could reuse a previously started section in a gui this is the lib for you. How to Use Classe Reference Examples","title":"GridGUI"},{"location":"#features","text":"Relative Control Placement Place controls relative to each other in a grid, where no two columns or two rows will overlap unless thay have zero area. Align controls without having to worry about coordinates. Auto Resizing Never again do you need to painstakinly craft custom GuiSize labels, just tell the lib which controls should take up any unused space. Object Wrappers Thin Object Wrappers for Window, Gui and Controls, that works like you are used to but with the convenience of class instances. What you are giving up Computational power - This library is computationally expensive. Precise control - This library handles the exact control placement.","title":"Features"},{"location":"Changelog/","text":"Changelog v1.1.11 Added a new Control class for integrating GDI+ drawings called GridGUI.GdiControl Added the ability to set an aspect ratio for a cell using the method GridGUI.Cell.SetAspectRatio . The cells in a GridGUI.Grid can now be justified within the grid by using the member GridGUI.Grid.justify . Added a member to set the GUI event callback delays. See GridGUI.GUI.GuiSizeDelay , GridGUI.GUI.GuiMovedDelay and GridGUI.GUI.OnPaintDelay . Added a workaround in GridGUI.GridGUIClass.AutoSize for wrong min sizes, where the cells takes up more space than would be indicated by GridGUI.Grid.GetMinWidth and GridGUI.Grid.GetMinHeight . Fixed a bug where the lib left the main thread critical. Fixed a bug where the GridGUI.GridGUIClass.Show AutoSize option could not be combined with other options. Added a class that define the interface that a custom control needs to impliment to work in a GridGUI.Grid called GridGUI.CellControl . Added methods to retrieve a row from a GridGUI.ListviewControl and to set and get the headers. Added an example showing how to use the new GridGUI.GdiControl . ( Example GDI.ahk ) Added an example showcasing how to set the aspect ratio of cells. ( Example Scale.ahk ) Added an example that use a splitter bar. ( Example CSV Viewer.ahk ) Changed two examples to showcase resizing the GUI in real-time. ( Example Find Text in Files.ahk ) and ( Example Serial Terminal.ahk ) v1.1.10 Added support for setting the font of GridGUI.GuiControlClass using the new method GridGUI.GuiControlClass.Font and for changing the size of the control after applying the font, to avoid changing the size set the font on the GUI instance instead of the control and apply the font manually. GridGUI.GUI.GuiSize callback is now called with a second argument that indicates if the GUI was minimized or maximized. Fixed a bug where GridGUI.Cell s where not removed by GridGUI.GridGUIClass.RemoveCellByPos . Added GridGUI.Grid.Util.BGRtoRGB and GridGUI.Grid.Util.RGBtoBGR . Added a utility script that converts the lib to a single script. v1.1.9 Added support for removing controls from a GridGUI Fixed a bug where overlapping controls were not clickable. For examples of how to make overlapping controls clickable see ( Example Background.ahk , UCR Example.ahk ) Added an example showing how to remove controls from a GridGUI ( Example Grid Game.ahk ) v1.1.8 Added support for Gui Events via the following callbacks GuiSize , GuiMoved , GuiClose , GuiActivate , GuiContextMenu Added support for drag and drop files to a GUI or Control using the method RegisterDropTarget of the GUI class Added an example showing how to use Gui Events and registering Drag and Drop ( Example Gui Events.ahk ) Updated the examples to use the new GUI events v1.1.7 Fixed the handling of minsize for expanding and filling controls (to allow a control to disappear entirely set its initial size to 0 like in this example ) Added two new convenience methods to the main GridGUI class that makes Position instances called GridGUI.Pos() and GridGUI.Area() Removed lots of potential warnings so that using #Warn in a script that has included this lib would not be as annoying of an experience Added an option to the TabControl class that makes it only calculate the positions of the selected tab Made the TabControl class no longer use the standard callback so that it is free to be used for input interrupts Updated a number of examples to work with the fixed minsize handeling v1.1.6 Added SubGrids that can make a grid in a Cell of a GridGUI or really anywhere Added a new Control class for handling Tabs with subgrids called TabControl Added a new Control class for handling StatusBars called StatusBarControl Added an example showing how to use SubGrids ( Example SubGrids.ahk ) Added an example showing how to use the new TabControl ( Example Tabs.ahk ) Updated the example Example Find Text in Files.ahk to show how to use the new StatusBarControl v1.1.5 Added a new Control class for handling RadioButton groups called RadioGroupControl Fixed a DPI issue where the cells of controls with default size would be enlarged (found by metacognition ) Added two examples showing how to use the new RadioGroupControl ( example 1 , example 2 ) v1.1.4 Added methods to retrieve the Cell group instances making up the grid Fixed a bug that made TreeviewControls and ListviewControls not change the default LV or TV properly Added an example showing how to retrieve the underlying cell container Change the ToStr method of Cells to provide move information Finished recreating the Columnize GUI, the example can be found here Added an example of how to use the new ListViewControl wrapper v1.1.3 Added two additional control wrappers, ListviewControl and TreeviewControl Fixed bug preventing keyword arguments from being used in the AddControl method Fixed the two recreated guis to work with the behavioural changes introduced in v1.1.0 Added an example of how to react to user input v1.1.2 Added support for native glabels Made it possible to instantiate a GUI without making a new one Added WinActive to the Window Class Updated the terminal console example to properly close the started process v1.1.1 Fixed a critical bug where calculating the positions of controls for some GUIs would not terminate in certain cases Fixed an error in the groupbox example (found by Mordecai ) v1.1.0 Overlapping Controls are now supported Controls now only expand when both the expand option and fill option is set. Moved the lib into a Class so that naming conflicts won't be as big of an issue Fixed a bug that made WinShow and WinHide not work Added the WindowControl class that allows windows to be added to the grid see this example Added an example showing the use of a custom WindowControl by using Powsershell and PuTTY to make a serial terminal link","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"Changelog/#v1111","text":"Added a new Control class for integrating GDI+ drawings called GridGUI.GdiControl Added the ability to set an aspect ratio for a cell using the method GridGUI.Cell.SetAspectRatio . The cells in a GridGUI.Grid can now be justified within the grid by using the member GridGUI.Grid.justify . Added a member to set the GUI event callback delays. See GridGUI.GUI.GuiSizeDelay , GridGUI.GUI.GuiMovedDelay and GridGUI.GUI.OnPaintDelay . Added a workaround in GridGUI.GridGUIClass.AutoSize for wrong min sizes, where the cells takes up more space than would be indicated by GridGUI.Grid.GetMinWidth and GridGUI.Grid.GetMinHeight . Fixed a bug where the lib left the main thread critical. Fixed a bug where the GridGUI.GridGUIClass.Show AutoSize option could not be combined with other options. Added a class that define the interface that a custom control needs to impliment to work in a GridGUI.Grid called GridGUI.CellControl . Added methods to retrieve a row from a GridGUI.ListviewControl and to set and get the headers. Added an example showing how to use the new GridGUI.GdiControl . ( Example GDI.ahk ) Added an example showcasing how to set the aspect ratio of cells. ( Example Scale.ahk ) Added an example that use a splitter bar. ( Example CSV Viewer.ahk ) Changed two examples to showcase resizing the GUI in real-time. ( Example Find Text in Files.ahk ) and ( Example Serial Terminal.ahk )","title":"v1.1.11"},{"location":"Changelog/#v1110","text":"Added support for setting the font of GridGUI.GuiControlClass using the new method GridGUI.GuiControlClass.Font and for changing the size of the control after applying the font, to avoid changing the size set the font on the GUI instance instead of the control and apply the font manually. GridGUI.GUI.GuiSize callback is now called with a second argument that indicates if the GUI was minimized or maximized. Fixed a bug where GridGUI.Cell s where not removed by GridGUI.GridGUIClass.RemoveCellByPos . Added GridGUI.Grid.Util.BGRtoRGB and GridGUI.Grid.Util.RGBtoBGR . Added a utility script that converts the lib to a single script.","title":"v1.1.10"},{"location":"Changelog/#v119","text":"Added support for removing controls from a GridGUI Fixed a bug where overlapping controls were not clickable. For examples of how to make overlapping controls clickable see ( Example Background.ahk , UCR Example.ahk ) Added an example showing how to remove controls from a GridGUI ( Example Grid Game.ahk )","title":"v1.1.9"},{"location":"Changelog/#v118","text":"Added support for Gui Events via the following callbacks GuiSize , GuiMoved , GuiClose , GuiActivate , GuiContextMenu Added support for drag and drop files to a GUI or Control using the method RegisterDropTarget of the GUI class Added an example showing how to use Gui Events and registering Drag and Drop ( Example Gui Events.ahk ) Updated the examples to use the new GUI events","title":"v1.1.8"},{"location":"Changelog/#v117","text":"Fixed the handling of minsize for expanding and filling controls (to allow a control to disappear entirely set its initial size to 0 like in this example ) Added two new convenience methods to the main GridGUI class that makes Position instances called GridGUI.Pos() and GridGUI.Area() Removed lots of potential warnings so that using #Warn in a script that has included this lib would not be as annoying of an experience Added an option to the TabControl class that makes it only calculate the positions of the selected tab Made the TabControl class no longer use the standard callback so that it is free to be used for input interrupts Updated a number of examples to work with the fixed minsize handeling","title":"v1.1.7"},{"location":"Changelog/#v116","text":"Added SubGrids that can make a grid in a Cell of a GridGUI or really anywhere Added a new Control class for handling Tabs with subgrids called TabControl Added a new Control class for handling StatusBars called StatusBarControl Added an example showing how to use SubGrids ( Example SubGrids.ahk ) Added an example showing how to use the new TabControl ( Example Tabs.ahk ) Updated the example Example Find Text in Files.ahk to show how to use the new StatusBarControl","title":"v1.1.6"},{"location":"Changelog/#v115","text":"Added a new Control class for handling RadioButton groups called RadioGroupControl Fixed a DPI issue where the cells of controls with default size would be enlarged (found by metacognition ) Added two examples showing how to use the new RadioGroupControl ( example 1 , example 2 )","title":"v1.1.5"},{"location":"Changelog/#v114","text":"Added methods to retrieve the Cell group instances making up the grid Fixed a bug that made TreeviewControls and ListviewControls not change the default LV or TV properly Added an example showing how to retrieve the underlying cell container Change the ToStr method of Cells to provide move information Finished recreating the Columnize GUI, the example can be found here Added an example of how to use the new ListViewControl wrapper","title":"v1.1.4"},{"location":"Changelog/#v113","text":"Added two additional control wrappers, ListviewControl and TreeviewControl Fixed bug preventing keyword arguments from being used in the AddControl method Fixed the two recreated guis to work with the behavioural changes introduced in v1.1.0 Added an example of how to react to user input","title":"v1.1.3"},{"location":"Changelog/#v112","text":"Added support for native glabels Made it possible to instantiate a GUI without making a new one Added WinActive to the Window Class Updated the terminal console example to properly close the started process","title":"v1.1.2"},{"location":"Changelog/#v111","text":"Fixed a critical bug where calculating the positions of controls for some GUIs would not terminate in certain cases Fixed an error in the groupbox example (found by Mordecai )","title":"v1.1.1"},{"location":"Changelog/#v110","text":"Overlapping Controls are now supported Controls now only expand when both the expand option and fill option is set. Moved the lib into a Class so that naming conflicts won't be as big of an issue Fixed a bug that made WinShow and WinHide not work Added the WindowControl class that allows windows to be added to the grid see this example Added an example showing the use of a custom WindowControl by using Powsershell and PuTTY to make a serial terminal link","title":"v1.1.0"},{"location":"How%20to%20Use/","text":"How to Use Introduction GridGUI is a library that allows placing Controls relative to eachother without being limited in the order that they are placed, as well as automatically resizing Controls. How it works: By adding Controls to an instance of GridGUIClass they will be placed relative to each other so that no row/column will ever be in another although they can have zero area. You will need: The main source file and the lib directory in the same directory, if you add it to your lib directory then you might want to change the name of the lib directory from this project. How to use After inclusion of GridGUI.ahk in a script a GridGUIClass instance can be made like this. myGui := new GridGUI ( \"Title\" , Options := \"resize\" ) The GUI can then be show by calling Show . myGui . Show () And Controls can be added like so. myGui . Add ( row := 1 , column := 1 , type := \"Button\" , options := \"\" , text := \"A Button\" ) Expand To make the grid cell auto-expand in both height and width, when additional space is available, add the following two arguments. myGui . Add ( 1 , 1 , \"Button\" , , \"A Button\" , exW := 1 , exH := 1 ) Fill Alternatively, you make it fill out the cells that the control is defined in by using these two arguments. This can be useful when aligning Controls. myGui . Add ( 1 , 1 , \"Button\" , , \"A Longer Button\" ) myGui . Add ( 1 , 2 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) myGui . Add ( 1 , 3 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) Auto Resizing Controls Combining the previous two options makes the Control automatically expand. myGui . Add ( 1 , 1 , \"Button\" , , \"A Button\" , exW := 1 , exH := 1 , fillW := 1 , fillH := 1 ) Spanning When adding a Control it is posible to make it span multriple rows and or columns using a string on the format start-end #Include < GridGUI > myGui := new GridGUI ( \"Title\" , Options := \"resize\" ) myGui . Add ( 1 , 1 , \"Button\" , , \"A Longer Button\" ) myGui . Add ( 1 , 2 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) myGui . Add ( 1 , 3 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) myGui . Add ( 2 , \"1-3\" , \"Button\" , , \"An Expanding Button\" , exW := 1 , exH := 1 , fillW := 1 , fillH := 1 ) myGui . Show () Overlapping Controls Controls can be put in the same cells. Take care the order that overlapping controls are put into the GridGUI is no longer arbitrary and can affect the resulting look, for instance, if the background image is added before the ActiveX Control in the [url=https://github.com/CapnOdin/GridGUI/blob/master/Examples/Example%20Background.ahk]Backgound Example[/url] the ActiveX Control will not be visible. myGui . Add ( \"1-3\" , \"1-3\" , \"GroupBox\" , \"w40 h40\" , \"Title\" , , , 1 , 1 ) myGui . Add ( 2 , 2 , \"Button\" , \"w50 h50\" , \"Button\" , 1 , 1 , 1 , 1 ) Justify The position of a Control inside of a cell can be set to one of 9 positions by using the Justify parameter. myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CN\" , text : \"N\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CNE\" , text : \"NE\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CE\" , text : \"E\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CSE\" , text : \"SE\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CS\" , text : \"S\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CSW\" , text : \"SW\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CW\" , text : \"W\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CNW\" , text : \"NW\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"C\" , text : \"C\" , exW : 1 , exH : 1 }) Debug To help debug issues there is an option available when making a GridGUI instance that shows the dividing grid lines. myGui := new GridGUI ( \"Title\" , Options := \"resize\" , showGrid := true ) User Input When adding a Control an instance of ControlClass is returned allowing access to vVars, hwnd and setting up gLabels. bt := myGui . Add ( 1 , 1 , \"Button\" , , \"A Button\" ) bt . callback := Func ( \"ToolTip\" ) . Bind ( \"You Pressed the Button\" ) ToolTip ( text ) { ToolTip , % text }","title":"How to Use"},{"location":"How%20to%20Use/#how-to-use","text":"","title":"How to Use"},{"location":"How%20to%20Use/#introduction","text":"GridGUI is a library that allows placing Controls relative to eachother without being limited in the order that they are placed, as well as automatically resizing Controls. How it works: By adding Controls to an instance of GridGUIClass they will be placed relative to each other so that no row/column will ever be in another although they can have zero area. You will need: The main source file and the lib directory in the same directory, if you add it to your lib directory then you might want to change the name of the lib directory from this project.","title":"Introduction"},{"location":"How%20to%20Use/#how-to-use_1","text":"After inclusion of GridGUI.ahk in a script a GridGUIClass instance can be made like this. myGui := new GridGUI ( \"Title\" , Options := \"resize\" ) The GUI can then be show by calling Show . myGui . Show () And Controls can be added like so. myGui . Add ( row := 1 , column := 1 , type := \"Button\" , options := \"\" , text := \"A Button\" )","title":"How to use"},{"location":"How%20to%20Use/#expand","text":"To make the grid cell auto-expand in both height and width, when additional space is available, add the following two arguments. myGui . Add ( 1 , 1 , \"Button\" , , \"A Button\" , exW := 1 , exH := 1 )","title":"Expand"},{"location":"How%20to%20Use/#fill","text":"Alternatively, you make it fill out the cells that the control is defined in by using these two arguments. This can be useful when aligning Controls. myGui . Add ( 1 , 1 , \"Button\" , , \"A Longer Button\" ) myGui . Add ( 1 , 2 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) myGui . Add ( 1 , 3 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 )","title":"Fill"},{"location":"How%20to%20Use/#auto-resizing-controls","text":"Combining the previous two options makes the Control automatically expand. myGui . Add ( 1 , 1 , \"Button\" , , \"A Button\" , exW := 1 , exH := 1 , fillW := 1 , fillH := 1 )","title":"Auto Resizing Controls"},{"location":"How%20to%20Use/#spanning","text":"When adding a Control it is posible to make it span multriple rows and or columns using a string on the format start-end #Include < GridGUI > myGui := new GridGUI ( \"Title\" , Options := \"resize\" ) myGui . Add ( 1 , 1 , \"Button\" , , \"A Longer Button\" ) myGui . Add ( 1 , 2 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) myGui . Add ( 1 , 3 , \"Button\" , , \"A Button\" , , , fillW := 1 , fillH := 0 ) myGui . Add ( 2 , \"1-3\" , \"Button\" , , \"An Expanding Button\" , exW := 1 , exH := 1 , fillW := 1 , fillH := 1 ) myGui . Show ()","title":"Spanning"},{"location":"How%20to%20Use/#overlapping-controls","text":"Controls can be put in the same cells. Take care the order that overlapping controls are put into the GridGUI is no longer arbitrary and can affect the resulting look, for instance, if the background image is added before the ActiveX Control in the [url=https://github.com/CapnOdin/GridGUI/blob/master/Examples/Example%20Background.ahk]Backgound Example[/url] the ActiveX Control will not be visible. myGui . Add ( \"1-3\" , \"1-3\" , \"GroupBox\" , \"w40 h40\" , \"Title\" , , , 1 , 1 ) myGui . Add ( 2 , 2 , \"Button\" , \"w50 h50\" , \"Button\" , 1 , 1 , 1 , 1 )","title":"Overlapping Controls"},{"location":"How%20to%20Use/#justify","text":"The position of a Control inside of a cell can be set to one of 9 positions by using the Justify parameter. myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CN\" , text : \"N\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CNE\" , text : \"NE\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CE\" , text : \"E\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CSE\" , text : \"SE\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CS\" , text : \"S\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CSW\" , text : \"SW\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CW\" , text : \"W\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"CNW\" , text : \"NW\" , exW : 1 , exH : 1 }) myGui . Add ( 1 , 1 , \"Button\" , { justify : \"C\" , text : \"C\" , exW : 1 , exH : 1 })","title":"Justify"},{"location":"How%20to%20Use/#debug","text":"To help debug issues there is an option available when making a GridGUI instance that shows the dividing grid lines. myGui := new GridGUI ( \"Title\" , Options := \"resize\" , showGrid := true )","title":"Debug"},{"location":"How%20to%20Use/#user-input","text":"When adding a Control an instance of ControlClass is returned allowing access to vVars, hwnd and setting up gLabels. bt := myGui . Add ( 1 , 1 , \"Button\" , , \"A Button\" ) bt . callback := Func ( \"ToolTip\" ) . Bind ( \"You Pressed the Button\" ) ToolTip ( text ) { ToolTip , % text }","title":"User Input"},{"location":"Classes/ArbitraryControl/","text":"ArbitraryControl Methods __New __New ( guiHwnd , type , options := \"\" , text := \"\" , DPIScale := true ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GuiControl should be added to. type : hwnd name : type desc : The type of the control. Can be Text, Edit, UpDown, Picture, Button, Checkbox, DropDownList, ComboBox, ListBox, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox and ActiveX . For Radio, ListView, TreeView, Tab3 and StatusBar see AdditionalControls . type : string name : options desc : The options that the GuiControl will be created with. Does not accept vVars. type : string default : \"\" link : link name : text desc : The text that the GuiControl will be created with. type : string default : \"\" name : DPIScale desc : Whether or not to correct for non standard dpi. type : bool default : true return value desc : A new GridGUI.ArbitraryControl instance. type : GridGUI.ArbitraryControl","title":"ArbitraryControl"},{"location":"Classes/ArbitraryControl/#arbitrarycontrol","text":"","title":"ArbitraryControl"},{"location":"Classes/ArbitraryControl/#methods","text":"","title":"Methods"},{"location":"Classes/ArbitraryControl/#__new","text":"__New ( guiHwnd , type , options := \"\" , text := \"\" , DPIScale := true ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GuiControl should be added to. type : hwnd name : type desc : The type of the control. Can be Text, Edit, UpDown, Picture, Button, Checkbox, DropDownList, ComboBox, ListBox, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox and ActiveX . For Radio, ListView, TreeView, Tab3 and StatusBar see AdditionalControls . type : string name : options desc : The options that the GuiControl will be created with. Does not accept vVars. type : string default : \"\" link : link name : text desc : The text that the GuiControl will be created with. type : string default : \"\" name : DPIScale desc : Whether or not to correct for non standard dpi. type : bool default : true return value desc : A new GridGUI.ArbitraryControl instance. type : GridGUI.ArbitraryControl","title":"__New"},{"location":"Classes/BoundFunc/","text":"BoundFunc Members arguments desc : The array of arguments bound to this function. type : array default : empty array meta : [object] function desc : The function that has arguments bound to it. type : Func|BoundFunc meta : [object] Methods __Get __Get ( key ) Meta function allowing access to the underlying bound function as thought it was this function except if the arguments member is retrieved. parameters name : key desc : The key to look up in the object. type : any return value desc : The looked up value. type : any __GetInstanceType __GetInstanceType ( object ) Constructs the class path of a class instance. parameters name : object desc : The object to retrieve the class path from. type : object return value desc : Class path. type : string __IsInstanceOf __IsInstanceOf ( object , class ) Checks if a class is in the class path of an object. parameters name : object desc : The class instance to search. type : string|number|object name : class desc : The class name to search for. type : string|number|object return value desc : Whether or not the class path of object contains class . type : bool __New __New ( fun , arguments * ) Constructor. parameters name : fun desc : The function or method that arguments are bound to. type : Func|BoundFunc|string name : arguments desc : The arguments that will be passed to the GridGUI.BoundFunc.function when it is called. If the function is a method then the class instance is passed as the first variadic arg. type : any meta : [variadic] return value desc : A new GridGUI.BoundFunc instance. type : GridGUI.BoundFunc ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing the bound function. type : string","title":"BoundFunc"},{"location":"Classes/BoundFunc/#boundfunc","text":"","title":"BoundFunc"},{"location":"Classes/BoundFunc/#members","text":"","title":"Members"},{"location":"Classes/BoundFunc/#arguments","text":"desc : The array of arguments bound to this function. type : array default : empty array meta : [object]","title":"arguments"},{"location":"Classes/BoundFunc/#function","text":"desc : The function that has arguments bound to it. type : Func|BoundFunc meta : [object]","title":"function"},{"location":"Classes/BoundFunc/#methods","text":"","title":"Methods"},{"location":"Classes/BoundFunc/#__get","text":"__Get ( key ) Meta function allowing access to the underlying bound function as thought it was this function except if the arguments member is retrieved. parameters name : key desc : The key to look up in the object. type : any return value desc : The looked up value. type : any","title":"__Get"},{"location":"Classes/BoundFunc/#__getinstancetype","text":"__GetInstanceType ( object ) Constructs the class path of a class instance. parameters name : object desc : The object to retrieve the class path from. type : object return value desc : Class path. type : string","title":"__GetInstanceType"},{"location":"Classes/BoundFunc/#__isinstanceof","text":"__IsInstanceOf ( object , class ) Checks if a class is in the class path of an object. parameters name : object desc : The class instance to search. type : string|number|object name : class desc : The class name to search for. type : string|number|object return value desc : Whether or not the class path of object contains class . type : bool","title":"__IsInstanceOf"},{"location":"Classes/BoundFunc/#__new","text":"__New ( fun , arguments * ) Constructor. parameters name : fun desc : The function or method that arguments are bound to. type : Func|BoundFunc|string name : arguments desc : The arguments that will be passed to the GridGUI.BoundFunc.function when it is called. If the function is a method then the class instance is passed as the first variadic arg. type : any meta : [variadic] return value desc : A new GridGUI.BoundFunc instance. type : GridGUI.BoundFunc","title":"__New"},{"location":"Classes/BoundFunc/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing the bound function. type : string","title":"ToStr"},{"location":"Classes/Cell/","text":"Cell Members aspectRatio desc : The aspect ratio of the cell in width divided by height. An aspect ratio of 0 means that aspectRatio wont be applied to the cell. type : number default : border desc : The border of the cell. type : GridGUI.Position meta : [object] borderX desc : The horizontal border or margin of the cell that is the amount of additional width beyond what the GridGUI.Cell.ctrl needs that is taken up by the cell. type : number default : 5 borderY desc : The vertical border or margin of the cell that is the amount of additional height beyond what the GridGUI.Cell.ctrl needs that is taken up by the cell. type : number default : 5 ctrl desc : The control that is managed by this cell. The control class needs to implement the two methods ControlGetPos and Draw as well as have the four members initialWidth , initialHeight , initialWidthVal and initialHeightVal . type : GridGUI.Control meta : [object] ctrlInitialPos desc : The initial position and size of the GridGUI.Cell.ctrl . It is used as the min size of the GridGUI.Cell.ctrl if no min size is specified. type : GridGUI.Position meta : [object] ctrlPos desc : The position and size when the GridGUI.Cell.ctrl was last drawn. type : GridGUI.Position meta : [object] exH desc : The vertical expansion weight of the cell. This is used to calculate the part of the additional GUI height that this cell should take. type : number default : 0 exW desc : The horizontal expansion weight of the cell. This is used to calculate the part of the additional GUI width that this cell should take. type : number default : 0 fillH desc : Whether or not to set the height of the GridGUI.Cell.ctrl to the height of the cell. type : bool default : false fillW desc : Whether or not to set the width of the GridGUI.Cell.ctrl to the width of the cell. type : bool default : false gridpos desc : The position and size of the cell in the grid in columns and rows. That is in the same coordinate system that is used when adding cells to a GridGUI.GridGUIClass . type : GridGUI.Position meta : [object] hasHConfligts desc : Whether or not the cell needs to take any other cells into account when calculating its height. type : bool default : false hasWConfligts desc : Whether or not the cell needs to take any other cells into account when calculating its width. type : bool default : false justifyOptions desc : How the GridGUI.Cell.ctrl will be positioned in the cell when drawn. Can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : C othersH desc : The combined vertical expansion weight of other cells that this cell is in conflict with. This is used to calculate the part of the additional GUI height that this cell should take. type : number default : 0 othersW desc : The combined horizontal expansion weight of other cells that this cell is in conflict with. This is used to calculate the part of the additional GUI width that this cell should take. type : number default : 0 pos desc : The position and size of the cell. type : GridGUI.Position meta : [object] Methods __Delete __Delete () Destructor. Destroys the GridGUI.Cell.ctrl . __FindLeastUsedRowColumn __FindLeastUsedRowColumn ( size , start , nonExpanders , expanders ) Returns the index of the where there are the lest amount of cells with a fixed size or where there is the largest expansion weight. parameters name : size desc : How many indexes to check. type : number name : start desc : What index to start checking from. type : number name : nonExpanders desc : An array of how many fixed sized cells there are in either the columns or rows. type : array name : expanders desc : An array of how many expanding cells there are in either the columns or rows. type : array return value desc : The found index. type : number __GetExpandedHeight __GetExpandedHeight ( index , height , expanders , nonExpanders ) Calculates the amount of the additional height that the cell should take up. parameters name : index desc : What index of the positions in the grid that the height is wanted for. type : number name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expanders desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpanders desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The calculated height. type : number __GetExpandedHeights __GetExpandedHeights ( index , height , expanders , nonExpanders ) Calculates the heights that the cell wants to have in each of rows that it spans over. parameters name : index desc : What index of the positions in the grid that the height is wanted for. type : number name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expanders desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpanders desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The wanted height of the cell in each row. type : array __GetExpandedWidth __GetExpandedWidth ( index , width , expanders , nonExpanders ) Calculates the amount of the additional width that the cell should take up. parameters name : index desc : What index of the positions in the grid that the width is wanted for. type : number name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expanders desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpanders desc : An array of the amount of fixed size cells in each column. type : array return value desc : The calculated width. type : number __GetExpandedWidths __GetExpandedWidths ( index , width , expanders , nonExpanders ) Calculates the widths that the cell wants to have in each of columns that it spans over. parameters name : index desc : What index of the positions in the grid that the width is wanted for. type : number name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expanders desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpanders desc : An array of the amount of fixed size cells in each column. type : array return value desc : The wanted width of the cell in each column. type : array __GetFixedHeight __GetFixedHeight () Returns the fixed height of the cell. return value desc : The fixed height of the cell. For non vertically expanding and non vertically filling cells the min-height of the GridGUI.Cell.ctrl plus 2 times the vertical margin is returned. For vertically expanding and or vertically filling cells 0 is returned unless an min-height where specified in which case the min-height of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-height is 0 then 0 is returned. type : number __GetFixedWidth __GetFixedWidth () Returns the fixed width of the cell. return value desc : The fixed width of the cell. For non horizontally expanding and non horizontally filling cells the min-width of the GridGUI.Cell.ctrl plus 2 times the horizontal margin is returned. For horizontally expanding and or horizontally filling cells 0 is returned unless an min-width where specified in which case the min-width of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-width is 0 then 0 is returned. type : number __GetNeededHeight __GetNeededHeight () Returns the needed height of the cell. return value desc : The needed height of the cell. That is the min-height of the GridGUI.Cell.ctrl plus two times the vertical margin. type : number __GetNeededWidth __GetNeededWidth () Returns the needed width of the cell. return value desc : The needed width of the cell. That is the min-width of the GridGUI.Cell.ctrl plus two times the horizontal margin. type : number __New __New ( pos , ctrl , exW := 0 , exH := 0 , fillW := false , fillH := false , justify := C , borderX := 5 , borderY := 5 , aspectRatio := ) Constructor. parameters name : pos desc : The position and size of the cell in the grid in columns and rows. That is in the same coordinate system that is used when adding cells to a GridGUI.GridGUIClass . type : GridGUI.Position name : ctrl desc : The control that will be managed by this cell. The control class needs to implement the two methods ControlGetPos and Draw as well as have the four members initialWidth , initialHeight , initialWidthVal and initialHeightVal . type : GridGUI.Control name : exW desc : The horizontal expansion weight of the cell. This is used to calculate the part of the additional GUI width that this cell should take. type : number default : 0 name : exH desc : The vertical expansion weight of the cell. This is used to calculate the part of the additional GUI height that this cell should take. type : number default : 0 name : fillW desc : Whether or not to set the width of the GridGUI.Cell.ctrl to the width of the cell. type : bool default : false name : fillH desc : Whether or not to set the height of the GridGUI.Cell.ctrl to the height of the cell. type : bool default : false name : justify desc : How the GridGUI.Cell.ctrl will be positioned in the cell when drawn. Can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : C name : borderX desc : The horizontal border or margin of the cell that is the amount of additional width beyond what the control needs that is taken up by the cell. type : number default : 5 name : borderY desc : The vertical border or margin of the cell that is the amount of additional height beyond what the control needs that is taken up by the cell. type : number default : 5 name : aspectRatio desc : The aspect ratio of the cell in width divided by height. An aspect ratio of 0 means that aspectRatio wont be applied to the cell. type : number default : return value desc : A new GridGUI.Cell instance. type : GridGUI.Cell __Sum __Sum ( obj , start , end ) Calculates a partial sum of values in an array from a start index to an end index. parameters name : obj desc : The array to calculate the sum of. type : array name : start desc : The start index of the range to sum. type : number name : end desc : The end index of the range to sum. type : number return value desc : The sum of the sub-array. type : number CalculateCtrlSize CalculateCtrlSize ( pos ) Calculates the size the GridGUI.Cell.ctrl should use given a specific cell size. parameters name : pos desc : The size to fit the GridGUI.Cell.ctrl within. type : GridGUI.Position return value desc : An area sized according to the cell members to fit within pos . type : GridGUI.Position Center Center ( area , pos ) Centres one area in another. parameters name : area desc : The area that should be centred in relation to. type : GridGUI.Position name : pos desc : The area to centre. type : GridGUI.Position return value desc : A copy of pos centred in area . type : GridGUI.Position DestroyCtrl DestroyCtrl () Destroys the GridGUI.Cell.ctrl . GetExpandedHeight GetExpandedHeight ( index , height , expandersH , nonExpandersH , width , expandersW , nonExpandersW ) Calculates the amount of the additional height that the cell should take up and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. parameters name : index desc : What index of the positions in the grid that the height is wanted for. type : number name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : array return value desc : The calculated height. type : number GetExpandedWidth GetExpandedWidth ( index , width , expandersW , nonExpandersW , height , expandersH , nonExpandersH ) Calculates the amount of the additional width that the cell should take up and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. parameters name : index desc : What index of the positions in the grid that the width is wanted for. type : number name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : array name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The calculated width. type : number GetExpansionHeightValue GetExpansionHeightValue () Getter for GridGUI.Cell.exH . return value desc : The vertical expansion weight. type : number GetExpansionWidthValue GetExpansionWidthValue () Getter for GridGUI.Cell.exW . return value desc : The horizontal expansion weight. type : number GetFixedHeight GetFixedHeight () Returns the fixed height of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The fixed height of the cell. For non vertically expanding and non vertically filling cells the min-height of the GridGUI.Cell.ctrl plus 2 times the vertical margin is returned. For vertically expanding and or vertically filling cells 0 is returned unless an min-height where specified in which case the min-height of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-height is 0 then 0 is returned. type : number GetFixedWidth GetFixedWidth () Returns the fixed width of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The fixed width of the cell. For non horizontally expanding and non horizontally filling cells the min-width of the GridGUI.Cell.ctrl plus 2 times the horizontal margin is returned. For horizontally expanding and or horizontally filling cells 0 is returned unless an min-width where specified in which case the min-width of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-width is 0 then 0 is returned. type : number GetNeededHeight GetNeededHeight () Returns the needed height of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The needed height of the cell. That is the min-height of the GridGUI.Cell.ctrl plus two times the vertical margin. type : number GetNeededWidth GetNeededWidth () Returns the needed width of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The needed width of the cell. That is the min-width of the GridGUI.Cell.ctrl plus two times the horizontal margin. type : number Justify Justify ( area , pos ) Justifies an area within another area. That is places the area according to a set of rules within the larger area. parameters name : area desc : The area to position the other area within. type : GridGUI.Position name : pos desc : The area to position in the larger area. type : GridGUI.Position return value desc : A copy of pos that is justified within area . type : GridGUI.Position SetArea SetArea ( offset , widths , heights ) Sets the position and size of the cell. parameters name : offset desc : The coordinate offset that the cell should be translated by. Used to support GridGUI.SubGrid s within a GUI, since the calculated positions are relative to the client area. type : GridGUI.Position name : widths desc : An array of the calculate width for each column. type : array name : heights desc : An array of the calculate height for each row. type : array SetAspectRatio SetAspectRatio ( ratio := \"\" ) Sets the aspect ratio of the cell. parameters name : ratio desc : The ratio to set for the cell in width divided by height. An empty ratio will set the ratio to the current width of the cell divided by the current height of the cell. type : number|\"\" default : \"\" ToolTip ToolTip () Shows a tooltip of the cell as a string. ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this cell. type : string Update Update () Updates the position of the GridGUI.Cell.ctrl and draws it.","title":"Cell"},{"location":"Classes/Cell/#cell","text":"","title":"Cell"},{"location":"Classes/Cell/#members","text":"","title":"Members"},{"location":"Classes/Cell/#aspectratio","text":"desc : The aspect ratio of the cell in width divided by height. An aspect ratio of 0 means that aspectRatio wont be applied to the cell. type : number default :","title":"aspectRatio"},{"location":"Classes/Cell/#border","text":"desc : The border of the cell. type : GridGUI.Position meta : [object]","title":"border"},{"location":"Classes/Cell/#borderx","text":"desc : The horizontal border or margin of the cell that is the amount of additional width beyond what the GridGUI.Cell.ctrl needs that is taken up by the cell. type : number default : 5","title":"borderX"},{"location":"Classes/Cell/#bordery","text":"desc : The vertical border or margin of the cell that is the amount of additional height beyond what the GridGUI.Cell.ctrl needs that is taken up by the cell. type : number default : 5","title":"borderY"},{"location":"Classes/Cell/#ctrl","text":"desc : The control that is managed by this cell. The control class needs to implement the two methods ControlGetPos and Draw as well as have the four members initialWidth , initialHeight , initialWidthVal and initialHeightVal . type : GridGUI.Control meta : [object]","title":"ctrl"},{"location":"Classes/Cell/#ctrlinitialpos","text":"desc : The initial position and size of the GridGUI.Cell.ctrl . It is used as the min size of the GridGUI.Cell.ctrl if no min size is specified. type : GridGUI.Position meta : [object]","title":"ctrlInitialPos"},{"location":"Classes/Cell/#ctrlpos","text":"desc : The position and size when the GridGUI.Cell.ctrl was last drawn. type : GridGUI.Position meta : [object]","title":"ctrlPos"},{"location":"Classes/Cell/#exh","text":"desc : The vertical expansion weight of the cell. This is used to calculate the part of the additional GUI height that this cell should take. type : number default : 0","title":"exH"},{"location":"Classes/Cell/#exw","text":"desc : The horizontal expansion weight of the cell. This is used to calculate the part of the additional GUI width that this cell should take. type : number default : 0","title":"exW"},{"location":"Classes/Cell/#fillh","text":"desc : Whether or not to set the height of the GridGUI.Cell.ctrl to the height of the cell. type : bool default : false","title":"fillH"},{"location":"Classes/Cell/#fillw","text":"desc : Whether or not to set the width of the GridGUI.Cell.ctrl to the width of the cell. type : bool default : false","title":"fillW"},{"location":"Classes/Cell/#gridpos","text":"desc : The position and size of the cell in the grid in columns and rows. That is in the same coordinate system that is used when adding cells to a GridGUI.GridGUIClass . type : GridGUI.Position meta : [object]","title":"gridpos"},{"location":"Classes/Cell/#hashconfligts","text":"desc : Whether or not the cell needs to take any other cells into account when calculating its height. type : bool default : false","title":"hasHConfligts"},{"location":"Classes/Cell/#haswconfligts","text":"desc : Whether or not the cell needs to take any other cells into account when calculating its width. type : bool default : false","title":"hasWConfligts"},{"location":"Classes/Cell/#justifyoptions","text":"desc : How the GridGUI.Cell.ctrl will be positioned in the cell when drawn. Can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : C","title":"justifyOptions"},{"location":"Classes/Cell/#othersh","text":"desc : The combined vertical expansion weight of other cells that this cell is in conflict with. This is used to calculate the part of the additional GUI height that this cell should take. type : number default : 0","title":"othersH"},{"location":"Classes/Cell/#othersw","text":"desc : The combined horizontal expansion weight of other cells that this cell is in conflict with. This is used to calculate the part of the additional GUI width that this cell should take. type : number default : 0","title":"othersW"},{"location":"Classes/Cell/#pos","text":"desc : The position and size of the cell. type : GridGUI.Position meta : [object]","title":"pos"},{"location":"Classes/Cell/#methods","text":"","title":"Methods"},{"location":"Classes/Cell/#__delete","text":"__Delete () Destructor. Destroys the GridGUI.Cell.ctrl .","title":"__Delete"},{"location":"Classes/Cell/#__findleastusedrowcolumn","text":"__FindLeastUsedRowColumn ( size , start , nonExpanders , expanders ) Returns the index of the where there are the lest amount of cells with a fixed size or where there is the largest expansion weight. parameters name : size desc : How many indexes to check. type : number name : start desc : What index to start checking from. type : number name : nonExpanders desc : An array of how many fixed sized cells there are in either the columns or rows. type : array name : expanders desc : An array of how many expanding cells there are in either the columns or rows. type : array return value desc : The found index. type : number","title":"__FindLeastUsedRowColumn"},{"location":"Classes/Cell/#__getexpandedheight","text":"__GetExpandedHeight ( index , height , expanders , nonExpanders ) Calculates the amount of the additional height that the cell should take up. parameters name : index desc : What index of the positions in the grid that the height is wanted for. type : number name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expanders desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpanders desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The calculated height. type : number","title":"__GetExpandedHeight"},{"location":"Classes/Cell/#__getexpandedheights","text":"__GetExpandedHeights ( index , height , expanders , nonExpanders ) Calculates the heights that the cell wants to have in each of rows that it spans over. parameters name : index desc : What index of the positions in the grid that the height is wanted for. type : number name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expanders desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpanders desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The wanted height of the cell in each row. type : array","title":"__GetExpandedHeights"},{"location":"Classes/Cell/#__getexpandedwidth","text":"__GetExpandedWidth ( index , width , expanders , nonExpanders ) Calculates the amount of the additional width that the cell should take up. parameters name : index desc : What index of the positions in the grid that the width is wanted for. type : number name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expanders desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpanders desc : An array of the amount of fixed size cells in each column. type : array return value desc : The calculated width. type : number","title":"__GetExpandedWidth"},{"location":"Classes/Cell/#__getexpandedwidths","text":"__GetExpandedWidths ( index , width , expanders , nonExpanders ) Calculates the widths that the cell wants to have in each of columns that it spans over. parameters name : index desc : What index of the positions in the grid that the width is wanted for. type : number name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expanders desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpanders desc : An array of the amount of fixed size cells in each column. type : array return value desc : The wanted width of the cell in each column. type : array","title":"__GetExpandedWidths"},{"location":"Classes/Cell/#__getfixedheight","text":"__GetFixedHeight () Returns the fixed height of the cell. return value desc : The fixed height of the cell. For non vertically expanding and non vertically filling cells the min-height of the GridGUI.Cell.ctrl plus 2 times the vertical margin is returned. For vertically expanding and or vertically filling cells 0 is returned unless an min-height where specified in which case the min-height of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-height is 0 then 0 is returned. type : number","title":"__GetFixedHeight"},{"location":"Classes/Cell/#__getfixedwidth","text":"__GetFixedWidth () Returns the fixed width of the cell. return value desc : The fixed width of the cell. For non horizontally expanding and non horizontally filling cells the min-width of the GridGUI.Cell.ctrl plus 2 times the horizontal margin is returned. For horizontally expanding and or horizontally filling cells 0 is returned unless an min-width where specified in which case the min-width of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-width is 0 then 0 is returned. type : number","title":"__GetFixedWidth"},{"location":"Classes/Cell/#__getneededheight","text":"__GetNeededHeight () Returns the needed height of the cell. return value desc : The needed height of the cell. That is the min-height of the GridGUI.Cell.ctrl plus two times the vertical margin. type : number","title":"__GetNeededHeight"},{"location":"Classes/Cell/#__getneededwidth","text":"__GetNeededWidth () Returns the needed width of the cell. return value desc : The needed width of the cell. That is the min-width of the GridGUI.Cell.ctrl plus two times the horizontal margin. type : number","title":"__GetNeededWidth"},{"location":"Classes/Cell/#__new","text":"__New ( pos , ctrl , exW := 0 , exH := 0 , fillW := false , fillH := false , justify := C , borderX := 5 , borderY := 5 , aspectRatio := ) Constructor. parameters name : pos desc : The position and size of the cell in the grid in columns and rows. That is in the same coordinate system that is used when adding cells to a GridGUI.GridGUIClass . type : GridGUI.Position name : ctrl desc : The control that will be managed by this cell. The control class needs to implement the two methods ControlGetPos and Draw as well as have the four members initialWidth , initialHeight , initialWidthVal and initialHeightVal . type : GridGUI.Control name : exW desc : The horizontal expansion weight of the cell. This is used to calculate the part of the additional GUI width that this cell should take. type : number default : 0 name : exH desc : The vertical expansion weight of the cell. This is used to calculate the part of the additional GUI height that this cell should take. type : number default : 0 name : fillW desc : Whether or not to set the width of the GridGUI.Cell.ctrl to the width of the cell. type : bool default : false name : fillH desc : Whether or not to set the height of the GridGUI.Cell.ctrl to the height of the cell. type : bool default : false name : justify desc : How the GridGUI.Cell.ctrl will be positioned in the cell when drawn. Can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : C name : borderX desc : The horizontal border or margin of the cell that is the amount of additional width beyond what the control needs that is taken up by the cell. type : number default : 5 name : borderY desc : The vertical border or margin of the cell that is the amount of additional height beyond what the control needs that is taken up by the cell. type : number default : 5 name : aspectRatio desc : The aspect ratio of the cell in width divided by height. An aspect ratio of 0 means that aspectRatio wont be applied to the cell. type : number default : return value desc : A new GridGUI.Cell instance. type : GridGUI.Cell","title":"__New"},{"location":"Classes/Cell/#__sum","text":"__Sum ( obj , start , end ) Calculates a partial sum of values in an array from a start index to an end index. parameters name : obj desc : The array to calculate the sum of. type : array name : start desc : The start index of the range to sum. type : number name : end desc : The end index of the range to sum. type : number return value desc : The sum of the sub-array. type : number","title":"__Sum"},{"location":"Classes/Cell/#calculatectrlsize","text":"CalculateCtrlSize ( pos ) Calculates the size the GridGUI.Cell.ctrl should use given a specific cell size. parameters name : pos desc : The size to fit the GridGUI.Cell.ctrl within. type : GridGUI.Position return value desc : An area sized according to the cell members to fit within pos . type : GridGUI.Position","title":"CalculateCtrlSize"},{"location":"Classes/Cell/#center","text":"Center ( area , pos ) Centres one area in another. parameters name : area desc : The area that should be centred in relation to. type : GridGUI.Position name : pos desc : The area to centre. type : GridGUI.Position return value desc : A copy of pos centred in area . type : GridGUI.Position","title":"Center"},{"location":"Classes/Cell/#destroyctrl","text":"DestroyCtrl () Destroys the GridGUI.Cell.ctrl .","title":"DestroyCtrl"},{"location":"Classes/Cell/#getexpandedheight","text":"GetExpandedHeight ( index , height , expandersH , nonExpandersH , width , expandersW , nonExpandersW ) Calculates the amount of the additional height that the cell should take up and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. parameters name : index desc : What index of the positions in the grid that the height is wanted for. type : number name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : array return value desc : The calculated height. type : number","title":"GetExpandedHeight"},{"location":"Classes/Cell/#getexpandedwidth","text":"GetExpandedWidth ( index , width , expandersW , nonExpandersW , height , expandersH , nonExpandersH ) Calculates the amount of the additional width that the cell should take up and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. parameters name : index desc : What index of the positions in the grid that the width is wanted for. type : number name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : array name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The calculated width. type : number","title":"GetExpandedWidth"},{"location":"Classes/Cell/#getexpansionheightvalue","text":"GetExpansionHeightValue () Getter for GridGUI.Cell.exH . return value desc : The vertical expansion weight. type : number","title":"GetExpansionHeightValue"},{"location":"Classes/Cell/#getexpansionwidthvalue","text":"GetExpansionWidthValue () Getter for GridGUI.Cell.exW . return value desc : The horizontal expansion weight. type : number","title":"GetExpansionWidthValue"},{"location":"Classes/Cell/#getfixedheight","text":"GetFixedHeight () Returns the fixed height of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The fixed height of the cell. For non vertically expanding and non vertically filling cells the min-height of the GridGUI.Cell.ctrl plus 2 times the vertical margin is returned. For vertically expanding and or vertically filling cells 0 is returned unless an min-height where specified in which case the min-height of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-height is 0 then 0 is returned. type : number","title":"GetFixedHeight"},{"location":"Classes/Cell/#getfixedwidth","text":"GetFixedWidth () Returns the fixed width of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The fixed width of the cell. For non horizontally expanding and non horizontally filling cells the min-width of the GridGUI.Cell.ctrl plus 2 times the horizontal margin is returned. For horizontally expanding and or horizontally filling cells 0 is returned unless an min-width where specified in which case the min-width of the GridGUI.Cell.ctrl plus 2 time the vertical margin is returned unless the min-width is 0 then 0 is returned. type : number","title":"GetFixedWidth"},{"location":"Classes/Cell/#getneededheight","text":"GetNeededHeight () Returns the needed height of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The needed height of the cell. That is the min-height of the GridGUI.Cell.ctrl plus two times the vertical margin. type : number","title":"GetNeededHeight"},{"location":"Classes/Cell/#getneededwidth","text":"GetNeededWidth () Returns the needed width of the cell and applies the aspect ratio of GridGUI.Cell.aspectRatio if non zero. return value desc : The needed width of the cell. That is the min-width of the GridGUI.Cell.ctrl plus two times the horizontal margin. type : number","title":"GetNeededWidth"},{"location":"Classes/Cell/#justify","text":"Justify ( area , pos ) Justifies an area within another area. That is places the area according to a set of rules within the larger area. parameters name : area desc : The area to position the other area within. type : GridGUI.Position name : pos desc : The area to position in the larger area. type : GridGUI.Position return value desc : A copy of pos that is justified within area . type : GridGUI.Position","title":"Justify"},{"location":"Classes/Cell/#setarea","text":"SetArea ( offset , widths , heights ) Sets the position and size of the cell. parameters name : offset desc : The coordinate offset that the cell should be translated by. Used to support GridGUI.SubGrid s within a GUI, since the calculated positions are relative to the client area. type : GridGUI.Position name : widths desc : An array of the calculate width for each column. type : array name : heights desc : An array of the calculate height for each row. type : array","title":"SetArea"},{"location":"Classes/Cell/#setaspectratio","text":"SetAspectRatio ( ratio := \"\" ) Sets the aspect ratio of the cell. parameters name : ratio desc : The ratio to set for the cell in width divided by height. An empty ratio will set the ratio to the current width of the cell divided by the current height of the cell. type : number|\"\" default : \"\"","title":"SetAspectRatio"},{"location":"Classes/Cell/#tooltip","text":"ToolTip () Shows a tooltip of the cell as a string.","title":"ToolTip"},{"location":"Classes/Cell/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this cell. type : string","title":"ToStr"},{"location":"Classes/Cell/#update","text":"Update () Updates the position of the GridGUI.Cell.ctrl and draws it.","title":"Update"},{"location":"Classes/CellControl/","text":"CellControl Members minHeight desc : Whether or not the control has a minimum height. type : bool default : false minHeightVal desc : The minimum height of the control. Should be disregarded if GridGUI.CellControl.minHeight is false . type : number default : 0 minWidth desc : Whether or not the control has a minimum width. type : bool default : false minWidthVal desc : The minimum width of the control. Should be disregarded if GridGUI.CellControl.minWidth is false . type : number default : 0 Methods Draw Draw ( area ) Implementations of this interface should move and draw the control on the GUI in this method. parameters name : area desc : The position to move the control to and size to draw the control at. type : GridGUI.Position GetPos GetPos () Implementations of this interface should return the position and size of the control. return value desc : The position and size of the control. type : GridGUI.Position MinSize MinSize ( w := \"\" , h := \"\" ) Sets the minimum size of the control. If both w and h are left unset then the minimum size will be set to the current size of the control as returned by GridGUI.CellControl.GetPos parameters name : w desc : The minimum width to set. If left unset then the minimum width won't be changed. type : number|\"\" default : \"\" name : h desc : The minimum height to set. If left unset then the minimum height won't be changed. type : number|\"\" default : \"\"","title":"CellControl"},{"location":"Classes/CellControl/#cellcontrol","text":"","title":"CellControl"},{"location":"Classes/CellControl/#members","text":"","title":"Members"},{"location":"Classes/CellControl/#minheight","text":"desc : Whether or not the control has a minimum height. type : bool default : false","title":"minHeight"},{"location":"Classes/CellControl/#minheightval","text":"desc : The minimum height of the control. Should be disregarded if GridGUI.CellControl.minHeight is false . type : number default : 0","title":"minHeightVal"},{"location":"Classes/CellControl/#minwidth","text":"desc : Whether or not the control has a minimum width. type : bool default : false","title":"minWidth"},{"location":"Classes/CellControl/#minwidthval","text":"desc : The minimum width of the control. Should be disregarded if GridGUI.CellControl.minWidth is false . type : number default : 0","title":"minWidthVal"},{"location":"Classes/CellControl/#methods","text":"","title":"Methods"},{"location":"Classes/CellControl/#draw","text":"Draw ( area ) Implementations of this interface should move and draw the control on the GUI in this method. parameters name : area desc : The position to move the control to and size to draw the control at. type : GridGUI.Position","title":"Draw"},{"location":"Classes/CellControl/#getpos","text":"GetPos () Implementations of this interface should return the position and size of the control. return value desc : The position and size of the control. type : GridGUI.Position","title":"GetPos"},{"location":"Classes/CellControl/#minsize","text":"MinSize ( w := \"\" , h := \"\" ) Sets the minimum size of the control. If both w and h are left unset then the minimum size will be set to the current size of the control as returned by GridGUI.CellControl.GetPos parameters name : w desc : The minimum width to set. If left unset then the minimum width won't be changed. type : number|\"\" default : \"\" name : h desc : The minimum height to set. If left unset then the minimum height won't be changed. type : number|\"\" default : \"\"","title":"MinSize"},{"location":"Classes/Column/","text":"Column Members catched desc : Whether or not the members have already been calculate. type : bool default : false cells desc : A collection of arrays of GridGUI.Cell s indexed by the index of the rows they are placed on. type : Associative Array default : {} meta : [object] confligtingExpanders desc : A collection of cells that have horizontal expansion conflicts. type : Associative Array default : {} meta : [object, cached] expanderMaxValue desc : The largest horizontal expansion weight in this column. type : number default : 0 meta : [cached] expanders desc : The sum of all the horizontal expansion weights of cells that are in this column. type : number default : 0 meta : [cached] fixedWidth desc : The maximal fixed width of the cells, that is the largest fixed width for a cell in GridGUI.Column.cells . type : number default : 0 meta : [cached] index desc : The index of the column in the grid. type : number default : 0 minWidth desc : The maximal minimal width for the cells, that is the largest minimal width for a cell in GridGUI.Column.cells . type : number default : 0 meta : [cached] nonExpanders desc : The amount of cells with fixed size in this column. type : number default : 0 meta : [cached] Methods __CalculateConfligtingExpanders __CalculateConfligtingExpanders ( c ) Updates GridGUI.Column.confligtingExpanders with the GridGUI.Cell for a cell if it has horizontal conflicts. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateExpanders __CalculateExpanders ( c ) Updates GridGUI.Column.expanders with the result of GridGUI.Cell.GetExpansionWidthValue for a cell. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateFixedWidth __CalculateFixedWidth ( c ) Updates GridGUI.Column.fixedWidth with the result of GridGUI.Cell.GetFixedWidth for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateMinWidth __CalculateMinWidth ( c ) Updates GridGUI.Column.minWidth with the result of GridGUI.Cell.GetNeededWidth for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateNonExpanders __CalculateNonExpanders ( c ) Increments GridGUI.Column.nonExpanders if the GridGUI.Cell does not expand horizontally. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __New __New ( index ) Constructor. parameters name : index desc : The index of the column in the grid. type : number return value desc : A new GridGUI.Column instance. type : GridGUI.Column __ResetConstants __ResetConstants () Resets the cached GridGUI.Column members to their default values. Add Add ( c ) Adds a GridGUI.Cell to the column. parameters name : c desc : The GridGUI.Cell to added to the column. type : GridGUI.Cell CalculateConstants CalculateConstants () Calculates the values for the GridGUI.Column members that are cached. CalculateWidth CalculateWidth ( width , expandersW , nonExpandersW , height , expandersH , nonExpandersH ) Calculates the width of the column. parameters name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : associative array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : associative array name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The width of the column. type : number GetExpanderMaxValue GetExpanderMaxValue () Getter for GridGUI.Column.expanderMaxValue . return value desc : The largest horizontal expansion weight of a cell in the column. type : number GetExpanders GetExpanders () Getter for GridGUI.Column.expanders . return value desc : The sum of horizontal expansion weight of cells in the column. type : number GetFixedWidth GetFixedWidth () Getter for GridGUI.Column.fixedWidth . return value desc : The largest fixed width of a cell in the column. type : number GetMinWidth GetMinWidth () Getter for GridGUI.Column.minWidth . return value desc : The largest minimal width of a cell in the column. type : number GetNonExpanders GetNonExpanders () Getter for GridGUI.Column.nonExpanders . return value desc : The amount of cells with fixed width in the column. type : number Remove Remove ( c ) Removes a GridGUI.Cell from the column. parameters name : c desc : The GridGUI.Cell to remove from the column. type : GridGUI.Cell","title":"Column"},{"location":"Classes/Column/#column","text":"","title":"Column"},{"location":"Classes/Column/#members","text":"","title":"Members"},{"location":"Classes/Column/#catched","text":"desc : Whether or not the members have already been calculate. type : bool default : false","title":"catched"},{"location":"Classes/Column/#cells","text":"desc : A collection of arrays of GridGUI.Cell s indexed by the index of the rows they are placed on. type : Associative Array default : {} meta : [object]","title":"cells"},{"location":"Classes/Column/#confligtingexpanders","text":"desc : A collection of cells that have horizontal expansion conflicts. type : Associative Array default : {} meta : [object, cached]","title":"confligtingExpanders"},{"location":"Classes/Column/#expandermaxvalue","text":"desc : The largest horizontal expansion weight in this column. type : number default : 0 meta : [cached]","title":"expanderMaxValue"},{"location":"Classes/Column/#expanders","text":"desc : The sum of all the horizontal expansion weights of cells that are in this column. type : number default : 0 meta : [cached]","title":"expanders"},{"location":"Classes/Column/#fixedwidth","text":"desc : The maximal fixed width of the cells, that is the largest fixed width for a cell in GridGUI.Column.cells . type : number default : 0 meta : [cached]","title":"fixedWidth"},{"location":"Classes/Column/#index","text":"desc : The index of the column in the grid. type : number default : 0","title":"index"},{"location":"Classes/Column/#minwidth","text":"desc : The maximal minimal width for the cells, that is the largest minimal width for a cell in GridGUI.Column.cells . type : number default : 0 meta : [cached]","title":"minWidth"},{"location":"Classes/Column/#nonexpanders","text":"desc : The amount of cells with fixed size in this column. type : number default : 0 meta : [cached]","title":"nonExpanders"},{"location":"Classes/Column/#methods","text":"","title":"Methods"},{"location":"Classes/Column/#__calculateconfligtingexpanders","text":"__CalculateConfligtingExpanders ( c ) Updates GridGUI.Column.confligtingExpanders with the GridGUI.Cell for a cell if it has horizontal conflicts. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateConfligtingExpanders"},{"location":"Classes/Column/#__calculateexpanders","text":"__CalculateExpanders ( c ) Updates GridGUI.Column.expanders with the result of GridGUI.Cell.GetExpansionWidthValue for a cell. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateExpanders"},{"location":"Classes/Column/#__calculatefixedwidth","text":"__CalculateFixedWidth ( c ) Updates GridGUI.Column.fixedWidth with the result of GridGUI.Cell.GetFixedWidth for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateFixedWidth"},{"location":"Classes/Column/#__calculateminwidth","text":"__CalculateMinWidth ( c ) Updates GridGUI.Column.minWidth with the result of GridGUI.Cell.GetNeededWidth for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateMinWidth"},{"location":"Classes/Column/#__calculatenonexpanders","text":"__CalculateNonExpanders ( c ) Increments GridGUI.Column.nonExpanders if the GridGUI.Cell does not expand horizontally. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateNonExpanders"},{"location":"Classes/Column/#__new","text":"__New ( index ) Constructor. parameters name : index desc : The index of the column in the grid. type : number return value desc : A new GridGUI.Column instance. type : GridGUI.Column","title":"__New"},{"location":"Classes/Column/#__resetconstants","text":"__ResetConstants () Resets the cached GridGUI.Column members to their default values.","title":"__ResetConstants"},{"location":"Classes/Column/#add","text":"Add ( c ) Adds a GridGUI.Cell to the column. parameters name : c desc : The GridGUI.Cell to added to the column. type : GridGUI.Cell","title":"Add"},{"location":"Classes/Column/#calculateconstants","text":"CalculateConstants () Calculates the values for the GridGUI.Column members that are cached.","title":"CalculateConstants"},{"location":"Classes/Column/#calculatewidth","text":"CalculateWidth ( width , expandersW , nonExpandersW , height , expandersH , nonExpandersH ) Calculates the width of the column. parameters name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : associative array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : associative array name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array return value desc : The width of the column. type : number","title":"CalculateWidth"},{"location":"Classes/Column/#getexpandermaxvalue","text":"GetExpanderMaxValue () Getter for GridGUI.Column.expanderMaxValue . return value desc : The largest horizontal expansion weight of a cell in the column. type : number","title":"GetExpanderMaxValue"},{"location":"Classes/Column/#getexpanders","text":"GetExpanders () Getter for GridGUI.Column.expanders . return value desc : The sum of horizontal expansion weight of cells in the column. type : number","title":"GetExpanders"},{"location":"Classes/Column/#getfixedwidth","text":"GetFixedWidth () Getter for GridGUI.Column.fixedWidth . return value desc : The largest fixed width of a cell in the column. type : number","title":"GetFixedWidth"},{"location":"Classes/Column/#getminwidth","text":"GetMinWidth () Getter for GridGUI.Column.minWidth . return value desc : The largest minimal width of a cell in the column. type : number","title":"GetMinWidth"},{"location":"Classes/Column/#getnonexpanders","text":"GetNonExpanders () Getter for GridGUI.Column.nonExpanders . return value desc : The amount of cells with fixed width in the column. type : number","title":"GetNonExpanders"},{"location":"Classes/Column/#remove","text":"Remove ( c ) Removes a GridGUI.Cell from the column. parameters name : c desc : The GridGUI.Cell to remove from the column. type : GridGUI.Cell","title":"Remove"},{"location":"Classes/Columns/","text":"Columns Members catched desc : Whether or not the members have already been calculate. type : bool default : false columns desc : A collection of the GridGUI.Column s where one or more GridGUI.Cell s have been placed. That is only used columns are generated. type : associative array default : {} meta : [object] expanders desc : A collection of the sum of horizontal GridGUI.Cell expansion weights of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached] expandersMaxValue desc : A collection of the maximum horizontal GridGUI.Cell expansion weight of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached] fixedWidths desc : A collection of the fixed width of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached] minWidths desc : A collection of the min width of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached] nonExpanders desc : A collection of the amount of horizontally fixed GridGUI.Cell s in each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached] Methods __New __New () Constructor. return value desc : A new GridGUI.Columns instance. type : GridGUI.Columns __ResetConstants __ResetConstants () Resets the cached GridGUI.Columns members to their default values. Add Add ( c ) Adds a GridGUI.Cell to the GridGUI.Column s that it spans over. If the GridGUI.Column s are not already in GridGUI.Columns.columns they are added before adding the cell. parameters name : c desc : The GridGUI.Cell to add to the GridGUI.Column s. type : GridGUI.Cell CalculateConstants CalculateConstants () Calculates the values for the GridGUI.Columns members that are cached. CalculateWidths CalculateWidths ( width , expandersW ,, nonExpandersW ,, height , expandersH , nonExpandersH ) Calculates the part of the available width that each GridGUI.Column in GridGUI.Columns.columns will get. parameters name : width desc : The width of the grid. That is the width that the grid should fill. type : number name : expandersW, desc : The member GridGUI.Columns.expanders type : associative array name : nonExpandersW, desc : The member GridGUI.Columns.nonExpanders type : associative array name : height desc : The unclaimed height of the grid. That is the height of the grid that is left after removing the height of the fixed cells. type : number name : expandersH desc : The member GridGUI.Rows.expanders type : associative array name : nonExpandersH desc : The member GridGUI.Rows.nonExpanders type : associative array return value desc : The calculated widths of the GridGUI.Column s in GridGUI.Columns.columns . type : associative array GetFixedWidth GetFixedWidth () Returns the sum of the fixed widths of the GridGUI.Column s in GridGUI.Columns.columns . return value desc : The sum of the fixed widths of the GridGUI.Column s in GridGUI.Columns.columns . type : number GetMinWidth GetMinWidth () Returns the sum of the minimal widths of the GridGUI.Column s in GridGUI.Columns.columns . return value desc : The sum of the minimal widths of the GridGUI.Column s in GridGUI.Columns.columns . type : number ReduceToGuiSize ReduceToGuiSize ( widths , expandedWidths , sumExpandedWidths , excessWidth ) Fixes miscalculations in the width of expanding GridGUI.Cell s by reducing their width down until they all fit in the available width or all have reach their min width. The reduction is done starting with the widest GridGUI.Column to the thinnest. parameters name : widths desc : The calculated widths for the GridGUI.Column s in GridGUI.Columns.columns . type : associative array name : expandedWidths desc : An array of the widths of GridGUI.Column s with one or more horizontally expanding GridGUI.Cell if the current width in widths corresponding to the column is larger than the minimum of the column otherwise it wont be included in the expandedWidths type : array name : sumExpandedWidths desc : The sum of the widths in expandedWidths . type : number name : excessWidth desc : The amount of width that the sum of widths would exceed the width of the grid/gui. type : number Remove Remove ( c ) Removes a GridGUI.Cell from the GridGUI.Column s that it spans over. If the GridGUI.Column s are empty after removing the cell the column will be removed as well. parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.Column s. type : GridGUI.Cell","title":"Columns"},{"location":"Classes/Columns/#columns","text":"","title":"Columns"},{"location":"Classes/Columns/#members","text":"","title":"Members"},{"location":"Classes/Columns/#catched","text":"desc : Whether or not the members have already been calculate. type : bool default : false","title":"catched"},{"location":"Classes/Columns/#columns_1","text":"desc : A collection of the GridGUI.Column s where one or more GridGUI.Cell s have been placed. That is only used columns are generated. type : associative array default : {} meta : [object]","title":"columns"},{"location":"Classes/Columns/#expanders","text":"desc : A collection of the sum of horizontal GridGUI.Cell expansion weights of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached]","title":"expanders"},{"location":"Classes/Columns/#expandersmaxvalue","text":"desc : A collection of the maximum horizontal GridGUI.Cell expansion weight of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached]","title":"expandersMaxValue"},{"location":"Classes/Columns/#fixedwidths","text":"desc : A collection of the fixed width of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached]","title":"fixedWidths"},{"location":"Classes/Columns/#minwidths","text":"desc : A collection of the min width of each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached]","title":"minWidths"},{"location":"Classes/Columns/#nonexpanders","text":"desc : A collection of the amount of horizontally fixed GridGUI.Cell s in each GridGUI.Column in GridGUI.Columns.columns . type : associative array default : {} meta : [object, cached]","title":"nonExpanders"},{"location":"Classes/Columns/#methods","text":"","title":"Methods"},{"location":"Classes/Columns/#__new","text":"__New () Constructor. return value desc : A new GridGUI.Columns instance. type : GridGUI.Columns","title":"__New"},{"location":"Classes/Columns/#__resetconstants","text":"__ResetConstants () Resets the cached GridGUI.Columns members to their default values.","title":"__ResetConstants"},{"location":"Classes/Columns/#add","text":"Add ( c ) Adds a GridGUI.Cell to the GridGUI.Column s that it spans over. If the GridGUI.Column s are not already in GridGUI.Columns.columns they are added before adding the cell. parameters name : c desc : The GridGUI.Cell to add to the GridGUI.Column s. type : GridGUI.Cell","title":"Add"},{"location":"Classes/Columns/#calculateconstants","text":"CalculateConstants () Calculates the values for the GridGUI.Columns members that are cached.","title":"CalculateConstants"},{"location":"Classes/Columns/#calculatewidths","text":"CalculateWidths ( width , expandersW ,, nonExpandersW ,, height , expandersH , nonExpandersH ) Calculates the part of the available width that each GridGUI.Column in GridGUI.Columns.columns will get. parameters name : width desc : The width of the grid. That is the width that the grid should fill. type : number name : expandersW, desc : The member GridGUI.Columns.expanders type : associative array name : nonExpandersW, desc : The member GridGUI.Columns.nonExpanders type : associative array name : height desc : The unclaimed height of the grid. That is the height of the grid that is left after removing the height of the fixed cells. type : number name : expandersH desc : The member GridGUI.Rows.expanders type : associative array name : nonExpandersH desc : The member GridGUI.Rows.nonExpanders type : associative array return value desc : The calculated widths of the GridGUI.Column s in GridGUI.Columns.columns . type : associative array","title":"CalculateWidths"},{"location":"Classes/Columns/#getfixedwidth","text":"GetFixedWidth () Returns the sum of the fixed widths of the GridGUI.Column s in GridGUI.Columns.columns . return value desc : The sum of the fixed widths of the GridGUI.Column s in GridGUI.Columns.columns . type : number","title":"GetFixedWidth"},{"location":"Classes/Columns/#getminwidth","text":"GetMinWidth () Returns the sum of the minimal widths of the GridGUI.Column s in GridGUI.Columns.columns . return value desc : The sum of the minimal widths of the GridGUI.Column s in GridGUI.Columns.columns . type : number","title":"GetMinWidth"},{"location":"Classes/Columns/#reducetoguisize","text":"ReduceToGuiSize ( widths , expandedWidths , sumExpandedWidths , excessWidth ) Fixes miscalculations in the width of expanding GridGUI.Cell s by reducing their width down until they all fit in the available width or all have reach their min width. The reduction is done starting with the widest GridGUI.Column to the thinnest. parameters name : widths desc : The calculated widths for the GridGUI.Column s in GridGUI.Columns.columns . type : associative array name : expandedWidths desc : An array of the widths of GridGUI.Column s with one or more horizontally expanding GridGUI.Cell if the current width in widths corresponding to the column is larger than the minimum of the column otherwise it wont be included in the expandedWidths type : array name : sumExpandedWidths desc : The sum of the widths in expandedWidths . type : number name : excessWidth desc : The amount of width that the sum of widths would exceed the width of the grid/gui. type : number","title":"ReduceToGuiSize"},{"location":"Classes/Columns/#remove","text":"Remove ( c ) Removes a GridGUI.Cell from the GridGUI.Column s that it spans over. If the GridGUI.Column s are empty after removing the cell the column will be removed as well. parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.Column s. type : GridGUI.Cell","title":"Remove"},{"location":"Classes/ControlClass/","text":"ControlClass Members hwnd desc : The hwnd of the associated control. type : hwnd minHeight desc : Whether or not the control has had its height set using GridGUI.ControlClass.__ParseOptions . type : bool default : false minHeightVal desc : The height value set using GridGUI.ControlClass.__ParseOptions . type : number|false default : false minWidth desc : Whether or not the control has had its width set using GridGUI.ControlClass.__ParseOptions . type : bool default : false minWidthVal desc : The width value set using GridGUI.ControlClass.__ParseOptions . type : number|false default : false Methods __Init __Init () Initialises the GridGUI.ControlClass members. __New __New ( hwnd ) Constructor. parameters name : hwnd desc : The hwnd of the control. type : hwnd return value desc : A new GridGUI.ControlClass instance. type : GridGUI.ControlClass __ParseOptions __ParseOptions ( options ) Parses option strings for values that are used by the class and updated the instance based on the values. parameters name : options desc : The options that will be parsed, values handled by the lib will be acted on and removed. type : string return value desc : The option string without the parts that the class handles. type : string Control Control ( subCommand , value ) A thin function wrapper for Control . parameters name : subCommand desc : The subcommand to set for the control. See link for available subcommands. type : string link : link name : value desc : The value to apply to the subcommand. See link for values used in the subcommands. type : string|number link : link link : link ControlClick ControlClick ( pos := \"\" , WhichButton := LEFT , ClickCount := 1 , Options := \"\" ) A thin function wrapper for ControlClick . parameters name : pos desc : The position to click at in the control, see link for the coordinate format. type : string default : \"\" link : link name : WhichButton desc : Which mouse button to click, see link for supported values. type : string default : LEFT link : link name : ClickCount desc : The number of click to perform. type : number default : 1 name : Options desc : A option string to change how the click are performed, see link for supported options. type : string default : \"\" link : link link : link ControlFocus ControlFocus () A thin function wrapper for ControlFocus . link : link ControlGet ControlGet ( subCommand := \"\" , value := \"\" ) A thin function wrapper for ControlGet . parameters name : subCommand desc : The subcommand to retrieve from the control. See link for available subcommands. type : string default : \"\" link : link name : value desc : Used to specify what to retrieve when the subcommand is not specific enough. type : string default : \"\" link : link return value desc : The retrieved value. type : any link : link ControlGetPos ControlGetPos () A thin function wrapper for ControlGetPos , except that it returns a GridGUI.Position instance. return value desc : The position and size of the control. type : GridGUI.Position link : link ControlGetText ControlGetText () A thin function wrapper for ControlGetText . return value desc : The text of the control. type : string link : link ControlMove ControlMove ( pos ) A thin function wrapper for ControlMove , except that it takes a GridGUI.Position instance as argument. parameters name : pos desc : The position and size that the control should be moved and resized to. type : GridGUI.Position link : link ControlSend ControlSend ( keys ) A thin function wrapper for ControlSend . parameters name : keys desc : The sequence of keys to send, use {keyname} for non printable keys. type : string link : link link : link ControlSetText ControlSetText ( NewText ) A thin function wrapper for ControlSetText . parameters name : NewText desc : The text to set the text of the control to. type : string link : link link : link Options Options ( options ) Applies styles to the control using Control, Style . parameters name : options desc : The style number string to apply. See link for available styles. type : string link : link link : link ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this GridGUI.ControlClass . type : string","title":"ControlClass"},{"location":"Classes/ControlClass/#controlclass","text":"","title":"ControlClass"},{"location":"Classes/ControlClass/#members","text":"","title":"Members"},{"location":"Classes/ControlClass/#hwnd","text":"desc : The hwnd of the associated control. type : hwnd","title":"hwnd"},{"location":"Classes/ControlClass/#minheight","text":"desc : Whether or not the control has had its height set using GridGUI.ControlClass.__ParseOptions . type : bool default : false","title":"minHeight"},{"location":"Classes/ControlClass/#minheightval","text":"desc : The height value set using GridGUI.ControlClass.__ParseOptions . type : number|false default : false","title":"minHeightVal"},{"location":"Classes/ControlClass/#minwidth","text":"desc : Whether or not the control has had its width set using GridGUI.ControlClass.__ParseOptions . type : bool default : false","title":"minWidth"},{"location":"Classes/ControlClass/#minwidthval","text":"desc : The width value set using GridGUI.ControlClass.__ParseOptions . type : number|false default : false","title":"minWidthVal"},{"location":"Classes/ControlClass/#methods","text":"","title":"Methods"},{"location":"Classes/ControlClass/#__init","text":"__Init () Initialises the GridGUI.ControlClass members.","title":"__Init"},{"location":"Classes/ControlClass/#__new","text":"__New ( hwnd ) Constructor. parameters name : hwnd desc : The hwnd of the control. type : hwnd return value desc : A new GridGUI.ControlClass instance. type : GridGUI.ControlClass","title":"__New"},{"location":"Classes/ControlClass/#__parseoptions","text":"__ParseOptions ( options ) Parses option strings for values that are used by the class and updated the instance based on the values. parameters name : options desc : The options that will be parsed, values handled by the lib will be acted on and removed. type : string return value desc : The option string without the parts that the class handles. type : string","title":"__ParseOptions"},{"location":"Classes/ControlClass/#control","text":"Control ( subCommand , value ) A thin function wrapper for Control . parameters name : subCommand desc : The subcommand to set for the control. See link for available subcommands. type : string link : link name : value desc : The value to apply to the subcommand. See link for values used in the subcommands. type : string|number link : link link : link","title":"Control"},{"location":"Classes/ControlClass/#controlclick","text":"ControlClick ( pos := \"\" , WhichButton := LEFT , ClickCount := 1 , Options := \"\" ) A thin function wrapper for ControlClick . parameters name : pos desc : The position to click at in the control, see link for the coordinate format. type : string default : \"\" link : link name : WhichButton desc : Which mouse button to click, see link for supported values. type : string default : LEFT link : link name : ClickCount desc : The number of click to perform. type : number default : 1 name : Options desc : A option string to change how the click are performed, see link for supported options. type : string default : \"\" link : link link : link","title":"ControlClick"},{"location":"Classes/ControlClass/#controlfocus","text":"ControlFocus () A thin function wrapper for ControlFocus . link : link","title":"ControlFocus"},{"location":"Classes/ControlClass/#controlget","text":"ControlGet ( subCommand := \"\" , value := \"\" ) A thin function wrapper for ControlGet . parameters name : subCommand desc : The subcommand to retrieve from the control. See link for available subcommands. type : string default : \"\" link : link name : value desc : Used to specify what to retrieve when the subcommand is not specific enough. type : string default : \"\" link : link return value desc : The retrieved value. type : any link : link","title":"ControlGet"},{"location":"Classes/ControlClass/#controlgetpos","text":"ControlGetPos () A thin function wrapper for ControlGetPos , except that it returns a GridGUI.Position instance. return value desc : The position and size of the control. type : GridGUI.Position link : link","title":"ControlGetPos"},{"location":"Classes/ControlClass/#controlgettext","text":"ControlGetText () A thin function wrapper for ControlGetText . return value desc : The text of the control. type : string link : link","title":"ControlGetText"},{"location":"Classes/ControlClass/#controlmove","text":"ControlMove ( pos ) A thin function wrapper for ControlMove , except that it takes a GridGUI.Position instance as argument. parameters name : pos desc : The position and size that the control should be moved and resized to. type : GridGUI.Position link : link","title":"ControlMove"},{"location":"Classes/ControlClass/#controlsend","text":"ControlSend ( keys ) A thin function wrapper for ControlSend . parameters name : keys desc : The sequence of keys to send, use {keyname} for non printable keys. type : string link : link link : link","title":"ControlSend"},{"location":"Classes/ControlClass/#controlsettext","text":"ControlSetText ( NewText ) A thin function wrapper for ControlSetText . parameters name : NewText desc : The text to set the text of the control to. type : string link : link link : link","title":"ControlSetText"},{"location":"Classes/ControlClass/#options","text":"Options ( options ) Applies styles to the control using Control, Style . parameters name : options desc : The style number string to apply. See link for available styles. type : string link : link link : link","title":"Options"},{"location":"Classes/ControlClass/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this GridGUI.ControlClass . type : string","title":"ToStr"},{"location":"Classes/ExpanderArbitrator/","text":"ExpanderArbitrator Members ConflictLst desc : Two collections of which expanding GridGUI.Cell s needs to share the available GUI size with a specific expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally expanding GridGUI.Cell s o in another column will be stored under [\"W\"][c][i] where i is the index of o and similar for the vertically expanding cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object] ConflictMap desc : Two collections of which expanding GridGUI.Cell s needs to share the available GUI size with a specific expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally expanding GridGUI.Cell s o in another column will be stored under [\"W\"][c][o] and similar for the vertically expanding cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object] Expanders desc : Array of all expanding GridGUI.Cell s in the grid. type : array default : [] meta : [object] Ignore desc : Two collections of which expanding GridGUI.Cell s are similar to cells that have already been accounted for in relation to a specific cell. type : associative array default : {\"W\": {}, \"H\": {}} meta : [object] IsReduced desc : Whether or not GridGUI.ExpanderArbitrator.ConflictMap has been reduced yet. If true then the entries in GridGUI.ExpanderArbitrator.ReducedConflict will be populated with a sub set of the entries in GridGUI.ExpanderArbitrator.ConflictMap . type : bool default : false Overlapping desc : Two collections of which expanding GridGUI.Cell s overlap a given expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally overlapping GridGUI.Cell s o will be stored under [\"W\"][c][o] and similar for the vertically overlapping cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object] ReducedConflict desc : Two collections of only the expanding GridGUI.Cell s in GridGUI.ExpanderArbitrator.ConflictMap that can't be ignored in relation to an expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally expanding GridGUI.Cell s o in another column will be stored under [\"W\"][c][o] and similar for the vertically expanding cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object] Methods __New __New () Constructor. return value desc : A new GridGUI.ExpanderArbitrator instance. type : GridGUI.ExpanderArbitrator Add Add ( c ) Adds a GridGUI.Cell to the GridGUI.ExpanderArbitrator members if the cell expands, that is if either GridGUI.Cell.exW or GridGUI.Cell.exH are non zero. parameters name : c desc : The GridGUI.Cell to add to the GridGUI.ExpanderArbitrator . type : GridGUI.Cell CheckConflicts CheckConflicts ( c , expander ) Checks if the an expanding GridGUI.Cell is in conflict with one another expanding cell and updates GridGUI.ExpanderArbitrator.ConflictLst and GridGUI.ExpanderArbitrator.ConflictMap if they are. This function is intended for checking new expanding cells against already managed expanding cells. parameters name : c desc : The expanding GridGUI.Cell to check for a conflict. type : GridGUI.Cell name : expander desc : The expanding GridGUI.Cell to check for a conflict against. type : GridGUI.Cell CheckOverlapping CheckOverlapping ( c , expander ) Checks if the an expanding GridGUI.Cell overlaps another expanding cell and updates GridGUI.ExpanderArbitrator.Overlapping if they are. This function is intended for checking new expanding cells against already managed expanding cells. parameters name : c desc : The expanding GridGUI.Cell to check if it overlaps expander . type : GridGUI.Cell name : expander desc : The expanding GridGUI.Cell to check if it overlaps c . type : GridGUI.Cell Init Init ( c ) Adds a expanding GridGUI.Cell to the members of this GridGUI.ExpanderArbitrator so that they can be populated with data later. parameters name : c desc : The expanding GridGUI.Cell to add to the GridGUI.ExpanderArbitrator members. type : GridGUI.Cell InitCheck InitCheck ( c ) Runs GridGUI.ExpanderArbitrator.CheckConflicts and GridGUI.ExpanderArbitrator.CheckOverlapping for an expanding GridGUI.Cell against each cell in GridGUI.ExpanderArbitrator.Expanders parameters name : c desc : The expanding GridGUI.Cell to check against the already managed expanding cells. type : GridGUI.Cell IsExpander IsExpander ( c ) Check if a GridGUI.Cell expands. parameters name : c desc : The GridGUI.Cell to check. type : GridGUI.Cell return value desc : Returns true if either GridGUI.Cell.exW or GridGUI.Cell.exH of c are non zero otherwise false is returned. type : bool IsInHeightConflictWith IsInHeightConflictWith ( c1 , c2 ) Checks if two GridGUI.Cell s are in vertical expanding conflict with each other. parameters name : c1 desc : A GridGUI.Cell to compare with c2 . type : GridGUI.Cell name : c2 desc : A GridGUI.Cell to compare with c1 . type : GridGUI.Cell return value desc : Returns true if both c1 and c2 have non zero GridGUI.Cell.exH and their GridGUI.Cell.gridpos does not overlap along the y-axis. Otherwise false is returned. type : bool IsInWidthConflictWith IsInWidthConflictWith ( c1 , c2 ) Checks if two GridGUI.Cell s are in horizontal expanding conflict with each other. parameters name : c1 desc : A GridGUI.Cell to compare with c2 . type : GridGUI.Cell name : c2 desc : A GridGUI.Cell to compare with c1 . type : GridGUI.Cell return value desc : Returns true if both c1 and c2 have non zero GridGUI.Cell.exW and their GridGUI.Cell.gridpos does not overlap along the x-axis. Otherwise false is returned. type : bool ReCalculate ReCalculate () Checks if the expanding GridGUI.ExpanderArbitrator.ReducedConflict has already been calculated, if not then it calculates it and updates the managed GridGUI.Cell s. Reduce Reduce () Checks the GridGUI.ExpanderArbitrator.ConflictMap for expanders that can be ignored in certain cased and populates GridGUI.ExpanderArbitrator.ReducedConflict with the reduced conflict data. Remove Remove ( c ) Removes a GridGUI.Cell from the GridGUI.ExpanderArbitrator members. parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.ExpanderArbitrator . type : GridGUI.Cell SortConflicts SortConflicts () Sorts the GridGUI.ExpanderArbitrator.ConflictLst by the grid size of the GridGUI.Cell s, that is by how many column and rows the cell spans over. UnInit UnInit ( c ) Undoes what GridGUI.ExpanderArbitrator.Init does, that is it Deletes all the objects that are indexed in the GridGUI.ExpanderArbitrator members under a GridGUI.Cell . parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.ExpanderArbitrator members. type : GridGUI.Cell UnInitCheck UnInitCheck ( c ) Undoes what GridGUI.ExpanderArbitrator.InitCheck does, that is it removes the GridGUI.Cell from the other cells managed by this GridGUI.ExpanderArbitrator . parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.ExpanderArbitrator members indexed under other cells. type : GridGUI.Cell Update Update ( c ) Updates the GridGUI.Cell.othersW and GridGUI.Cell.othersH members of a GridGUI.Cell that is managed by this GridGUI.ExpanderArbitrator . parameters name : c desc : The GridGUI.Cell to update. type : GridGUI.Cell","title":"ExpanderArbitrator"},{"location":"Classes/ExpanderArbitrator/#expanderarbitrator","text":"","title":"ExpanderArbitrator"},{"location":"Classes/ExpanderArbitrator/#members","text":"","title":"Members"},{"location":"Classes/ExpanderArbitrator/#conflictlst","text":"desc : Two collections of which expanding GridGUI.Cell s needs to share the available GUI size with a specific expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally expanding GridGUI.Cell s o in another column will be stored under [\"W\"][c][i] where i is the index of o and similar for the vertically expanding cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object]","title":"ConflictLst"},{"location":"Classes/ExpanderArbitrator/#conflictmap","text":"desc : Two collections of which expanding GridGUI.Cell s needs to share the available GUI size with a specific expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally expanding GridGUI.Cell s o in another column will be stored under [\"W\"][c][o] and similar for the vertically expanding cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object]","title":"ConflictMap"},{"location":"Classes/ExpanderArbitrator/#expanders","text":"desc : Array of all expanding GridGUI.Cell s in the grid. type : array default : [] meta : [object]","title":"Expanders"},{"location":"Classes/ExpanderArbitrator/#ignore","text":"desc : Two collections of which expanding GridGUI.Cell s are similar to cells that have already been accounted for in relation to a specific cell. type : associative array default : {\"W\": {}, \"H\": {}} meta : [object]","title":"Ignore"},{"location":"Classes/ExpanderArbitrator/#isreduced","text":"desc : Whether or not GridGUI.ExpanderArbitrator.ConflictMap has been reduced yet. If true then the entries in GridGUI.ExpanderArbitrator.ReducedConflict will be populated with a sub set of the entries in GridGUI.ExpanderArbitrator.ConflictMap . type : bool default : false","title":"IsReduced"},{"location":"Classes/ExpanderArbitrator/#overlapping","text":"desc : Two collections of which expanding GridGUI.Cell s overlap a given expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally overlapping GridGUI.Cell s o will be stored under [\"W\"][c][o] and similar for the vertically overlapping cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object]","title":"Overlapping"},{"location":"Classes/ExpanderArbitrator/#reducedconflict","text":"desc : Two collections of only the expanding GridGUI.Cell s in GridGUI.ExpanderArbitrator.ConflictMap that can't be ignored in relation to an expanding GridGUI.Cell . That is for an expanding GridGUI.Cell c the horizontally expanding GridGUI.Cell s o in another column will be stored under [\"W\"][c][o] and similar for the vertically expanding cells they are stored under \"H\" . type : associative array default : {\"W\": {}, \"H\": {}} meta : [object]","title":"ReducedConflict"},{"location":"Classes/ExpanderArbitrator/#methods","text":"","title":"Methods"},{"location":"Classes/ExpanderArbitrator/#__new","text":"__New () Constructor. return value desc : A new GridGUI.ExpanderArbitrator instance. type : GridGUI.ExpanderArbitrator","title":"__New"},{"location":"Classes/ExpanderArbitrator/#add","text":"Add ( c ) Adds a GridGUI.Cell to the GridGUI.ExpanderArbitrator members if the cell expands, that is if either GridGUI.Cell.exW or GridGUI.Cell.exH are non zero. parameters name : c desc : The GridGUI.Cell to add to the GridGUI.ExpanderArbitrator . type : GridGUI.Cell","title":"Add"},{"location":"Classes/ExpanderArbitrator/#checkconflicts","text":"CheckConflicts ( c , expander ) Checks if the an expanding GridGUI.Cell is in conflict with one another expanding cell and updates GridGUI.ExpanderArbitrator.ConflictLst and GridGUI.ExpanderArbitrator.ConflictMap if they are. This function is intended for checking new expanding cells against already managed expanding cells. parameters name : c desc : The expanding GridGUI.Cell to check for a conflict. type : GridGUI.Cell name : expander desc : The expanding GridGUI.Cell to check for a conflict against. type : GridGUI.Cell","title":"CheckConflicts"},{"location":"Classes/ExpanderArbitrator/#checkoverlapping","text":"CheckOverlapping ( c , expander ) Checks if the an expanding GridGUI.Cell overlaps another expanding cell and updates GridGUI.ExpanderArbitrator.Overlapping if they are. This function is intended for checking new expanding cells against already managed expanding cells. parameters name : c desc : The expanding GridGUI.Cell to check if it overlaps expander . type : GridGUI.Cell name : expander desc : The expanding GridGUI.Cell to check if it overlaps c . type : GridGUI.Cell","title":"CheckOverlapping"},{"location":"Classes/ExpanderArbitrator/#init","text":"Init ( c ) Adds a expanding GridGUI.Cell to the members of this GridGUI.ExpanderArbitrator so that they can be populated with data later. parameters name : c desc : The expanding GridGUI.Cell to add to the GridGUI.ExpanderArbitrator members. type : GridGUI.Cell","title":"Init"},{"location":"Classes/ExpanderArbitrator/#initcheck","text":"InitCheck ( c ) Runs GridGUI.ExpanderArbitrator.CheckConflicts and GridGUI.ExpanderArbitrator.CheckOverlapping for an expanding GridGUI.Cell against each cell in GridGUI.ExpanderArbitrator.Expanders parameters name : c desc : The expanding GridGUI.Cell to check against the already managed expanding cells. type : GridGUI.Cell","title":"InitCheck"},{"location":"Classes/ExpanderArbitrator/#isexpander","text":"IsExpander ( c ) Check if a GridGUI.Cell expands. parameters name : c desc : The GridGUI.Cell to check. type : GridGUI.Cell return value desc : Returns true if either GridGUI.Cell.exW or GridGUI.Cell.exH of c are non zero otherwise false is returned. type : bool","title":"IsExpander"},{"location":"Classes/ExpanderArbitrator/#isinheightconflictwith","text":"IsInHeightConflictWith ( c1 , c2 ) Checks if two GridGUI.Cell s are in vertical expanding conflict with each other. parameters name : c1 desc : A GridGUI.Cell to compare with c2 . type : GridGUI.Cell name : c2 desc : A GridGUI.Cell to compare with c1 . type : GridGUI.Cell return value desc : Returns true if both c1 and c2 have non zero GridGUI.Cell.exH and their GridGUI.Cell.gridpos does not overlap along the y-axis. Otherwise false is returned. type : bool","title":"IsInHeightConflictWith"},{"location":"Classes/ExpanderArbitrator/#isinwidthconflictwith","text":"IsInWidthConflictWith ( c1 , c2 ) Checks if two GridGUI.Cell s are in horizontal expanding conflict with each other. parameters name : c1 desc : A GridGUI.Cell to compare with c2 . type : GridGUI.Cell name : c2 desc : A GridGUI.Cell to compare with c1 . type : GridGUI.Cell return value desc : Returns true if both c1 and c2 have non zero GridGUI.Cell.exW and their GridGUI.Cell.gridpos does not overlap along the x-axis. Otherwise false is returned. type : bool","title":"IsInWidthConflictWith"},{"location":"Classes/ExpanderArbitrator/#recalculate","text":"ReCalculate () Checks if the expanding GridGUI.ExpanderArbitrator.ReducedConflict has already been calculated, if not then it calculates it and updates the managed GridGUI.Cell s.","title":"ReCalculate"},{"location":"Classes/ExpanderArbitrator/#reduce","text":"Reduce () Checks the GridGUI.ExpanderArbitrator.ConflictMap for expanders that can be ignored in certain cased and populates GridGUI.ExpanderArbitrator.ReducedConflict with the reduced conflict data.","title":"Reduce"},{"location":"Classes/ExpanderArbitrator/#remove","text":"Remove ( c ) Removes a GridGUI.Cell from the GridGUI.ExpanderArbitrator members. parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.ExpanderArbitrator . type : GridGUI.Cell","title":"Remove"},{"location":"Classes/ExpanderArbitrator/#sortconflicts","text":"SortConflicts () Sorts the GridGUI.ExpanderArbitrator.ConflictLst by the grid size of the GridGUI.Cell s, that is by how many column and rows the cell spans over.","title":"SortConflicts"},{"location":"Classes/ExpanderArbitrator/#uninit","text":"UnInit ( c ) Undoes what GridGUI.ExpanderArbitrator.Init does, that is it Deletes all the objects that are indexed in the GridGUI.ExpanderArbitrator members under a GridGUI.Cell . parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.ExpanderArbitrator members. type : GridGUI.Cell","title":"UnInit"},{"location":"Classes/ExpanderArbitrator/#uninitcheck","text":"UnInitCheck ( c ) Undoes what GridGUI.ExpanderArbitrator.InitCheck does, that is it removes the GridGUI.Cell from the other cells managed by this GridGUI.ExpanderArbitrator . parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.ExpanderArbitrator members indexed under other cells. type : GridGUI.Cell","title":"UnInitCheck"},{"location":"Classes/ExpanderArbitrator/#update","text":"Update ( c ) Updates the GridGUI.Cell.othersW and GridGUI.Cell.othersH members of a GridGUI.Cell that is managed by this GridGUI.ExpanderArbitrator . parameters name : c desc : The GridGUI.Cell to update. type : GridGUI.Cell","title":"Update"},{"location":"Classes/GUI/","text":"GUI Members BackgroundCtrls desc : An array of controls that should be lowered below all newly added controls and which have the style WS_CLIPSIBLINGS applied. To register a background control see GridGUI.GUI.RegisterBackground . type : array default : [] meta : [object] link : link DPIScale desc : Whether or not to correct for non standard dpi. type : bool default : true link : link DropTarges desc : An object of hwnds mapping to callbacks that will be call on WM_DROPFILES if the event was on a control with the corresponding hwnd. To register a callback see GridGUI.GUI.RegisterDropTarget . type : object default : {} meta : [object] ForegroundCtrls desc : An array of controls that should be raised above all newly added controls and which are redrawn after other controls have been drawn. To register a foreground control see GridGUI.GUI.RegisterForeground . type : array default : [] meta : [object] GuiActivate desc : The callback that will be called on WM_ACTIVATE . type : Func|BoundFunc|false default : false meta : [object] link : link GuiClose desc : The callback that will be called on WM_SYSCOMMAND if wParam equals SC_CLOSE . type : Func|BoundFunc|false default : false meta : [object] link : link GuiContextMenu desc : The callback that will be called on WM_CONTEXTMENU . type : Func|BoundFunc|false default : false meta : [object] link : link GuiMoved desc : The callback that will be called on WM_MOVE . type : Func|BoundFunc|false default : false meta : [object] link : link GuiMovedDelay desc : The delay to wait before the user defined callback GridGUI.GUI.GuiMoved will be called. A delay of 0 will make the callback be called directly in the OnMessage callback function and a delay above 0 will be triggered using a timer. type : number default : 50 GuiSize desc : The callback that will be called on WM_SIZE . type : Func|BoundFunc|false default : false meta : [object] link : link GuiSizeDelay desc : The delay to wait before the user defined callback GridGUI.GUI.GuiSize will be called. A delay of 0 will make the callback be called directly in the OnMessage callback function and a delay above 0 will be triggered using a timer. type : number default : 50 OnPaintDelay desc : The delay to wait before the callback that redraws the controls in GridGUI.GUI.ForegroundCtrls will be called. A delay of 0 will make the callback be called directly in the OnMessage callback function and a delay above 0 will be triggered using a timer. type : number default : 10 pos desc : The position of this GUI. type : GridGUI.Position default : GridGUI.Position(0, 0) meta : [object] Methods __CheckOptions __CheckOptions ( options ) Parses option strings for values that are used by the class and updated the instance based on the values. parameters name : options desc : An ahk GUI option string. type : string link : link return value desc : The options argument minus anything that class handles, currently only gLabels are removed. type : string __DPIScale __DPIScale ( pos , enlarge := true ) Scale a position by the dpi ratio, that is A_ScreenDPI / 96 . parameters name : pos desc : The GridGUI.Position instance to scale. type : GridGUI.Position name : enlarge desc : Whether to increase or decrease the size of pos . type : bool default : true return value desc : The scaled position. type : GridGUI.Position __GuiActivate __GuiActivate ( wParam , lParam , msg , hwnd ) The internal callback on WM_ACTIVATE that calls the user defined GridGUI.GUI.GuiActivate if it evaluates to true. The callback is called with the low-order word of wParam . parameters name : wParam desc : Low-order word is the active state of the changed window, the high-order word is whether the window was minimised. If the low-order word is 1 the window was activated, if it is 2 the window was activated by a mouse click and if it is 0 the window is deactivated. type : number link : link name : lParam desc : The hwnd of the window where the active state of the window changed. type : number link : link name : msg desc : WM_ACTIVATE (0x0006). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd __GuiContextMenu __GuiContextMenu ( wParam , lParam , msg , hwnd ) The internal callback on WM_CONTEXTMENU that calls the user defined GridGUI.GUI.GuiContextMenu if it evaluates to true. The callback is called with the clicked coordinate as a GridGUI.Position and with the hwnd of the windows that was right-clicked. parameters name : wParam desc : The hwnd of the windows that was right-clicked. type : hwnd link : link name : lParam desc : The clicked coordinate. The low-order word is the x coordinate. The high-order word is the y coordinate. type : number link : link name : msg desc : WM_CONTEXTMENU (0x007B). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd __GuiDropFiles __GuiDropFiles ( hDrop , lParam , msg , hwnd ) The internal callback on WM_DROPFILES that calls the user defined GridGUI.GUI.DropTarges if the callback associated array has the hwnd argument as one of its key. The callback is called with an array of the dropped files. parameters name : hDrop desc : A handle to an internal structure describing the dropped files. type : number link : link name : lParam desc : Always zero. type : number link : link name : msg desc : WM_DROPFILES (0x0233). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd __GuiInit __GuiInit () Initialises all the members of the GUI class. __GuiMoved __GuiMoved ( wParam , lParam , msg , hwnd ) The internal callback on WM_MOVE that calls GridGUI.GUI._GuiMoved with the new location as a GridGUI.Position . parameters name : wParam desc : Unused. type : number link : link name : lParam desc : The coordinate of the top left corner of the window. The low-order word is the x coordinate and the high-order word is the y coordinate. type : number link : link name : msg desc : WM_MOVE (0x0003). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd __GuiSize __GuiSize ( wParam , lParam , msg , hwnd ) The internal callback on WM_SIZE that calls GridGUI.GUI._GuiSize with the new area as a GridGUI.Position where x and y are both zero and with the wParam argument. parameters name : wParam desc : The type of resizing that have occurred. 0 is normal resizing, 1 means that the window was minimised and 2 means that it was maximised. type : number link : link name : lParam desc : The new area of the window. The low-order word is the width and the high-order word is the height. type : number link : link name : msg desc : WM_SIZE (0x0005). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd __LowerBackgoundCtrls __LowerBackgoundCtrls () Lowers the z-order of all registered controls in GridGUI.GUI.BackgroundCtrls . To register controls as background controls see GridGUI.GUI.RegisterBackground . __New __New ( title := \"\" , options := \"\" , hwnd := \"\" ) Constructor. parameters name : title desc : The title of the newly created GUI. type : string default : \"\" name : options desc : The gui option string that the GUI will be created with. type : string default : \"\" link : link name : hwnd desc : If specified then no new GUI will be created and no OnMessage callbacks will be set up. Instead the GridGUI.GUI instance will work like a wrapper for the GUI that can be used to interact with it. type : string default : \"\" return value desc : A new GridGUI.GUI instance. type : GridGUI.GUI __OnAdd __OnAdd () Updates the z-order of registered controls. Called when a control is added to the GUI. __OnPaint __OnPaint ( wParam , lParam , msg , hwnd ) The internal callback on WM_PAINT that calls GridGUI.GUI.__ReDrawForgoundCtrls to fix issues with overlapping controls for controls registered in GridGUI.GUI.ForegroundCtrls . parameters name : wParam desc : Unused. type : number link : link name : lParam desc : Unused. type : number link : link name : msg desc : WM_PAINT (0x000F). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd __RaiseForgoundCtrls __RaiseForgoundCtrls () Raises the z-order of all registered controls in GridGUI.GUI.ForegroundCtrls . To register controls as background controls see GridGUI.GUI.RegisterForeground . __ReDrawForgoundCtrls __ReDrawForgoundCtrls () Redraws the controls registered with GridGUI.GUI.RegisterForeground . Called on WM_PAINT . __SysCommand __SysCommand ( wParam , lParam , msg , hwnd ) The internal callback on WM_SYSCOMMAND that calls the user defined GridGUI.GUI.GuiClose callback on SC_CLOSE if the callback variable evaluates to true. parameters name : wParam desc : The type of system command requested, see link for a list of values. type : number link : link name : lParam desc : The coordinate of the mouse, if this message was triggered by a menu selection, otherwise the argument is unused. The low-order word is the x coordinate and the high-order word is the y coordinate. type : number link : link name : msg desc : WM_SYSCOMMAND (0x0112). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd _GuiMoved _GuiMoved ( pos ) An internal callback used to update the x and y coordinate of GridGUI.GUI.pos and to call the user defined GridGUI.GUI.GuiMoved callback parameters name : pos desc : The new coordinate of the top left corner of the GUI. The width and height are both zero. type : GridGUI.Position _GuiSize _GuiSize ( pos , resizeEvent ) An internal callback used to update the width and height of GridGUI.GUI.pos and to call the user defined GridGUI.GUI.GuiSize callback parameters name : pos desc : The new area of the GUI. The x and y coordinate are both zero. type : GridGUI.Position name : resizeEvent desc : A number indicating whether the GUI was maximised, minimised or neither that is passed on to the user defined GridGUI.GUI.GuiSize callback. See the link for what the numbers mean. type : number link : link Add Add ( controlType , options := \"\" , text := \"\" ) Adds most standard ahk controls to the GUI. parameters name : controlType desc : The type of the control. Can be Text, Edit, UpDown, Picture, Button, Checkbox, DropDownList, ComboBox, ListBox, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox and ActiveX . For Radio, ListView, TreeView, Tab3 and StatusBar see AdditionalControls type : string name : options desc : The options that the GuiControl will be created with. Does not accept vVars. Can be an object with keys the same names as the optional arguments that this method takes. type : string default : \"\" link : link name : text desc : The text that the control will be created with. type : string default : \"\" return value desc : The added control instance. type : GridGUI.ArbitraryControl Color Color ( WindowColor := \"\" , ControlColor := \"\" ) A thin method wrapper for Gui, Color . parameters name : WindowColor desc : The colour of the background of the GUI. See link for the supported format. type : string default : \"\" link : link name : ControlColor desc : The colour of the background of controls that are added to the GUI in the future. See link for the supported format. type : string default : \"\" link : link link : link ControlGetFocus ControlGetFocus () Retrives the hwnd of the control with input focus. return value desc : The hwnd of the focused control. type : hwnd Default Default () A thin method wrapper for Gui, Default . link : link Destroy Destroy () A thin method wrapper for Gui, Destroy . link : link Flash Flash ( Off := false ) A thin method wrapper for Gui, Flash , except that it used a bool instead of a string to indicate that the colour should be restored. parameters name : Off desc : If false the GUI flashes. If true the colour of the GUI is restored. type : bool default : false link : link Font Font ( Options , FontName ) A thin method wrapper for Gui, Font parameters name : Options desc : Styling option string, see link for detail of what options are available. type : string link : link name : FontName desc : The name of the font to apply. type : string link : link link : link Hide Hide () A thin method wrapper for Gui, Hide link : link ListView ListView ( hwnd ) Changes the default ListView to the specified hwnd. See the link for what changing the default ListView does. parameters name : hwnd desc : The hwnd of the ListView to set as the default. type : hwnd return value desc : The hwnd of the ListView that was previously the default. type : hwnd link : link Margin Margin ( x := \"\" , y := \"\" ) A thin method wrapper for Gui, Margin parameters name : x desc : The horizontal margin of controls that are added to the GUI. type : string default : \"\" name : y desc : The vertical margin of controls that are added to the GUI. type : string default : \"\" link : link Maximize Maximize () A thin method wrapper for Gui, Maximize link : link Menu Menu ( MenuName := \"\" ) A thin method wrapper for Gui, Menu parameters name : MenuName desc : The name of the menu to attach to the GUI menu bar. Menues are made using the Menu command, see link for details. type : string default : \"\" link : link link : link Minimize Minimize () A thin method wrapper for Gui, Minimize link : link MinSize MinSize ( x := \"\" , y := \"\" ) Sets the minsize of the GUI, that is the size that the GUI can't be reduced beyond by drag resizing. parameters name : x desc : The minimal width of the GUI. If \"\" the min width is left unchanged. type : string default : \"\" name : y desc : The minimal height of the GUI. If \"\" the min height is left unchanged. type : string default : \"\" Options Options ( options ) Applies styles and options to the GUI. parameters name : options desc : The ahk GUI style and option string to apply to the GUI. See link for supported styles and options. type : string link : link link : link RegisterBackground RegisterBackground ( ctrl ) Registers a control as a background control, that is their z-order is lowered below any current and future controls. parameters name : ctrl desc : The GridGUI.GuiControlClass instance that will be registered. type : GridGUI.GuiControlClass RegisterDropTarget RegisterDropTarget ( ctrl , Callback ) Registers a control as a file drag and drop target. Any registered control will have its callback called whenever files are dropped on the control. parameters name : ctrl desc : The GridGUI.ControlClass instance that will be registered. type : GridGUI.ControlClass name : Callback desc : The callback to call when files are dropped on the control. type : Func|BoundFunc RegisterForeground RegisterForeground ( ctrl ) Registers a control to be redrawn after all other controls as well as their z-order is raised above any current and future controls. parameters name : ctrl desc : The GridGUI.GuiControlClass instance that will be registered. type : GridGUI.GuiControlClass Restore Restore () A thin method wrapper for Gui, Restore link : link Show Show ( options := AutoSize ) A thin method wrapper for Gui, Show parameters name : options desc : The options string describing how to show the GUI. See link for available options. type : string default : AutoSize link : link link : link Submit Submit ( NoHide := false ) A thin method wrapper for Gui, Submit parameters name : NoHide desc : Whether or not to hide the GUI after submitting it. type : bool default : false link : link TreeView TreeView ( hwnd ) Changes the default TreeView to the specified hwnd. See the link for what changing the default TreeView does. parameters name : hwnd desc : The hwnd of the TreeView to set as the default. type : hwnd return value desc : The hwnd of the TreeView that was previously the default. type : hwnd link : link","title":"GUI"},{"location":"Classes/GUI/#gui","text":"","title":"GUI"},{"location":"Classes/GUI/#members","text":"","title":"Members"},{"location":"Classes/GUI/#backgroundctrls","text":"desc : An array of controls that should be lowered below all newly added controls and which have the style WS_CLIPSIBLINGS applied. To register a background control see GridGUI.GUI.RegisterBackground . type : array default : [] meta : [object] link : link","title":"BackgroundCtrls"},{"location":"Classes/GUI/#dpiscale","text":"desc : Whether or not to correct for non standard dpi. type : bool default : true link : link","title":"DPIScale"},{"location":"Classes/GUI/#droptarges","text":"desc : An object of hwnds mapping to callbacks that will be call on WM_DROPFILES if the event was on a control with the corresponding hwnd. To register a callback see GridGUI.GUI.RegisterDropTarget . type : object default : {} meta : [object]","title":"DropTarges"},{"location":"Classes/GUI/#foregroundctrls","text":"desc : An array of controls that should be raised above all newly added controls and which are redrawn after other controls have been drawn. To register a foreground control see GridGUI.GUI.RegisterForeground . type : array default : [] meta : [object]","title":"ForegroundCtrls"},{"location":"Classes/GUI/#guiactivate","text":"desc : The callback that will be called on WM_ACTIVATE . type : Func|BoundFunc|false default : false meta : [object] link : link","title":"GuiActivate"},{"location":"Classes/GUI/#guiclose","text":"desc : The callback that will be called on WM_SYSCOMMAND if wParam equals SC_CLOSE . type : Func|BoundFunc|false default : false meta : [object] link : link","title":"GuiClose"},{"location":"Classes/GUI/#guicontextmenu","text":"desc : The callback that will be called on WM_CONTEXTMENU . type : Func|BoundFunc|false default : false meta : [object] link : link","title":"GuiContextMenu"},{"location":"Classes/GUI/#guimoved","text":"desc : The callback that will be called on WM_MOVE . type : Func|BoundFunc|false default : false meta : [object] link : link","title":"GuiMoved"},{"location":"Classes/GUI/#guimoveddelay","text":"desc : The delay to wait before the user defined callback GridGUI.GUI.GuiMoved will be called. A delay of 0 will make the callback be called directly in the OnMessage callback function and a delay above 0 will be triggered using a timer. type : number default : 50","title":"GuiMovedDelay"},{"location":"Classes/GUI/#guisize","text":"desc : The callback that will be called on WM_SIZE . type : Func|BoundFunc|false default : false meta : [object] link : link","title":"GuiSize"},{"location":"Classes/GUI/#guisizedelay","text":"desc : The delay to wait before the user defined callback GridGUI.GUI.GuiSize will be called. A delay of 0 will make the callback be called directly in the OnMessage callback function and a delay above 0 will be triggered using a timer. type : number default : 50","title":"GuiSizeDelay"},{"location":"Classes/GUI/#onpaintdelay","text":"desc : The delay to wait before the callback that redraws the controls in GridGUI.GUI.ForegroundCtrls will be called. A delay of 0 will make the callback be called directly in the OnMessage callback function and a delay above 0 will be triggered using a timer. type : number default : 10","title":"OnPaintDelay"},{"location":"Classes/GUI/#pos","text":"desc : The position of this GUI. type : GridGUI.Position default : GridGUI.Position(0, 0) meta : [object]","title":"pos"},{"location":"Classes/GUI/#methods","text":"","title":"Methods"},{"location":"Classes/GUI/#__checkoptions","text":"__CheckOptions ( options ) Parses option strings for values that are used by the class and updated the instance based on the values. parameters name : options desc : An ahk GUI option string. type : string link : link return value desc : The options argument minus anything that class handles, currently only gLabels are removed. type : string","title":"__CheckOptions"},{"location":"Classes/GUI/#__dpiscale","text":"__DPIScale ( pos , enlarge := true ) Scale a position by the dpi ratio, that is A_ScreenDPI / 96 . parameters name : pos desc : The GridGUI.Position instance to scale. type : GridGUI.Position name : enlarge desc : Whether to increase or decrease the size of pos . type : bool default : true return value desc : The scaled position. type : GridGUI.Position","title":"__DPIScale"},{"location":"Classes/GUI/#__guiactivate","text":"__GuiActivate ( wParam , lParam , msg , hwnd ) The internal callback on WM_ACTIVATE that calls the user defined GridGUI.GUI.GuiActivate if it evaluates to true. The callback is called with the low-order word of wParam . parameters name : wParam desc : Low-order word is the active state of the changed window, the high-order word is whether the window was minimised. If the low-order word is 1 the window was activated, if it is 2 the window was activated by a mouse click and if it is 0 the window is deactivated. type : number link : link name : lParam desc : The hwnd of the window where the active state of the window changed. type : number link : link name : msg desc : WM_ACTIVATE (0x0006). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__GuiActivate"},{"location":"Classes/GUI/#__guicontextmenu","text":"__GuiContextMenu ( wParam , lParam , msg , hwnd ) The internal callback on WM_CONTEXTMENU that calls the user defined GridGUI.GUI.GuiContextMenu if it evaluates to true. The callback is called with the clicked coordinate as a GridGUI.Position and with the hwnd of the windows that was right-clicked. parameters name : wParam desc : The hwnd of the windows that was right-clicked. type : hwnd link : link name : lParam desc : The clicked coordinate. The low-order word is the x coordinate. The high-order word is the y coordinate. type : number link : link name : msg desc : WM_CONTEXTMENU (0x007B). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__GuiContextMenu"},{"location":"Classes/GUI/#__guidropfiles","text":"__GuiDropFiles ( hDrop , lParam , msg , hwnd ) The internal callback on WM_DROPFILES that calls the user defined GridGUI.GUI.DropTarges if the callback associated array has the hwnd argument as one of its key. The callback is called with an array of the dropped files. parameters name : hDrop desc : A handle to an internal structure describing the dropped files. type : number link : link name : lParam desc : Always zero. type : number link : link name : msg desc : WM_DROPFILES (0x0233). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__GuiDropFiles"},{"location":"Classes/GUI/#__guiinit","text":"__GuiInit () Initialises all the members of the GUI class.","title":"__GuiInit"},{"location":"Classes/GUI/#__guimoved","text":"__GuiMoved ( wParam , lParam , msg , hwnd ) The internal callback on WM_MOVE that calls GridGUI.GUI._GuiMoved with the new location as a GridGUI.Position . parameters name : wParam desc : Unused. type : number link : link name : lParam desc : The coordinate of the top left corner of the window. The low-order word is the x coordinate and the high-order word is the y coordinate. type : number link : link name : msg desc : WM_MOVE (0x0003). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__GuiMoved"},{"location":"Classes/GUI/#__guisize","text":"__GuiSize ( wParam , lParam , msg , hwnd ) The internal callback on WM_SIZE that calls GridGUI.GUI._GuiSize with the new area as a GridGUI.Position where x and y are both zero and with the wParam argument. parameters name : wParam desc : The type of resizing that have occurred. 0 is normal resizing, 1 means that the window was minimised and 2 means that it was maximised. type : number link : link name : lParam desc : The new area of the window. The low-order word is the width and the high-order word is the height. type : number link : link name : msg desc : WM_SIZE (0x0005). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__GuiSize"},{"location":"Classes/GUI/#__lowerbackgoundctrls","text":"__LowerBackgoundCtrls () Lowers the z-order of all registered controls in GridGUI.GUI.BackgroundCtrls . To register controls as background controls see GridGUI.GUI.RegisterBackground .","title":"__LowerBackgoundCtrls"},{"location":"Classes/GUI/#__new","text":"__New ( title := \"\" , options := \"\" , hwnd := \"\" ) Constructor. parameters name : title desc : The title of the newly created GUI. type : string default : \"\" name : options desc : The gui option string that the GUI will be created with. type : string default : \"\" link : link name : hwnd desc : If specified then no new GUI will be created and no OnMessage callbacks will be set up. Instead the GridGUI.GUI instance will work like a wrapper for the GUI that can be used to interact with it. type : string default : \"\" return value desc : A new GridGUI.GUI instance. type : GridGUI.GUI","title":"__New"},{"location":"Classes/GUI/#__onadd","text":"__OnAdd () Updates the z-order of registered controls. Called when a control is added to the GUI.","title":"__OnAdd"},{"location":"Classes/GUI/#__onpaint","text":"__OnPaint ( wParam , lParam , msg , hwnd ) The internal callback on WM_PAINT that calls GridGUI.GUI.__ReDrawForgoundCtrls to fix issues with overlapping controls for controls registered in GridGUI.GUI.ForegroundCtrls . parameters name : wParam desc : Unused. type : number link : link name : lParam desc : Unused. type : number link : link name : msg desc : WM_PAINT (0x000F). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__OnPaint"},{"location":"Classes/GUI/#__raiseforgoundctrls","text":"__RaiseForgoundCtrls () Raises the z-order of all registered controls in GridGUI.GUI.ForegroundCtrls . To register controls as background controls see GridGUI.GUI.RegisterForeground .","title":"__RaiseForgoundCtrls"},{"location":"Classes/GUI/#__redrawforgoundctrls","text":"__ReDrawForgoundCtrls () Redraws the controls registered with GridGUI.GUI.RegisterForeground . Called on WM_PAINT .","title":"__ReDrawForgoundCtrls"},{"location":"Classes/GUI/#__syscommand","text":"__SysCommand ( wParam , lParam , msg , hwnd ) The internal callback on WM_SYSCOMMAND that calls the user defined GridGUI.GUI.GuiClose callback on SC_CLOSE if the callback variable evaluates to true. parameters name : wParam desc : The type of system command requested, see link for a list of values. type : number link : link name : lParam desc : The coordinate of the mouse, if this message was triggered by a menu selection, otherwise the argument is unused. The low-order word is the x coordinate and the high-order word is the y coordinate. type : number link : link name : msg desc : WM_SYSCOMMAND (0x0112). type : number name : hwnd desc : The hwnd of the window or control that recieved the message. type : hwnd","title":"__SysCommand"},{"location":"Classes/GUI/#_guimoved","text":"_GuiMoved ( pos ) An internal callback used to update the x and y coordinate of GridGUI.GUI.pos and to call the user defined GridGUI.GUI.GuiMoved callback parameters name : pos desc : The new coordinate of the top left corner of the GUI. The width and height are both zero. type : GridGUI.Position","title":"_GuiMoved"},{"location":"Classes/GUI/#_guisize","text":"_GuiSize ( pos , resizeEvent ) An internal callback used to update the width and height of GridGUI.GUI.pos and to call the user defined GridGUI.GUI.GuiSize callback parameters name : pos desc : The new area of the GUI. The x and y coordinate are both zero. type : GridGUI.Position name : resizeEvent desc : A number indicating whether the GUI was maximised, minimised or neither that is passed on to the user defined GridGUI.GUI.GuiSize callback. See the link for what the numbers mean. type : number link : link","title":"_GuiSize"},{"location":"Classes/GUI/#add","text":"Add ( controlType , options := \"\" , text := \"\" ) Adds most standard ahk controls to the GUI. parameters name : controlType desc : The type of the control. Can be Text, Edit, UpDown, Picture, Button, Checkbox, DropDownList, ComboBox, ListBox, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox and ActiveX . For Radio, ListView, TreeView, Tab3 and StatusBar see AdditionalControls type : string name : options desc : The options that the GuiControl will be created with. Does not accept vVars. Can be an object with keys the same names as the optional arguments that this method takes. type : string default : \"\" link : link name : text desc : The text that the control will be created with. type : string default : \"\" return value desc : The added control instance. type : GridGUI.ArbitraryControl","title":"Add"},{"location":"Classes/GUI/#color","text":"Color ( WindowColor := \"\" , ControlColor := \"\" ) A thin method wrapper for Gui, Color . parameters name : WindowColor desc : The colour of the background of the GUI. See link for the supported format. type : string default : \"\" link : link name : ControlColor desc : The colour of the background of controls that are added to the GUI in the future. See link for the supported format. type : string default : \"\" link : link link : link","title":"Color"},{"location":"Classes/GUI/#controlgetfocus","text":"ControlGetFocus () Retrives the hwnd of the control with input focus. return value desc : The hwnd of the focused control. type : hwnd","title":"ControlGetFocus"},{"location":"Classes/GUI/#default","text":"Default () A thin method wrapper for Gui, Default . link : link","title":"Default"},{"location":"Classes/GUI/#destroy","text":"Destroy () A thin method wrapper for Gui, Destroy . link : link","title":"Destroy"},{"location":"Classes/GUI/#flash","text":"Flash ( Off := false ) A thin method wrapper for Gui, Flash , except that it used a bool instead of a string to indicate that the colour should be restored. parameters name : Off desc : If false the GUI flashes. If true the colour of the GUI is restored. type : bool default : false link : link","title":"Flash"},{"location":"Classes/GUI/#font","text":"Font ( Options , FontName ) A thin method wrapper for Gui, Font parameters name : Options desc : Styling option string, see link for detail of what options are available. type : string link : link name : FontName desc : The name of the font to apply. type : string link : link link : link","title":"Font"},{"location":"Classes/GUI/#hide","text":"Hide () A thin method wrapper for Gui, Hide link : link","title":"Hide"},{"location":"Classes/GUI/#listview","text":"ListView ( hwnd ) Changes the default ListView to the specified hwnd. See the link for what changing the default ListView does. parameters name : hwnd desc : The hwnd of the ListView to set as the default. type : hwnd return value desc : The hwnd of the ListView that was previously the default. type : hwnd link : link","title":"ListView"},{"location":"Classes/GUI/#margin","text":"Margin ( x := \"\" , y := \"\" ) A thin method wrapper for Gui, Margin parameters name : x desc : The horizontal margin of controls that are added to the GUI. type : string default : \"\" name : y desc : The vertical margin of controls that are added to the GUI. type : string default : \"\" link : link","title":"Margin"},{"location":"Classes/GUI/#maximize","text":"Maximize () A thin method wrapper for Gui, Maximize link : link","title":"Maximize"},{"location":"Classes/GUI/#menu","text":"Menu ( MenuName := \"\" ) A thin method wrapper for Gui, Menu parameters name : MenuName desc : The name of the menu to attach to the GUI menu bar. Menues are made using the Menu command, see link for details. type : string default : \"\" link : link link : link","title":"Menu"},{"location":"Classes/GUI/#minimize","text":"Minimize () A thin method wrapper for Gui, Minimize link : link","title":"Minimize"},{"location":"Classes/GUI/#minsize","text":"MinSize ( x := \"\" , y := \"\" ) Sets the minsize of the GUI, that is the size that the GUI can't be reduced beyond by drag resizing. parameters name : x desc : The minimal width of the GUI. If \"\" the min width is left unchanged. type : string default : \"\" name : y desc : The minimal height of the GUI. If \"\" the min height is left unchanged. type : string default : \"\"","title":"MinSize"},{"location":"Classes/GUI/#options","text":"Options ( options ) Applies styles and options to the GUI. parameters name : options desc : The ahk GUI style and option string to apply to the GUI. See link for supported styles and options. type : string link : link link : link","title":"Options"},{"location":"Classes/GUI/#registerbackground","text":"RegisterBackground ( ctrl ) Registers a control as a background control, that is their z-order is lowered below any current and future controls. parameters name : ctrl desc : The GridGUI.GuiControlClass instance that will be registered. type : GridGUI.GuiControlClass","title":"RegisterBackground"},{"location":"Classes/GUI/#registerdroptarget","text":"RegisterDropTarget ( ctrl , Callback ) Registers a control as a file drag and drop target. Any registered control will have its callback called whenever files are dropped on the control. parameters name : ctrl desc : The GridGUI.ControlClass instance that will be registered. type : GridGUI.ControlClass name : Callback desc : The callback to call when files are dropped on the control. type : Func|BoundFunc","title":"RegisterDropTarget"},{"location":"Classes/GUI/#registerforeground","text":"RegisterForeground ( ctrl ) Registers a control to be redrawn after all other controls as well as their z-order is raised above any current and future controls. parameters name : ctrl desc : The GridGUI.GuiControlClass instance that will be registered. type : GridGUI.GuiControlClass","title":"RegisterForeground"},{"location":"Classes/GUI/#restore","text":"Restore () A thin method wrapper for Gui, Restore link : link","title":"Restore"},{"location":"Classes/GUI/#show","text":"Show ( options := AutoSize ) A thin method wrapper for Gui, Show parameters name : options desc : The options string describing how to show the GUI. See link for available options. type : string default : AutoSize link : link link : link","title":"Show"},{"location":"Classes/GUI/#submit","text":"Submit ( NoHide := false ) A thin method wrapper for Gui, Submit parameters name : NoHide desc : Whether or not to hide the GUI after submitting it. type : bool default : false link : link","title":"Submit"},{"location":"Classes/GUI/#treeview","text":"TreeView ( hwnd ) Changes the default TreeView to the specified hwnd. See the link for what changing the default TreeView does. parameters name : hwnd desc : The hwnd of the TreeView to set as the default. type : hwnd return value desc : The hwnd of the TreeView that was previously the default. type : hwnd link : link","title":"TreeView"},{"location":"Classes/GdiControl/","text":"GdiControl Members G desc : A pointer to the graphics object that is associated with the drawing buffer ( GridGUI.GdiControl.hbm ). Updated each timer the control is drawn with a new size. type : GpGraphics* meta : [pointer] link : link graphic desc : Callback that is called each time the underlying control is drawn, but before the GridGUI.GdiControl.hbm has been drawn on the underlying control. Bind the instance of GridGUI.GdiControl to the callback and draw what you want the GridGUI.GdiControl to show using the GridGUI.GdiControl.G . type : Func|BoundFunc|false default : false meta : [object] hbm desc : A handle to bitmap with the same size as the underlying control. Updated each timer the control is drawn with a new size. type : HBITMAP meta : [pointer] link : link hdc desc : The device context allowing drawing on the GridGUI.GdiControl.hbm by means of GridGUI.GdiControl.G . type : HDC meta : [pointer] pos desc : The last position that this control was drawn at. type : GridGUI.Position default : new GridGUI.Position(0, 0) meta : [object] Methods __CleanUp __CleanUp () Deletes or releases the GDI objects that the members point to. __CreateCompatibleDC __CreateCompatibleDC ( hdc := 0 ) This function creates a memory device context (DC) compatible with the specified device. parameters name : hdc desc : Handle to an existing device context. If this handle is 0 (by default), the function creates a memory device context compatible with the application's current screen type : HDC|number default : 0 return value desc : returns the handle to a device context or 0 on failure. type : HDC meta : [description and code taken from Gdip_All.ahk] link : link __CreateDIBSection __CreateDIBSection ( w , h , bpp := 32 , ByRef ppvBits := 0 ) The CreateDIBSection function creates a DIB (Device Independent Bitmap) that applications can write to directly. parameters name : w desc : width of the bitmap to create. type : number name : h desc : height of the bitmap to create. type : number name : bpp desc : bits per pixel (32 = ARGB). type : number default : 32 name : ppvBits desc : A pointer to a variable that receives a pointer to the location of the DIB bit values. type : pointer default : 0 meta : [ByRef, pointer] return value desc : A handle to a bitmap with width w and height h . type : HBITMAP meta : [description and code taken from Gdip_All.ahk] link : link __CreateRect __CreateRect ( ByRef Rect , x , y , w , h ) Creates a Rect object, containing a the coordinates and dimensions of a rectangle. parameters name : Rect desc : Name to call the Rect object. type : HRECT meta : [ByRef] name : x desc : x-coordinate of the upper left corner of the rectangle. type : number name : y desc : y-coordinate of the upper left corner of the rectangle. type : number name : w desc : Width of the rectangle. type : number name : h desc : Height of the rectangle. type : number meta : [description and code taken from Gdip_All.ahk] __DeleteDC __DeleteDC ( hDC ) The DeleteDC function deletes the specified device context (DC). parameters name : hDC desc : A handle to the device context. An application must not delete a DC whose handle was obtained by calling the GetDC function. Instead, it must call the ReleaseDC function to free the DC type : HDC return value desc : If the function succeeds, the return value is nonzero. type : number meta : [description and code taken from Gdip_All.ahk] __DeleteGraphics __DeleteGraphics ( pGraphics ) Deletes the graphics object pointed to by a pointer. parameters name : pGraphics desc : The pointer to the graphics object that should be deleted. type : GpGraphics* return value desc : Probably nonzero on success. type : number meta : [code taken from Gdip_All.ahk] __DeleteObject __DeleteObject ( hObject ) This function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid parameters name : hObject desc : Handle to a logical pen, brush, font, bitmap, region, or palette to delete. type : HGDIOBJ return value desc : Nonzero indicates success. Zero indicates that the specified handle is not valid or that the handle is currently selected into a device context. type : number meta : [description and code taken from Gdip_All.ahk] __GraphicsFromHDC __GraphicsFromHDC ( hdc ) This function gets the graphics from the handle to a device context. parameters name : hdc desc : A handle to the device context. type : HDC return value desc : Returns a pointer to the graphics of a bitmap. type : GpGraphics* meta : [description and code taken from Gdip_All.ahk] __New __New ( guiHwnd , options := \"\" , graphic := false ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GuiControl should be added to. type : hwnd name : options desc : The options that the GuiControl will be created with. Does not accept vVars. type : string default : \"\" link : link name : graphic desc : Callback that will be called each time the underlying control is drawn, but before the GridGUI.GdiControl.hbm has been drawn on the underlying control. Bind the instance of GridGUI.GdiControl to the callback and draw what you want the GridGUI.GdiControl to show using the GridGUI.GdiControl.G . type : Func|BoundFunc|false default : false return value desc : A new GridGUI.GdiControl instance. type : GridGUI.GdiControl __Prepare __Prepare ( area ) Checks if the controls position or size has changed and if it has then recreated the gdi members. parameters name : area desc : The new position to check. type : GridGUI.Position __SelectObject __SelectObject ( hdc , hgdiobj ) The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type. See link for additional details. parameters name : hdc desc : Handle to a DC type : HDC name : hgdiobj desc : A handle to the object to be selected into the DC. type : HGDIOBJ return value desc : If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. type : HGDIOBJ|number meta : [description and code taken from Gdip_All.ahk] link : link __UpdateLayeredWindow __UpdateLayeredWindow ( hwnd , hdc , x := \"\" , y := \"\" , w := \"\" , h := \"\" , Alpha := 255 ) Updates a layered window with the handle to the DC of a gdi bitmap. parameters name : hwnd desc : Handle of the layered window to update. type : hwnd name : hdc desc : Handle to the DC of the GDI bitmap to update the window with. type : HDC name : x desc : X position to place the window. If omitted then the layered window will use its current x coordinate. type : number|\"\" default : \"\" name : y desc : Y position to place the window. If omitted then the layered window will use its current y coordinate. type : number|\"\" default : \"\" name : w desc : Width of the window. If omitted then the layered window will use its current width. type : number|\"\" default : \"\" link : link name : h desc : Height of the window. If omitted then the layered window will use its current height. type : number|\"\" default : \"\" link : link name : Alpha desc : The value in the range (0-255) to set the window transparency. type : number default : 255 return value desc : If the function succeeds, the return value is nonzero. type : number meta : [description and code taken from Gdip_All.ahk] Draw Draw ( pos ) Draws the underlying control at the new position and size. As well as calling GridGUI.GdiControl.UpdateGraphic . parameters name : pos desc : The position and size to draw the control with. type : GridGUI.Position GDIDraw GDIDraw () Draws the GridGUI.GdiControl.hbm (bitmap) on the underlying control, and updates the position and size of the control to the one in GridGUI.GdiControl.pos . UpdateGraphic UpdateGraphic () Calls the user callback GridGUI.GdiControl.graphic if defined, before calling GridGUI.GdiControl.GDIDraw .","title":"GdiControl"},{"location":"Classes/GdiControl/#gdicontrol","text":"","title":"GdiControl"},{"location":"Classes/GdiControl/#members","text":"","title":"Members"},{"location":"Classes/GdiControl/#g","text":"desc : A pointer to the graphics object that is associated with the drawing buffer ( GridGUI.GdiControl.hbm ). Updated each timer the control is drawn with a new size. type : GpGraphics* meta : [pointer] link : link","title":"G"},{"location":"Classes/GdiControl/#graphic","text":"desc : Callback that is called each time the underlying control is drawn, but before the GridGUI.GdiControl.hbm has been drawn on the underlying control. Bind the instance of GridGUI.GdiControl to the callback and draw what you want the GridGUI.GdiControl to show using the GridGUI.GdiControl.G . type : Func|BoundFunc|false default : false meta : [object]","title":"graphic"},{"location":"Classes/GdiControl/#hbm","text":"desc : A handle to bitmap with the same size as the underlying control. Updated each timer the control is drawn with a new size. type : HBITMAP meta : [pointer] link : link","title":"hbm"},{"location":"Classes/GdiControl/#hdc","text":"desc : The device context allowing drawing on the GridGUI.GdiControl.hbm by means of GridGUI.GdiControl.G . type : HDC meta : [pointer]","title":"hdc"},{"location":"Classes/GdiControl/#pos","text":"desc : The last position that this control was drawn at. type : GridGUI.Position default : new GridGUI.Position(0, 0) meta : [object]","title":"pos"},{"location":"Classes/GdiControl/#methods","text":"","title":"Methods"},{"location":"Classes/GdiControl/#__cleanup","text":"__CleanUp () Deletes or releases the GDI objects that the members point to.","title":"__CleanUp"},{"location":"Classes/GdiControl/#__createcompatibledc","text":"__CreateCompatibleDC ( hdc := 0 ) This function creates a memory device context (DC) compatible with the specified device. parameters name : hdc desc : Handle to an existing device context. If this handle is 0 (by default), the function creates a memory device context compatible with the application's current screen type : HDC|number default : 0 return value desc : returns the handle to a device context or 0 on failure. type : HDC meta : [description and code taken from Gdip_All.ahk] link : link","title":"__CreateCompatibleDC"},{"location":"Classes/GdiControl/#__createdibsection","text":"__CreateDIBSection ( w , h , bpp := 32 , ByRef ppvBits := 0 ) The CreateDIBSection function creates a DIB (Device Independent Bitmap) that applications can write to directly. parameters name : w desc : width of the bitmap to create. type : number name : h desc : height of the bitmap to create. type : number name : bpp desc : bits per pixel (32 = ARGB). type : number default : 32 name : ppvBits desc : A pointer to a variable that receives a pointer to the location of the DIB bit values. type : pointer default : 0 meta : [ByRef, pointer] return value desc : A handle to a bitmap with width w and height h . type : HBITMAP meta : [description and code taken from Gdip_All.ahk] link : link","title":"__CreateDIBSection"},{"location":"Classes/GdiControl/#__createrect","text":"__CreateRect ( ByRef Rect , x , y , w , h ) Creates a Rect object, containing a the coordinates and dimensions of a rectangle. parameters name : Rect desc : Name to call the Rect object. type : HRECT meta : [ByRef] name : x desc : x-coordinate of the upper left corner of the rectangle. type : number name : y desc : y-coordinate of the upper left corner of the rectangle. type : number name : w desc : Width of the rectangle. type : number name : h desc : Height of the rectangle. type : number meta : [description and code taken from Gdip_All.ahk]","title":"__CreateRect"},{"location":"Classes/GdiControl/#__deletedc","text":"__DeleteDC ( hDC ) The DeleteDC function deletes the specified device context (DC). parameters name : hDC desc : A handle to the device context. An application must not delete a DC whose handle was obtained by calling the GetDC function. Instead, it must call the ReleaseDC function to free the DC type : HDC return value desc : If the function succeeds, the return value is nonzero. type : number meta : [description and code taken from Gdip_All.ahk]","title":"__DeleteDC"},{"location":"Classes/GdiControl/#__deletegraphics","text":"__DeleteGraphics ( pGraphics ) Deletes the graphics object pointed to by a pointer. parameters name : pGraphics desc : The pointer to the graphics object that should be deleted. type : GpGraphics* return value desc : Probably nonzero on success. type : number meta : [code taken from Gdip_All.ahk]","title":"__DeleteGraphics"},{"location":"Classes/GdiControl/#__deleteobject","text":"__DeleteObject ( hObject ) This function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid parameters name : hObject desc : Handle to a logical pen, brush, font, bitmap, region, or palette to delete. type : HGDIOBJ return value desc : Nonzero indicates success. Zero indicates that the specified handle is not valid or that the handle is currently selected into a device context. type : number meta : [description and code taken from Gdip_All.ahk]","title":"__DeleteObject"},{"location":"Classes/GdiControl/#__graphicsfromhdc","text":"__GraphicsFromHDC ( hdc ) This function gets the graphics from the handle to a device context. parameters name : hdc desc : A handle to the device context. type : HDC return value desc : Returns a pointer to the graphics of a bitmap. type : GpGraphics* meta : [description and code taken from Gdip_All.ahk]","title":"__GraphicsFromHDC"},{"location":"Classes/GdiControl/#__new","text":"__New ( guiHwnd , options := \"\" , graphic := false ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GuiControl should be added to. type : hwnd name : options desc : The options that the GuiControl will be created with. Does not accept vVars. type : string default : \"\" link : link name : graphic desc : Callback that will be called each time the underlying control is drawn, but before the GridGUI.GdiControl.hbm has been drawn on the underlying control. Bind the instance of GridGUI.GdiControl to the callback and draw what you want the GridGUI.GdiControl to show using the GridGUI.GdiControl.G . type : Func|BoundFunc|false default : false return value desc : A new GridGUI.GdiControl instance. type : GridGUI.GdiControl","title":"__New"},{"location":"Classes/GdiControl/#__prepare","text":"__Prepare ( area ) Checks if the controls position or size has changed and if it has then recreated the gdi members. parameters name : area desc : The new position to check. type : GridGUI.Position","title":"__Prepare"},{"location":"Classes/GdiControl/#__selectobject","text":"__SelectObject ( hdc , hgdiobj ) The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type. See link for additional details. parameters name : hdc desc : Handle to a DC type : HDC name : hgdiobj desc : A handle to the object to be selected into the DC. type : HGDIOBJ return value desc : If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. type : HGDIOBJ|number meta : [description and code taken from Gdip_All.ahk] link : link","title":"__SelectObject"},{"location":"Classes/GdiControl/#__updatelayeredwindow","text":"__UpdateLayeredWindow ( hwnd , hdc , x := \"\" , y := \"\" , w := \"\" , h := \"\" , Alpha := 255 ) Updates a layered window with the handle to the DC of a gdi bitmap. parameters name : hwnd desc : Handle of the layered window to update. type : hwnd name : hdc desc : Handle to the DC of the GDI bitmap to update the window with. type : HDC name : x desc : X position to place the window. If omitted then the layered window will use its current x coordinate. type : number|\"\" default : \"\" name : y desc : Y position to place the window. If omitted then the layered window will use its current y coordinate. type : number|\"\" default : \"\" name : w desc : Width of the window. If omitted then the layered window will use its current width. type : number|\"\" default : \"\" link : link name : h desc : Height of the window. If omitted then the layered window will use its current height. type : number|\"\" default : \"\" link : link name : Alpha desc : The value in the range (0-255) to set the window transparency. type : number default : 255 return value desc : If the function succeeds, the return value is nonzero. type : number meta : [description and code taken from Gdip_All.ahk]","title":"__UpdateLayeredWindow"},{"location":"Classes/GdiControl/#draw","text":"Draw ( pos ) Draws the underlying control at the new position and size. As well as calling GridGUI.GdiControl.UpdateGraphic . parameters name : pos desc : The position and size to draw the control with. type : GridGUI.Position","title":"Draw"},{"location":"Classes/GdiControl/#gdidraw","text":"GDIDraw () Draws the GridGUI.GdiControl.hbm (bitmap) on the underlying control, and updates the position and size of the control to the one in GridGUI.GdiControl.pos .","title":"GDIDraw"},{"location":"Classes/GdiControl/#updategraphic","text":"UpdateGraphic () Calls the user callback GridGUI.GdiControl.graphic if defined, before calling GridGUI.GdiControl.GDIDraw .","title":"UpdateGraphic"},{"location":"Classes/Grid/","text":"Grid Members arbitrator desc : An instance of GridGUI.ExpanderArbitrator that keeps tack of the expanding GridGUI.Cell s in the grid. type : GridGUI.ExpanderArbitrator meta : [object] cells desc : An array of the GridGUI.Cell s that have been added to the grid. type : array default : [] meta : [object] columns desc : An instance of GridGUI.Columns that keeps tack of the GridGUI.Column s comprising the grid. type : GridGUI.Columns meta : [object] heights desc : The latest calculated row heights. type : array default : [] meta : [object] justify desc : How the GridGUI.Grid.cells will be positioned in the grid when drawn. Can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : \"\" rows desc : An instance of GridGUI.Rows that keeps tack of the GridGUI.Row s comprising the grid. type : GridGUI.Rows meta : [object] widths desc : The latest calculated column widths. type : array default : [] meta : [object] Methods __New __New () Constructor. return value desc : A new GridGUI.Grid instance. type : GridGUI.Grid AddCell AddCell ( c ) Adds a GridGUI.Cell to the grid in the rows and columns indicated by the GridGUI.Cell.gridpos member of the cell. parameters name : c desc : The GridGUI.Cell to add to the grid. type : GridGUI.Cell CalculatePositions CalculatePositions ( area ) Calculates the positions and sizes of the GridGUI.Cell s in the grid. parameters name : area desc : The position and size of the grid. This is needed to support GridGUI.SubGrid s. type : GridGUI.Position Draw Draw ( area ) Draws the GridGUI.Cell s in the grid using the most recently calculated cell positions and sizes. parameters name : area desc : The position and size of the grid. This is needed to support GridGUI.SubGrid s. type : GridGUI.Position return value desc : Returns the justified area so that the debug grid lines of GridGUI.GridGUIClass can be moved accordingly. type : GridGUI.Position GetMinHeight GetMinHeight () Returns the minimal needed height to show the GridGUI.Cell s. return value desc : The minimal needed height to show the GridGUI.Cell s type : number GetMinWidth GetMinWidth () Returns the minimal needed width to show the GridGUI.Cell s. return value desc : The minimal needed width to show the GridGUI.Cell s type : number RemoveCell RemoveCell ( c ) Removes a GridGUI.Cell from the grid by removing it from the rows and columns it was in, as well as removing it from the GridGUI.Grid.arbitrator . parameters name : c desc : The GridGUI.Cell to remove from the grid. type : GridGUI.Cell ResetConstants ResetConstants () Resets the cached constants of the members.","title":"Grid"},{"location":"Classes/Grid/#grid","text":"","title":"Grid"},{"location":"Classes/Grid/#members","text":"","title":"Members"},{"location":"Classes/Grid/#arbitrator","text":"desc : An instance of GridGUI.ExpanderArbitrator that keeps tack of the expanding GridGUI.Cell s in the grid. type : GridGUI.ExpanderArbitrator meta : [object]","title":"arbitrator"},{"location":"Classes/Grid/#cells","text":"desc : An array of the GridGUI.Cell s that have been added to the grid. type : array default : [] meta : [object]","title":"cells"},{"location":"Classes/Grid/#columns","text":"desc : An instance of GridGUI.Columns that keeps tack of the GridGUI.Column s comprising the grid. type : GridGUI.Columns meta : [object]","title":"columns"},{"location":"Classes/Grid/#heights","text":"desc : The latest calculated row heights. type : array default : [] meta : [object]","title":"heights"},{"location":"Classes/Grid/#justify","text":"desc : How the GridGUI.Grid.cells will be positioned in the grid when drawn. Can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : \"\"","title":"justify"},{"location":"Classes/Grid/#rows","text":"desc : An instance of GridGUI.Rows that keeps tack of the GridGUI.Row s comprising the grid. type : GridGUI.Rows meta : [object]","title":"rows"},{"location":"Classes/Grid/#widths","text":"desc : The latest calculated column widths. type : array default : [] meta : [object]","title":"widths"},{"location":"Classes/Grid/#methods","text":"","title":"Methods"},{"location":"Classes/Grid/#__new","text":"__New () Constructor. return value desc : A new GridGUI.Grid instance. type : GridGUI.Grid","title":"__New"},{"location":"Classes/Grid/#addcell","text":"AddCell ( c ) Adds a GridGUI.Cell to the grid in the rows and columns indicated by the GridGUI.Cell.gridpos member of the cell. parameters name : c desc : The GridGUI.Cell to add to the grid. type : GridGUI.Cell","title":"AddCell"},{"location":"Classes/Grid/#calculatepositions","text":"CalculatePositions ( area ) Calculates the positions and sizes of the GridGUI.Cell s in the grid. parameters name : area desc : The position and size of the grid. This is needed to support GridGUI.SubGrid s. type : GridGUI.Position","title":"CalculatePositions"},{"location":"Classes/Grid/#draw","text":"Draw ( area ) Draws the GridGUI.Cell s in the grid using the most recently calculated cell positions and sizes. parameters name : area desc : The position and size of the grid. This is needed to support GridGUI.SubGrid s. type : GridGUI.Position return value desc : Returns the justified area so that the debug grid lines of GridGUI.GridGUIClass can be moved accordingly. type : GridGUI.Position","title":"Draw"},{"location":"Classes/Grid/#getminheight","text":"GetMinHeight () Returns the minimal needed height to show the GridGUI.Cell s. return value desc : The minimal needed height to show the GridGUI.Cell s type : number","title":"GetMinHeight"},{"location":"Classes/Grid/#getminwidth","text":"GetMinWidth () Returns the minimal needed width to show the GridGUI.Cell s. return value desc : The minimal needed width to show the GridGUI.Cell s type : number","title":"GetMinWidth"},{"location":"Classes/Grid/#removecell","text":"RemoveCell ( c ) Removes a GridGUI.Cell from the grid by removing it from the rows and columns it was in, as well as removing it from the GridGUI.Grid.arbitrator . parameters name : c desc : The GridGUI.Cell to remove from the grid. type : GridGUI.Cell","title":"RemoveCell"},{"location":"Classes/Grid/#resetconstants","text":"ResetConstants () Resets the cached constants of the members.","title":"ResetConstants"},{"location":"Classes/GridGUI/","text":"GridGUI Members Background desc : Used in the handling of controls that have been registered as background type : string default : +WS_CLIPSIBLINGS meta : [static, const] link : link ExitApp desc : Allows quick access to set up a callback that terminates the script type : bound function default : GridGUI.__ExitApp meta : [static, const] Methods __ExitApp __ExitApp () A convenience function wrapper for the command. __New __New ( title := \"\" , options := \"\" , showGrid := false , justify := false ) A convenience constructor that maps to the GridGUI.GridGUIClass . parameters name : title desc : The title that the new gui window will have type : string default : \"\" name : options desc : The ahk gui options that the window will be created with. type : string default : \"\" link : link name : showGrid desc : Whether or not to show a debug grid for the GridGUI.Cell s that where placed in the GridGUI.GridGUIClass.grid before GridGUI.GridGUIClass.Draw was called the first time. type : bool default : false name : justify desc : The position of the controls with in the grid, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string|false default : false return value desc : Returns a new instance of GridGUI.GridGUIClass . type : GridGUI.GridGUIClass Area Area ( w , h , x := 0 , y := 0 ) A convenience function for making a Position that is used as an area. parameters name : w desc : The width of the area. type : number name : h desc : The height of the area. type : number name : x desc : The x coordinate of the top left corner of the area. type : number default : 0 name : y desc : The y coordinate of the top left corner of the area. type : number default : 0 return value desc : A new Position instance. type : GridGUI.Position Pos Pos ( x , y , w := 0 , h := 0 ) A convenience function for making a Position, saves writting \"new\". parameters name : x desc : The x coordinate of the position. type : number name : y desc : The y coordinate of the position. type : number name : w desc : The width of the area spanning from the top left corner at (x, y) to the bottom right corner. type : number default : 0 name : h desc : The height of the area spanning from the top left corner at (x, y) to the bottom right corner. type : number default : 0 return value desc : A new Position instance. type : GridGUI.Position Classes GridGUIClass SubGrid","title":"GridGUI"},{"location":"Classes/GridGUI/#gridgui","text":"","title":"GridGUI"},{"location":"Classes/GridGUI/#members","text":"","title":"Members"},{"location":"Classes/GridGUI/#background","text":"desc : Used in the handling of controls that have been registered as background type : string default : +WS_CLIPSIBLINGS meta : [static, const] link : link","title":"Background"},{"location":"Classes/GridGUI/#exitapp","text":"desc : Allows quick access to set up a callback that terminates the script type : bound function default : GridGUI.__ExitApp meta : [static, const]","title":"ExitApp"},{"location":"Classes/GridGUI/#methods","text":"","title":"Methods"},{"location":"Classes/GridGUI/#__exitapp","text":"__ExitApp () A convenience function wrapper for the command.","title":"__ExitApp"},{"location":"Classes/GridGUI/#__new","text":"__New ( title := \"\" , options := \"\" , showGrid := false , justify := false ) A convenience constructor that maps to the GridGUI.GridGUIClass . parameters name : title desc : The title that the new gui window will have type : string default : \"\" name : options desc : The ahk gui options that the window will be created with. type : string default : \"\" link : link name : showGrid desc : Whether or not to show a debug grid for the GridGUI.Cell s that where placed in the GridGUI.GridGUIClass.grid before GridGUI.GridGUIClass.Draw was called the first time. type : bool default : false name : justify desc : The position of the controls with in the grid, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string|false default : false return value desc : Returns a new instance of GridGUI.GridGUIClass . type : GridGUI.GridGUIClass","title":"__New"},{"location":"Classes/GridGUI/#area","text":"Area ( w , h , x := 0 , y := 0 ) A convenience function for making a Position that is used as an area. parameters name : w desc : The width of the area. type : number name : h desc : The height of the area. type : number name : x desc : The x coordinate of the top left corner of the area. type : number default : 0 name : y desc : The y coordinate of the top left corner of the area. type : number default : 0 return value desc : A new Position instance. type : GridGUI.Position","title":"Area"},{"location":"Classes/GridGUI/#pos","text":"Pos ( x , y , w := 0 , h := 0 ) A convenience function for making a Position, saves writting \"new\". parameters name : x desc : The x coordinate of the position. type : number name : y desc : The y coordinate of the position. type : number name : w desc : The width of the area spanning from the top left corner at (x, y) to the bottom right corner. type : number default : 0 name : h desc : The height of the area spanning from the top left corner at (x, y) to the bottom right corner. type : number default : 0 return value desc : A new Position instance. type : GridGUI.Position","title":"Pos"},{"location":"Classes/GridGUI/#classes","text":"GridGUIClass SubGrid","title":"Classes"},{"location":"Classes/GridGUIClass/","text":"GridGUIClass Members grid desc : The grid that controls are put into. type : GridGUI.Grid default : GridGUI.Grid meta : [object] gridlines desc : The container for the horizontal and vertical grid line controls shown when GridGUI.GridGUIClass.showGrid is true. type : array default : [[], []] meta : [object] link : link margins desc : The additional space that is added around controls that are added to the grid. type : object default : {x: 5, y: 5} meta : [object] showGrid desc : Used to remember what parameter the GridGUI.GridGUIClass instance was created with and to decide whether or not to move the debug grid when drawn. type : bool meta : [const] Methods __DrawGrid __DrawGrid ( area ) Moves the debug grid line controls to the appropriate locations. parameters name : area desc : the area where in the debug grid lines are moved. type : GridGUI.Position __Init __Init ( showGrid ) Initialises the class members. parameters name : showGrid desc : Whether or not to show a grid for the control that where placed on the gui before it was shown the first time. type : bool __New __New ( title := \"\" , options := \"\" , showGrid := false , justify := false ) Constructor. parameters name : title desc : The title that the new gui window will have type : string default : \"\" name : options desc : The ahk gui options that the window will be created with type : string default : \"\" link : link name : showGrid desc : Whether or not to show a grid for the control that where placed on the gui before it was shown the first time. type : bool default : false name : justify desc : The position of the controls with in the grid, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string|false default : false return value desc : Returns a new instance of GridGUI.GridGUIClass type : GridGUI.GridGUIClass __TranslateGridPos __TranslateGridPos ( x , y ) Transforms the cordinate syntax used when adding controls to a grid area parameters name : x desc : The Columns that the cell spans over. When more than one column is wanted separate the start and end columns with a hyphen, e.g. \"2-5\". type : string|number name : y desc : The Rows that the cell spans over. When more than one row is wanted separate the start and end rows with a hyphen, e.g. \"2-5\". type : string|number return value desc : Returns the translated position as a point with a width and a height. type : GridGUI.Position _GuiMoved _GuiMoved ( pos ) A callback called when the gui was moved that calls the GridGUI.GUI._GuiMoved and shows a debug tooltip with the position if GridGUI.GridGUIClass.showGrid is true. parameters name : pos desc : The new position, only containing coordinate of the top right corner. type : GridGUI.Position _GuiSize _GuiSize ( pos ) A callback called when the gui was resized, that calls the GridGUI.GridGUIClass.Draw method, GridGUI.GUI._GuiSize and draws the debug grid if GridGUI.GridGUIClass.showGrid is true. parameters name : pos desc : The new area, only containing width and height of the gui, that is x and y is both zero. type : GridGUI.Position Add Add ( x , y , type , options := \"\" , text := \"\" , exW := 0 , exH := 0 , fillW := false , fillH := false , justify := \"C\" ) Adds a new cell with any of the standard controls to the grid and gui. parameters name : x desc : The Columns that the cell spans over. When more than one column is wanted separate the start and end columns with a hyphen, e.g. \"2-5\". type : string|number name : y desc : The Rows that the cell spans over. When more than one row is wanted separate the start and end rows with a hyphen, e.g. \"2-5\". type : string|number name : type desc : The type of the control. Can be Text, Edit, UpDown, Picture, Button, Checkbox, DropDownList, ComboBox, ListBox, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox and ActiveX . For Radio, ListView, TreeView, Tab3 and StatusBar see AdditionalControls type : string name : options desc : The options that the GuiControl will be created with. Does not accept vVars. Can be an object with keys the same names as the optional arguments that this method takes. type : string default : \"\" link : link name : text desc : The text that the control will be created with. type : string default : \"\" name : exW desc : How much of the excess width the cell should take up relative to the other width expanding cells. Can be an object with keys the same names as the optional arguments that this method takes. type : number default : 0 name : exH desc : How much of the excess height the cell should take up relative to the other height expanding cells. type : number default : 0 name : fillW desc : Whether or not the control should fill the width of the cell. type : bool default : false name : fillH desc : Whether or not the control should fill the height of the cell. type : bool default : false name : justify desc : The position of the control with in the cell, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : \"C\" return value desc : Returns the added control type : GridGUI.ArbitraryControl AddControl AddControl ( x , y , ctrl , exW := 0 , exH := 0 , fillW := false , fillH := false , justify := \"C\" ) Adds a new cell to the grid and sets the cells control to the supplied control class instance. parameters name : x desc : The Columns that the cell spans over. When more than one column is wanted separate the start and end columns with a hyphen, e.g. \"2-5\". type : string|number name : y desc : The Rows that the cell spans over. When more than one row is wanted separate the start and end rows with a hyphen, e.g. \"2-5\". type : string|number name : ctrl desc : The control that will be put in the cell. type : GridGUI.GuiControlClass name : exW desc : How much of the excess width the cell should take up relative to the other width expanding cells. Can be an object with keys the same names as the optional arguments that this method takes. type : number default : 0 name : exH desc : How much of the excess height the cell should take up relative to the other height expanding cells. type : number default : 0 name : fillW desc : Whether or not the control should fill the width of the cell. type : bool default : false name : fillH desc : Whether or not the control should fill the height of the cell. type : bool default : false name : justify desc : The position of the control with in the cell, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : \"C\" return value desc : Returns the control that the method was called with. type : GridGUI.GuiControlClass AutoSize AutoSize () Calculates the minimum size required to show all the controls in the grid and sets the GridGUI.GUI.pos to the calculated width and height, as well as updates the controls in the grid to their positions. Can be used to reduce the number of controls that a noticeable misplaced when the gui is drawn the first time if called before calling GridGUI.GridGUIClass.Show . Draw Draw ( pos ) Calculates the new positions of the controls in the grid based on the settings of their GridGUI.Cell and moved them to their new positions. parameters name : pos desc : The area the controls will be put into and sized to fit if GridGUI.Cell.exW , GridGUI.Cell.exH , GridGUI.Cell.fillW or GridGUI.Cell.fillH of the cell that the control occupies are set. type : GridGUI.Position GetCellGroup GetCellGroup ( Ctrl ) Retrieve a GridGUI.Cell by its associated control. parameters name : Ctrl desc : The control used to match the right GridGUI.Cell type : GridGUI.GuiControlClass return value desc : Returns the found GridGUI.Cell type : GridGUI.Cell GetCellGroupsAt GetCellGroupsAt ( GridPos ) Retrieve the array of GridGUI.Cell s that are in a grid position. parameters name : GridPos desc : The grid position where the GridGUI.Cell s are retrieved from. type : GridGUI.Position return value desc : returns the array of GridGUI.Cell s at GridPos type : object GetNewestCellGroup GetNewestCellGroup () Retrieves the most recently added GridGUI.Cell . return value desc : Retruns the most recent GridGUI.Cell . type : GridGUI.Cell Margin Margin ( x := \"\" , y := \"\" ) Sets the GridGUI.GridGUIClass.margins to the supplied x and y margins and updates all GridGUI.Cell s in GridGUI.GridGUIClass.grid to use the new border sizes. parameters name : x desc : The new horizontal margin to use, that is the spacing to the right and left of cells. If set to \"\" the current value will be left unchanged. type : number|string default : \"\" name : y desc : The new vertical margin to use, that is the spacing above and below cells. If set to \"\" the current value will be left unchanged. type : number|string default : \"\" ReDraw ReDraw () Resets cached calculations and calls GridGUI.GridGUIClass.Draw with the current positions and size. RemoveCell RemoveCell ( Cell ) Removes a GridGUI.Cell and the associated control from the grid and gui. parameters name : Cell desc : The GridGUI.Cell that will be removed. type : GridGUI.Cell RemoveCellByCtrl RemoveCellByCtrl ( Ctrl ) Removes a GridGUI.Cell with a specific control from the grid. parameters name : Ctrl desc : The control that is used to search for the GridGUI.Cell type : GridGUI.ControlClass RemoveCellByPos RemoveCellByPos ( GridPos , index := 1 ) Removes a GridGUI.Cell in the array of GridGUI.Cell s at a specific position in the grid, by the array index. parameters name : GridPos desc : The grid position where the GridGUI.Cell s are retrieved from. type : GridGUI.Position name : index desc : The index to be removed. type : number default : 1 Show Show ( options := AutoSize ) Shows that gui by calling GridGUI.GUI.Show with the given options. parameters name : options desc : The options that is used when calling Gui, Show . type : string default : AutoSize link : link","title":"GridGUIClass"},{"location":"Classes/GridGUIClass/#gridguiclass","text":"","title":"GridGUIClass"},{"location":"Classes/GridGUIClass/#members","text":"","title":"Members"},{"location":"Classes/GridGUIClass/#grid","text":"desc : The grid that controls are put into. type : GridGUI.Grid default : GridGUI.Grid meta : [object]","title":"grid"},{"location":"Classes/GridGUIClass/#gridlines","text":"desc : The container for the horizontal and vertical grid line controls shown when GridGUI.GridGUIClass.showGrid is true. type : array default : [[], []] meta : [object] link : link","title":"gridlines"},{"location":"Classes/GridGUIClass/#margins","text":"desc : The additional space that is added around controls that are added to the grid. type : object default : {x: 5, y: 5} meta : [object]","title":"margins"},{"location":"Classes/GridGUIClass/#showgrid","text":"desc : Used to remember what parameter the GridGUI.GridGUIClass instance was created with and to decide whether or not to move the debug grid when drawn. type : bool meta : [const]","title":"showGrid"},{"location":"Classes/GridGUIClass/#methods","text":"","title":"Methods"},{"location":"Classes/GridGUIClass/#__drawgrid","text":"__DrawGrid ( area ) Moves the debug grid line controls to the appropriate locations. parameters name : area desc : the area where in the debug grid lines are moved. type : GridGUI.Position","title":"__DrawGrid"},{"location":"Classes/GridGUIClass/#__init","text":"__Init ( showGrid ) Initialises the class members. parameters name : showGrid desc : Whether or not to show a grid for the control that where placed on the gui before it was shown the first time. type : bool","title":"__Init"},{"location":"Classes/GridGUIClass/#__new","text":"__New ( title := \"\" , options := \"\" , showGrid := false , justify := false ) Constructor. parameters name : title desc : The title that the new gui window will have type : string default : \"\" name : options desc : The ahk gui options that the window will be created with type : string default : \"\" link : link name : showGrid desc : Whether or not to show a grid for the control that where placed on the gui before it was shown the first time. type : bool default : false name : justify desc : The position of the controls with in the grid, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string|false default : false return value desc : Returns a new instance of GridGUI.GridGUIClass type : GridGUI.GridGUIClass","title":"__New"},{"location":"Classes/GridGUIClass/#__translategridpos","text":"__TranslateGridPos ( x , y ) Transforms the cordinate syntax used when adding controls to a grid area parameters name : x desc : The Columns that the cell spans over. When more than one column is wanted separate the start and end columns with a hyphen, e.g. \"2-5\". type : string|number name : y desc : The Rows that the cell spans over. When more than one row is wanted separate the start and end rows with a hyphen, e.g. \"2-5\". type : string|number return value desc : Returns the translated position as a point with a width and a height. type : GridGUI.Position","title":"__TranslateGridPos"},{"location":"Classes/GridGUIClass/#_guimoved","text":"_GuiMoved ( pos ) A callback called when the gui was moved that calls the GridGUI.GUI._GuiMoved and shows a debug tooltip with the position if GridGUI.GridGUIClass.showGrid is true. parameters name : pos desc : The new position, only containing coordinate of the top right corner. type : GridGUI.Position","title":"_GuiMoved"},{"location":"Classes/GridGUIClass/#_guisize","text":"_GuiSize ( pos ) A callback called when the gui was resized, that calls the GridGUI.GridGUIClass.Draw method, GridGUI.GUI._GuiSize and draws the debug grid if GridGUI.GridGUIClass.showGrid is true. parameters name : pos desc : The new area, only containing width and height of the gui, that is x and y is both zero. type : GridGUI.Position","title":"_GuiSize"},{"location":"Classes/GridGUIClass/#add","text":"Add ( x , y , type , options := \"\" , text := \"\" , exW := 0 , exH := 0 , fillW := false , fillH := false , justify := \"C\" ) Adds a new cell with any of the standard controls to the grid and gui. parameters name : x desc : The Columns that the cell spans over. When more than one column is wanted separate the start and end columns with a hyphen, e.g. \"2-5\". type : string|number name : y desc : The Rows that the cell spans over. When more than one row is wanted separate the start and end rows with a hyphen, e.g. \"2-5\". type : string|number name : type desc : The type of the control. Can be Text, Edit, UpDown, Picture, Button, Checkbox, DropDownList, ComboBox, ListBox, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox and ActiveX . For Radio, ListView, TreeView, Tab3 and StatusBar see AdditionalControls type : string name : options desc : The options that the GuiControl will be created with. Does not accept vVars. Can be an object with keys the same names as the optional arguments that this method takes. type : string default : \"\" link : link name : text desc : The text that the control will be created with. type : string default : \"\" name : exW desc : How much of the excess width the cell should take up relative to the other width expanding cells. Can be an object with keys the same names as the optional arguments that this method takes. type : number default : 0 name : exH desc : How much of the excess height the cell should take up relative to the other height expanding cells. type : number default : 0 name : fillW desc : Whether or not the control should fill the width of the cell. type : bool default : false name : fillH desc : Whether or not the control should fill the height of the cell. type : bool default : false name : justify desc : The position of the control with in the cell, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : \"C\" return value desc : Returns the added control type : GridGUI.ArbitraryControl","title":"Add"},{"location":"Classes/GridGUIClass/#addcontrol","text":"AddControl ( x , y , ctrl , exW := 0 , exH := 0 , fillW := false , fillH := false , justify := \"C\" ) Adds a new cell to the grid and sets the cells control to the supplied control class instance. parameters name : x desc : The Columns that the cell spans over. When more than one column is wanted separate the start and end columns with a hyphen, e.g. \"2-5\". type : string|number name : y desc : The Rows that the cell spans over. When more than one row is wanted separate the start and end rows with a hyphen, e.g. \"2-5\". type : string|number name : ctrl desc : The control that will be put in the cell. type : GridGUI.GuiControlClass name : exW desc : How much of the excess width the cell should take up relative to the other width expanding cells. Can be an object with keys the same names as the optional arguments that this method takes. type : number default : 0 name : exH desc : How much of the excess height the cell should take up relative to the other height expanding cells. type : number default : 0 name : fillW desc : Whether or not the control should fill the width of the cell. type : bool default : false name : fillH desc : Whether or not the control should fill the height of the cell. type : bool default : false name : justify desc : The position of the control with in the cell, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string default : \"C\" return value desc : Returns the control that the method was called with. type : GridGUI.GuiControlClass","title":"AddControl"},{"location":"Classes/GridGUIClass/#autosize","text":"AutoSize () Calculates the minimum size required to show all the controls in the grid and sets the GridGUI.GUI.pos to the calculated width and height, as well as updates the controls in the grid to their positions. Can be used to reduce the number of controls that a noticeable misplaced when the gui is drawn the first time if called before calling GridGUI.GridGUIClass.Show .","title":"AutoSize"},{"location":"Classes/GridGUIClass/#draw","text":"Draw ( pos ) Calculates the new positions of the controls in the grid based on the settings of their GridGUI.Cell and moved them to their new positions. parameters name : pos desc : The area the controls will be put into and sized to fit if GridGUI.Cell.exW , GridGUI.Cell.exH , GridGUI.Cell.fillW or GridGUI.Cell.fillH of the cell that the control occupies are set. type : GridGUI.Position","title":"Draw"},{"location":"Classes/GridGUIClass/#getcellgroup","text":"GetCellGroup ( Ctrl ) Retrieve a GridGUI.Cell by its associated control. parameters name : Ctrl desc : The control used to match the right GridGUI.Cell type : GridGUI.GuiControlClass return value desc : Returns the found GridGUI.Cell type : GridGUI.Cell","title":"GetCellGroup"},{"location":"Classes/GridGUIClass/#getcellgroupsat","text":"GetCellGroupsAt ( GridPos ) Retrieve the array of GridGUI.Cell s that are in a grid position. parameters name : GridPos desc : The grid position where the GridGUI.Cell s are retrieved from. type : GridGUI.Position return value desc : returns the array of GridGUI.Cell s at GridPos type : object","title":"GetCellGroupsAt"},{"location":"Classes/GridGUIClass/#getnewestcellgroup","text":"GetNewestCellGroup () Retrieves the most recently added GridGUI.Cell . return value desc : Retruns the most recent GridGUI.Cell . type : GridGUI.Cell","title":"GetNewestCellGroup"},{"location":"Classes/GridGUIClass/#margin","text":"Margin ( x := \"\" , y := \"\" ) Sets the GridGUI.GridGUIClass.margins to the supplied x and y margins and updates all GridGUI.Cell s in GridGUI.GridGUIClass.grid to use the new border sizes. parameters name : x desc : The new horizontal margin to use, that is the spacing to the right and left of cells. If set to \"\" the current value will be left unchanged. type : number|string default : \"\" name : y desc : The new vertical margin to use, that is the spacing above and below cells. If set to \"\" the current value will be left unchanged. type : number|string default : \"\"","title":"Margin"},{"location":"Classes/GridGUIClass/#redraw","text":"ReDraw () Resets cached calculations and calls GridGUI.GridGUIClass.Draw with the current positions and size.","title":"ReDraw"},{"location":"Classes/GridGUIClass/#removecell","text":"RemoveCell ( Cell ) Removes a GridGUI.Cell and the associated control from the grid and gui. parameters name : Cell desc : The GridGUI.Cell that will be removed. type : GridGUI.Cell","title":"RemoveCell"},{"location":"Classes/GridGUIClass/#removecellbyctrl","text":"RemoveCellByCtrl ( Ctrl ) Removes a GridGUI.Cell with a specific control from the grid. parameters name : Ctrl desc : The control that is used to search for the GridGUI.Cell type : GridGUI.ControlClass","title":"RemoveCellByCtrl"},{"location":"Classes/GridGUIClass/#removecellbypos","text":"RemoveCellByPos ( GridPos , index := 1 ) Removes a GridGUI.Cell in the array of GridGUI.Cell s at a specific position in the grid, by the array index. parameters name : GridPos desc : The grid position where the GridGUI.Cell s are retrieved from. type : GridGUI.Position name : index desc : The index to be removed. type : number default : 1","title":"RemoveCellByPos"},{"location":"Classes/GridGUIClass/#show","text":"Show ( options := AutoSize ) Shows that gui by calling GridGUI.GUI.Show with the given options. parameters name : options desc : The options that is used when calling Gui, Show . type : string default : AutoSize link : link","title":"Show"},{"location":"Classes/GuiCallback/","text":"GuiCallback Members function desc : The function that should be called when the window message is received. type : Func|BoundFunc meta : [object] msgNum desc : The window message number. See link for available window messages. type : number link : link Methods __New __New ( msgNum , function ) Constructor. parameters name : msgNum desc : The window message number. See link for available window messages. type : number link : link name : function desc : The function to call when the window message is received. type : Func|BoundFunc|string return value desc : A new GridGUI.GuiCallback instance. type : GridGUI.GuiCallback ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this callback. type : string","title":"GuiCallback"},{"location":"Classes/GuiCallback/#guicallback","text":"","title":"GuiCallback"},{"location":"Classes/GuiCallback/#members","text":"","title":"Members"},{"location":"Classes/GuiCallback/#function","text":"desc : The function that should be called when the window message is received. type : Func|BoundFunc meta : [object]","title":"function"},{"location":"Classes/GuiCallback/#msgnum","text":"desc : The window message number. See link for available window messages. type : number link : link","title":"msgNum"},{"location":"Classes/GuiCallback/#methods","text":"","title":"Methods"},{"location":"Classes/GuiCallback/#__new","text":"__New ( msgNum , function ) Constructor. parameters name : msgNum desc : The window message number. See link for available window messages. type : number link : link name : function desc : The function to call when the window message is received. type : Func|BoundFunc|string return value desc : A new GridGUI.GuiCallback instance. type : GridGUI.GuiCallback","title":"__New"},{"location":"Classes/GuiCallback/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this callback. type : string","title":"ToStr"},{"location":"Classes/GuiControlClass/","text":"GuiControlClass Members callback desc : A callback that will be called whenever a glabel would be called. If set to false the callback will be ignored. type : Func|BoundFunc|false default : false meta : [object] link : link DPIScale desc : Whether or not to scale unscaled values by DPI/96. type : bool default : false guiHwnd desc : The hwnd of the parent GUI. type : hwnd logfont desc : An instance of GridGUI.LOGFONT which hold information on the font and colour of the control. type : GridGUI.LOGFONT meta : [object] type desc : The type of the control e.g. Button , Edit etc. type : string vVar desc : A variable containing the value of the control as returned by GridGUI.GuiControlClass.GuiControlGet when called with no arguments, it is updated when the glabel is fired. type : any default : The initial value of the control. Methods __glabel __glabel ( label ) An internal method used to allow a function callback to a label. parameters name : label desc : The name of a label that will be GoSub ed to. type : string link : link __New __New ( hwnd , type , options := \"\" , callback := false , DPIScale := true ) Constructor. parameters name : hwnd desc : The hwnd of the control. type : hwnd name : type desc : The type of the control. type : string name : options desc : The ahk options string that the control was created with, used to set up min-size and glabel callback. type : string default : \"\" name : callback desc : The callback to call whenever the glabel of the control would be called. type : Func|BoundFunc|false default : false name : DPIScale desc : Whether or not to scale unscaled values by DPI/96. type : bool default : true return value desc : A new GridGUI.GuiControlClass instance. type : GridGUI.GuiControlClass __ParseOptions __ParseOptions ( options ) Parses option strings for values that are used by the class and updated the instance based on the values. parameters name : options desc : The options that will be parsed, values handled by the lib will be acted on and removed. type : string return value desc : The option string without the parts that the class handles. type : string Draw Draw ( pos ) Draws the control using MoveDraw . parameters name : pos desc : The position and size to draw the control with. type : GridGUI.Position Font Font ( Options := \"\" , FontName := \"\" , updateMinSize := true ) Changes the font, style and colour of the control, without impacting other controls. After the font and style has been applied the min-size of the control is changed so that the text fits. parameters name : Options desc : Styling option string, see link for detail of what options are available. type : string default : \"\" link : link name : FontName desc : The name of the font to apply. type : string default : \"\" link : link name : updateMinSize desc : Whether or not to update the min size of the control so that the text will be visible using the new font. type : bool default : true link : link GetPos GetPos () Implements the method GridGUI.CellControl.GetPos of the GridGUI.Cell interface GridGUI.CellControl . return value desc : The position and size of the control. type : GridGUI.Position GuiControl GuiControl ( subCommand , value ) A thin function wrapper for GuiControl . parameters name : subCommand desc : The subcommand to set for the control. See link for available subcommands. type : string link : link name : value desc : The value to apply to the subcommand. See link for values used in the subcommands. type : string|number|object link : link link : link GuiControlGet GuiControlGet ( subCommand := \"\" , value := \"\" ) A thin function wrapper for GuiControlGet . parameters name : subCommand desc : The subcommand to retrieve from the control. See link for available subcommands. type : string default : \"\" link : link name : value desc : Used to specify what to retrieve when the subcommand is not specific enough. type : string default : \"\" link : link return value desc : The retrieved value. type : any link : link Options Options ( options ) Applies options to the control using GuiControl . parameters name : options desc : The ahk option string to apply. See link for available options. type : string link : link link : link ReDraw ReDraw () Draws the control again, using options that work when drawing the control ontop of other controls. ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this GridGUI.GuiControlClass . type : string ZOrder ZOrder ( top := true , topmost := false ) Changes the z-order of the control to either bottom , top or topmost . parameters name : top desc : If true moved the control to the top of the z-order. If false moves the control to the bottom of the z-order. type : bool default : true name : topmost desc : If true moves the control to be above all other controls. If false sets the z-order based on GridGUI.GuiControlClass.top . type : bool default : false link : link","title":"GuiControlClass"},{"location":"Classes/GuiControlClass/#guicontrolclass","text":"","title":"GuiControlClass"},{"location":"Classes/GuiControlClass/#members","text":"","title":"Members"},{"location":"Classes/GuiControlClass/#callback","text":"desc : A callback that will be called whenever a glabel would be called. If set to false the callback will be ignored. type : Func|BoundFunc|false default : false meta : [object] link : link","title":"callback"},{"location":"Classes/GuiControlClass/#dpiscale","text":"desc : Whether or not to scale unscaled values by DPI/96. type : bool default : false","title":"DPIScale"},{"location":"Classes/GuiControlClass/#guihwnd","text":"desc : The hwnd of the parent GUI. type : hwnd","title":"guiHwnd"},{"location":"Classes/GuiControlClass/#logfont","text":"desc : An instance of GridGUI.LOGFONT which hold information on the font and colour of the control. type : GridGUI.LOGFONT meta : [object]","title":"logfont"},{"location":"Classes/GuiControlClass/#type","text":"desc : The type of the control e.g. Button , Edit etc. type : string","title":"type"},{"location":"Classes/GuiControlClass/#vvar","text":"desc : A variable containing the value of the control as returned by GridGUI.GuiControlClass.GuiControlGet when called with no arguments, it is updated when the glabel is fired. type : any default : The initial value of the control.","title":"vVar"},{"location":"Classes/GuiControlClass/#methods","text":"","title":"Methods"},{"location":"Classes/GuiControlClass/#__glabel","text":"__glabel ( label ) An internal method used to allow a function callback to a label. parameters name : label desc : The name of a label that will be GoSub ed to. type : string link : link","title":"__glabel"},{"location":"Classes/GuiControlClass/#__new","text":"__New ( hwnd , type , options := \"\" , callback := false , DPIScale := true ) Constructor. parameters name : hwnd desc : The hwnd of the control. type : hwnd name : type desc : The type of the control. type : string name : options desc : The ahk options string that the control was created with, used to set up min-size and glabel callback. type : string default : \"\" name : callback desc : The callback to call whenever the glabel of the control would be called. type : Func|BoundFunc|false default : false name : DPIScale desc : Whether or not to scale unscaled values by DPI/96. type : bool default : true return value desc : A new GridGUI.GuiControlClass instance. type : GridGUI.GuiControlClass","title":"__New"},{"location":"Classes/GuiControlClass/#__parseoptions","text":"__ParseOptions ( options ) Parses option strings for values that are used by the class and updated the instance based on the values. parameters name : options desc : The options that will be parsed, values handled by the lib will be acted on and removed. type : string return value desc : The option string without the parts that the class handles. type : string","title":"__ParseOptions"},{"location":"Classes/GuiControlClass/#draw","text":"Draw ( pos ) Draws the control using MoveDraw . parameters name : pos desc : The position and size to draw the control with. type : GridGUI.Position","title":"Draw"},{"location":"Classes/GuiControlClass/#font","text":"Font ( Options := \"\" , FontName := \"\" , updateMinSize := true ) Changes the font, style and colour of the control, without impacting other controls. After the font and style has been applied the min-size of the control is changed so that the text fits. parameters name : Options desc : Styling option string, see link for detail of what options are available. type : string default : \"\" link : link name : FontName desc : The name of the font to apply. type : string default : \"\" link : link name : updateMinSize desc : Whether or not to update the min size of the control so that the text will be visible using the new font. type : bool default : true link : link","title":"Font"},{"location":"Classes/GuiControlClass/#getpos","text":"GetPos () Implements the method GridGUI.CellControl.GetPos of the GridGUI.Cell interface GridGUI.CellControl . return value desc : The position and size of the control. type : GridGUI.Position","title":"GetPos"},{"location":"Classes/GuiControlClass/#guicontrol","text":"GuiControl ( subCommand , value ) A thin function wrapper for GuiControl . parameters name : subCommand desc : The subcommand to set for the control. See link for available subcommands. type : string link : link name : value desc : The value to apply to the subcommand. See link for values used in the subcommands. type : string|number|object link : link link : link","title":"GuiControl"},{"location":"Classes/GuiControlClass/#guicontrolget","text":"GuiControlGet ( subCommand := \"\" , value := \"\" ) A thin function wrapper for GuiControlGet . parameters name : subCommand desc : The subcommand to retrieve from the control. See link for available subcommands. type : string default : \"\" link : link name : value desc : Used to specify what to retrieve when the subcommand is not specific enough. type : string default : \"\" link : link return value desc : The retrieved value. type : any link : link","title":"GuiControlGet"},{"location":"Classes/GuiControlClass/#options","text":"Options ( options ) Applies options to the control using GuiControl . parameters name : options desc : The ahk option string to apply. See link for available options. type : string link : link link : link","title":"Options"},{"location":"Classes/GuiControlClass/#redraw","text":"ReDraw () Draws the control again, using options that work when drawing the control ontop of other controls.","title":"ReDraw"},{"location":"Classes/GuiControlClass/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this GridGUI.GuiControlClass . type : string","title":"ToStr"},{"location":"Classes/GuiControlClass/#zorder","text":"ZOrder ( top := true , topmost := false ) Changes the z-order of the control to either bottom , top or topmost . parameters name : top desc : If true moved the control to the top of the z-order. If false moves the control to the bottom of the z-order. type : bool default : true name : topmost desc : If true moves the control to be above all other controls. If false sets the z-order based on GridGUI.GuiControlClass.top . type : bool default : false link : link","title":"ZOrder"},{"location":"Classes/LOGFONT/","text":"LOGFONT Members _Colour desc : The colour of the controls text in BGR format. type : number default : 0 CharSet desc : The char set of the font. See the link for details. type : number default : 0 link : link ClipPrecision desc : How characters that are partially outside the bounds of the font are handled. See link for details. type : number default : 0 link : link Colour desc : The colour of the controls text in RGB format as a hex string. type : string default : \"\" Escapement desc : The angle between the text direction and the x-axis of the screen in 1/10 degree. See link for details. type : number default : 0 link : link FaceName desc : The name of the font that was applied to the control. See the link for common fonts. type : string link : link guiHwnd desc : The hwnd of the parent window of the control associated with this instance. type : hwnd|false default : false Height desc : The height of the characters in the font. See link for details. type : number default : 0 link : link HFONT desc : The handle to the font associated with the control. type : HFONT default : 0 Hwnd desc : The hwnd of the control that is associated with this instance. type : hwnd Italic desc : Whether or not the font is italic. type : bool default : false Orientation desc : The angle between the bottom of the charats and the x-axis of the screen in 1/10 degree. type : number default : 0 OutPrecision desc : How precisely the drawn characters most match the set font characteristics. See link for details. type : number default : 0 link : link PitchAndFamily desc : The two low-order bits specify the pitch of the font and the last four bits specify the family. See link for details. type : number default : 0 meta : [composite] link : link Quality desc : The quality of the font. See link for details. type : number default : 0 link : link StrikeOut desc : Whether or not the font is drawn with a line through it. type : bool default : false Underline desc : Whether or not the font is drawn with a line underneath it. type : bool default : false Weight desc : How bold the text is. See link for details. type : number default : 0 link : link Width desc : The average width of characters in the font. See link for details. type : number default : 0 link : link Methods __GetColour __GetColour () Retrives the colour that the parent window would paint the text as returned by WM_CTLCOLORSTATIC . __GetDC __GetDC () Retrives the DC handle of the associated control. return value desc : The DC handle of the associated control. type : HDC __New __New ( Hwnd , guiHwnd := false ) Constructor. parameters name : Hwnd desc : The hwnd of the control that will be associated with this instance. type : hwnd name : guiHwnd desc : The hwnd of the parent window. type : hwnd|false default : false return value desc : A new GridGUI.LOGFONT instance. type : GridGUI.LOGFONT __ReleaseDC __ReleaseDC ( hDC ) Releases a device context. parameters name : hDC desc : The handle to the device context that will be released. type : HDC GetData GetData ( ByRef buff ) Retrieves the font characteristics from the LOGFONT structure. parameters name : buff desc : A buffer holding a LOGFONT struct. type : pointer meta : [ByRef] link : link GetDimensionsInPixels GetDimensionsInPixels ( str ) Returns the bounding box of a string when written using the current font and style. parameters name : str desc : The string to calculate the bounding box of. type : string return value desc : The bounding box of str . type : GridGUI.Position PixelHeight PixelHeight ( str ) Returns the needed height in pixels of a string using the current font and style. parameters name : str desc : The string to calculate the height of. type : string return value desc : The needed height of str . type : number PixelWidth PixelWidth ( str ) Returns the needed width in pixels of a string using the current font and style. parameters name : str desc : The string to calculate the width of. type : string return value desc : The needed width of str . type : number ToOptions ToOptions () Converts the font characteristics to a string that can be used in Gui, Font . return value desc : The font characteristics as an ahk font option string. type : string ToStr ToStr () Converts the object to a string. return value desc : A string representing this GridGUI.LOGFONT . type : string UpdateFont UpdateFont () Retrieves the font from the control and the colour for the parent window.","title":"LOGFONT"},{"location":"Classes/LOGFONT/#logfont","text":"","title":"LOGFONT"},{"location":"Classes/LOGFONT/#members","text":"","title":"Members"},{"location":"Classes/LOGFONT/#_colour","text":"desc : The colour of the controls text in BGR format. type : number default : 0","title":"_Colour"},{"location":"Classes/LOGFONT/#charset","text":"desc : The char set of the font. See the link for details. type : number default : 0 link : link","title":"CharSet"},{"location":"Classes/LOGFONT/#clipprecision","text":"desc : How characters that are partially outside the bounds of the font are handled. See link for details. type : number default : 0 link : link","title":"ClipPrecision"},{"location":"Classes/LOGFONT/#colour","text":"desc : The colour of the controls text in RGB format as a hex string. type : string default : \"\"","title":"Colour"},{"location":"Classes/LOGFONT/#escapement","text":"desc : The angle between the text direction and the x-axis of the screen in 1/10 degree. See link for details. type : number default : 0 link : link","title":"Escapement"},{"location":"Classes/LOGFONT/#facename","text":"desc : The name of the font that was applied to the control. See the link for common fonts. type : string link : link","title":"FaceName"},{"location":"Classes/LOGFONT/#guihwnd","text":"desc : The hwnd of the parent window of the control associated with this instance. type : hwnd|false default : false","title":"guiHwnd"},{"location":"Classes/LOGFONT/#height","text":"desc : The height of the characters in the font. See link for details. type : number default : 0 link : link","title":"Height"},{"location":"Classes/LOGFONT/#hfont","text":"desc : The handle to the font associated with the control. type : HFONT default : 0","title":"HFONT"},{"location":"Classes/LOGFONT/#hwnd","text":"desc : The hwnd of the control that is associated with this instance. type : hwnd","title":"Hwnd"},{"location":"Classes/LOGFONT/#italic","text":"desc : Whether or not the font is italic. type : bool default : false","title":"Italic"},{"location":"Classes/LOGFONT/#orientation","text":"desc : The angle between the bottom of the charats and the x-axis of the screen in 1/10 degree. type : number default : 0","title":"Orientation"},{"location":"Classes/LOGFONT/#outprecision","text":"desc : How precisely the drawn characters most match the set font characteristics. See link for details. type : number default : 0 link : link","title":"OutPrecision"},{"location":"Classes/LOGFONT/#pitchandfamily","text":"desc : The two low-order bits specify the pitch of the font and the last four bits specify the family. See link for details. type : number default : 0 meta : [composite] link : link","title":"PitchAndFamily"},{"location":"Classes/LOGFONT/#quality","text":"desc : The quality of the font. See link for details. type : number default : 0 link : link","title":"Quality"},{"location":"Classes/LOGFONT/#strikeout","text":"desc : Whether or not the font is drawn with a line through it. type : bool default : false","title":"StrikeOut"},{"location":"Classes/LOGFONT/#underline","text":"desc : Whether or not the font is drawn with a line underneath it. type : bool default : false","title":"Underline"},{"location":"Classes/LOGFONT/#weight","text":"desc : How bold the text is. See link for details. type : number default : 0 link : link","title":"Weight"},{"location":"Classes/LOGFONT/#width","text":"desc : The average width of characters in the font. See link for details. type : number default : 0 link : link","title":"Width"},{"location":"Classes/LOGFONT/#methods","text":"","title":"Methods"},{"location":"Classes/LOGFONT/#__getcolour","text":"__GetColour () Retrives the colour that the parent window would paint the text as returned by WM_CTLCOLORSTATIC .","title":"__GetColour"},{"location":"Classes/LOGFONT/#__getdc","text":"__GetDC () Retrives the DC handle of the associated control. return value desc : The DC handle of the associated control. type : HDC","title":"__GetDC"},{"location":"Classes/LOGFONT/#__new","text":"__New ( Hwnd , guiHwnd := false ) Constructor. parameters name : Hwnd desc : The hwnd of the control that will be associated with this instance. type : hwnd name : guiHwnd desc : The hwnd of the parent window. type : hwnd|false default : false return value desc : A new GridGUI.LOGFONT instance. type : GridGUI.LOGFONT","title":"__New"},{"location":"Classes/LOGFONT/#__releasedc","text":"__ReleaseDC ( hDC ) Releases a device context. parameters name : hDC desc : The handle to the device context that will be released. type : HDC","title":"__ReleaseDC"},{"location":"Classes/LOGFONT/#getdata","text":"GetData ( ByRef buff ) Retrieves the font characteristics from the LOGFONT structure. parameters name : buff desc : A buffer holding a LOGFONT struct. type : pointer meta : [ByRef] link : link","title":"GetData"},{"location":"Classes/LOGFONT/#getdimensionsinpixels","text":"GetDimensionsInPixels ( str ) Returns the bounding box of a string when written using the current font and style. parameters name : str desc : The string to calculate the bounding box of. type : string return value desc : The bounding box of str . type : GridGUI.Position","title":"GetDimensionsInPixels"},{"location":"Classes/LOGFONT/#pixelheight","text":"PixelHeight ( str ) Returns the needed height in pixels of a string using the current font and style. parameters name : str desc : The string to calculate the height of. type : string return value desc : The needed height of str . type : number","title":"PixelHeight"},{"location":"Classes/LOGFONT/#pixelwidth","text":"PixelWidth ( str ) Returns the needed width in pixels of a string using the current font and style. parameters name : str desc : The string to calculate the width of. type : string return value desc : The needed width of str . type : number","title":"PixelWidth"},{"location":"Classes/LOGFONT/#tooptions","text":"ToOptions () Converts the font characteristics to a string that can be used in Gui, Font . return value desc : The font characteristics as an ahk font option string. type : string","title":"ToOptions"},{"location":"Classes/LOGFONT/#tostr","text":"ToStr () Converts the object to a string. return value desc : A string representing this GridGUI.LOGFONT . type : string","title":"ToStr"},{"location":"Classes/LOGFONT/#updatefont","text":"UpdateFont () Retrieves the font from the control and the colour for the parent window.","title":"UpdateFont"},{"location":"Classes/ListviewControl/","text":"ListviewControl Members gui desc : The parent GUI of the ListView . type : GridGUI.GUI meta : [object] Methods __GetRow __GetRow ( index ) Retrieves a row as an array of strings, without changing the currently selected ListView. parameters name : index desc : The index of the row to retrieve. type : number return value desc : The contents of the row at index . type : array __New __New ( guiHwnd , options := \"\" , text := \"\" ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GuiControl should be added to. type : hwnd name : options desc : The options that the ListView will be created with. Does not accept vVars. type : string default : \"\" link : link name : text desc : A list of the initial column titles separated by | , e.g. \"ColumnTitle1|ColumnTitle2|...\". type : string default : \"\" return value desc : A new GridGUI.ListviewControl instance. type : GridGUI.ListviewControl __ResetCurrentLV __ResetCurrentLV ( previous ) Sets the default GUI and ListView . Used to restore the old default GUI and ListView , so that using the methods of the class won't have any side effects. parameters name : previous desc : An object of the hwnds that should be set as the default GUI and ListView indexed under the keys \"gui\" and \"lv\". type : object __SetCurrentLV __SetCurrentLV () Selects this ListView and sets the default GUI to GridGUI.ListviewControl.gui so that the LV_Functions work on the right ListView . return value desc : The hwnd of the previous default GUI and ListView as an object with the keys \"gui\" and \"lv\". type : object Add Add ( Options := \"\" , Fields * ) Adds a new row to the bottom of the list. parameters name : Options desc : The row options to apply to the new row. See link for a list of available options. type : string default : \"\" link : link name : Fields desc : The columns of the new row, which can be text or numeric. If there are too few fields to fill all the columns, the columns at the end are left blank. If there are too many fields, the fields at the end are completely ignored. type : string|number meta : [variadic] return value desc : Returns 0 upon failure. Upon success, it returns the new row number, which is not necessarily the last row if the ListView has the Sort or SortDesc style. type : number link : link AddArray AddArray ( lst ) Adds an array of rows to the ListView . parameters name : lst desc : The array of rows to add. Each row should be an array of the text that should be in each column. type : array Delete Delete ( RowNumber := Null ) Deletes the specified row or all rows. parameters name : RowNumber desc : The index of the row to delete. If the parameter is omitted, all rows in the ListView are deleted. type : number default : Null return value desc : Returns 1 upon success and 0 upon failure. type : number link : link DeleteCol DeleteCol ( ColumnNumber ) Deletes the specified column and all of the contents beneath it. parameters name : ColumnNumber desc : The index of the column to delete. Once a column is deleted, the column numbers of any that lie to its right are reduced by 1 . Consequently, calling LV_DeleteCol( 2 ) twice would delete the second and third columns. type : number return value desc : It returns 1 upon success and 0 upon failure. type : number link : link DeleteHeaders DeleteHeaders () Deletes all headers of the ListView . return value desc : Returns 1 if all the headers where removed successfully or 0 if one or more headers could not be deleted. type : bool FindItem FindItem ( text , index := 0 , partial := false ) Finds the index of a row containing a given string. parameters name : text desc : The text to search for. type : string link : link name : index desc : The index to start the search from, the index itself won't be part of the search. 0 searches from the top of the list. type : number default : 0 link : link name : partial desc : Whether or not to detect partial matches. type : bool default : false return value desc : The index of the found row or -1 on failure. type : number link : link GetCount GetCount ( Mode := \"\" ) Retrieves the total number of rows or columns, or the number of selected rows only. parameters name : Mode desc : When the parameter is omitted, the function returns the total number of rows in the control. When the parameter is \"S\" or \"Selected\", the count includes only the selected/highlighted rows. When the parameter is \"Col\" or \"Column\", the function returns the number of columns in the control. This function is always instantaneous because the control keeps track of these counts. type : string default : \"\" return value desc : The number of rows or columns of the type specified in Mode . type : number link : link GetHeaders GetHeaders () Retrieves the column titles as an array. return value desc : The column titles in an array. type : array GetNext GetNext ( StartingRowNumber := \"\" , RowType := \"\" ) Retrieves the row number of the next selected, checked, or focused row. parameters name : StartingRowNumber desc : The row index to search from. If StartingRowNumber is omitted or less than 1 , the search begins at the top of the list. Otherwise, the search begins at the row after StartingRowNumber . type : string default : \"\" name : RowType desc : The type of row to find. If RowType is omitted, the function searches for the next selected/highlighted row. Otherwise, specify \"C\" or \"Checked\" to find the next checked row; or \"F\" or \"Focused\" to find the focused row. type : string default : \"\" return value desc : The row number of the next selected, checked, or focused row. type : number link : link GetRow GetRow ( index ) Retrieves a row as an array of strings. parameters name : index desc : The index of the row to retrieve. type : number return value desc : The contents of the row at index . type : array GetSelection GetSelection () Retrieves an array of the selected rows. return value desc : The selected rows in an array. type : array GetText GetText ( ByRef OutputVar , RowNumber , ColumnNumber := 1 ) Retrieves the text at the specified RowNumber and ColumnNumber and stores it in OutputVar. parameters name : OutputVar desc : The variable to put the text in to. Upon failure, OutputVar is made blank. type : string meta : [ByRef] name : RowNumber desc : The index of the row to retrieve the text from. If RowNumber is 0 , the column header text is retrieved. If the text is longer than 8191, only the first 8191 characters are retrieved. type : number name : ColumnNumber desc : The index of the column to retrieve the text from. Column numbers seen by the script are not altered by any dragging and dropping of columns the user may have done. type : number default : 1 return value desc : returns 1 upon success and 0 upon failure. type : number link : link Insert Insert ( RowNumber , Options := \"\" , Cols * ) Inserts a new row at the specified row number. parameters name : RowNumber desc : The index to insert the new row at. Any rows at or beneath RowNumber are shifted downward to make room for the new row. If RowNumber is greater than the number of rows in the list (even as high as 2147483647), the new row is added to the end of the list. type : number name : Options desc : The row options to apply to the new row. See link for a list of available options. type : string default : \"\" link : link name : Cols desc : The columns of the new row, which can be text or numeric. If there are too few fields to fill all the columns, the columns at the end are left blank. If there are too many fields, the fields at the end are completely ignored. type : string|number meta : [variadic] return value desc : Returns 0 upon failure. Upon success, it returns the new row number, which is not necessarily the last row if the ListView has the Sort or SortDesc style. type : number link : link InsertCol InsertCol ( ColumnNumber , Options := \"\" , ColumnTitle := \"\" ) Inserts a new column at the specified column number and shifting any other columns to the right to make room parameters name : ColumnNumber desc : The index to place the new column at. If ColumnNumber is larger than the number of columns currently in the control, the new column is added to the end of the list. type : number name : Options desc : The options to apply to the new column. The new column's attributes always start off at their defaults unless changed via Options . type : string default : \"\" link : link name : ColumnTitle desc : The title of the column. type : string default : \"\" return value desc : The index of the newly added column or 0 on failure. type : number link : link Modify Modify ( RowNumber , Options := \"\" , NewCols * ) Modifies the attributes and/or text of a row. See link for details. parameters name : RowNumber desc : The index of the row to modify. If RowNumber is 0 , all rows in the control are modified. type : number name : Options desc : The row options to apply to the row. See link for a list of available options. type : string default : \"\" link : link name : NewCols desc : The optional new text to set each column to. type : string meta : [variadic] return value desc : Returns 1 upon success and 0 upon failure. If RowNumber is 0 then 1 is returned on complete success and 0 is returned if any part of the operation failed. type : number link : link ModifyCol ModifyCol ( ColumnNumber := Null , Options := Null , ColumnTitle := Null ) Modifies the attributes and/or text of the specified column and its header. If all parameters are omitted, the width of every column is adjusted to fit the contents of the rows. If only the first parameter is present, only the specified column is auto-sized. Auto-sizing has no effect when not in Report (Details) view. parameters name : ColumnNumber desc : The index of the column to modify. type : number default : Null name : Options desc : The options to apply to the column. type : string default : Null link : link name : ColumnTitle desc : The title of the column. type : string default : Null return value desc : Returns 1 upon success and 0 upon failure. type : number link : link Redraw Redraw ( bool ) Enables or disables redrawing of the GridGUI.ListviewControl . While redrawing is disabled then any changes to the rows or columns won't be shown in the GUI. Used to improve performance when performing lots of changes at once. parameters name : bool desc : Whether to enable or disable redrawing of the GridGUI.ListviewControl . type : bool ScrollTo ScrollTo ( index := 0 , text := \"\" , partial := false ) Scrolls the ListView so that a given row index is visible, or so that a row with a given string is visible. parameters name : index desc : The row index to ensure the viability of. If index is negative then it will count from the bottom of the ListView . If text is true then index will be where the search is started from. See GridGUI.ListviewControl.FindItem . type : number default : 0 name : text desc : Ignored if left unset otherwise it is the text of the row that should be visible. See GridGUI.ListviewControl.FindItem . type : string default : \"\" name : partial desc : If text is true then partial is whether or not a complete match is need. See GridGUI.ListviewControl.FindItem . type : bool default : false link : link SetHeaders SetHeaders ( headers ) Sets the column titles to the ones passed in the argument headers . The number of columns after this call will be equal to the length of headers , meaning that columns will be deleted or added as needed. parameters name : headers desc : An array of the new header titles to set. type : array SetImageList SetImageList ( ImageListID , IconType := \"\" ) Sets or replaces an ImageList for displaying icons. See link for details. parameters name : ImageListID desc : The id of an image list returned from a previous call to IL_Create() . type : number name : IconType desc : The type of the icons in the image list. specify 0 for large icons, 1 for small icons, and 2 for state icons. If omitted, the type of icons in the ImageList is detected automatically as large or small. type : string default : \"\" return value desc : If successful, LV_SetImageList() returns the ImageListID that was previously associated with the ListView (or 0 if none). type : number link : link","title":"ListviewControl"},{"location":"Classes/ListviewControl/#listviewcontrol","text":"","title":"ListviewControl"},{"location":"Classes/ListviewControl/#members","text":"","title":"Members"},{"location":"Classes/ListviewControl/#gui","text":"desc : The parent GUI of the ListView . type : GridGUI.GUI meta : [object]","title":"gui"},{"location":"Classes/ListviewControl/#methods","text":"","title":"Methods"},{"location":"Classes/ListviewControl/#__getrow","text":"__GetRow ( index ) Retrieves a row as an array of strings, without changing the currently selected ListView. parameters name : index desc : The index of the row to retrieve. type : number return value desc : The contents of the row at index . type : array","title":"__GetRow"},{"location":"Classes/ListviewControl/#__new","text":"__New ( guiHwnd , options := \"\" , text := \"\" ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GuiControl should be added to. type : hwnd name : options desc : The options that the ListView will be created with. Does not accept vVars. type : string default : \"\" link : link name : text desc : A list of the initial column titles separated by | , e.g. \"ColumnTitle1|ColumnTitle2|...\". type : string default : \"\" return value desc : A new GridGUI.ListviewControl instance. type : GridGUI.ListviewControl","title":"__New"},{"location":"Classes/ListviewControl/#__resetcurrentlv","text":"__ResetCurrentLV ( previous ) Sets the default GUI and ListView . Used to restore the old default GUI and ListView , so that using the methods of the class won't have any side effects. parameters name : previous desc : An object of the hwnds that should be set as the default GUI and ListView indexed under the keys \"gui\" and \"lv\". type : object","title":"__ResetCurrentLV"},{"location":"Classes/ListviewControl/#__setcurrentlv","text":"__SetCurrentLV () Selects this ListView and sets the default GUI to GridGUI.ListviewControl.gui so that the LV_Functions work on the right ListView . return value desc : The hwnd of the previous default GUI and ListView as an object with the keys \"gui\" and \"lv\". type : object","title":"__SetCurrentLV"},{"location":"Classes/ListviewControl/#add","text":"Add ( Options := \"\" , Fields * ) Adds a new row to the bottom of the list. parameters name : Options desc : The row options to apply to the new row. See link for a list of available options. type : string default : \"\" link : link name : Fields desc : The columns of the new row, which can be text or numeric. If there are too few fields to fill all the columns, the columns at the end are left blank. If there are too many fields, the fields at the end are completely ignored. type : string|number meta : [variadic] return value desc : Returns 0 upon failure. Upon success, it returns the new row number, which is not necessarily the last row if the ListView has the Sort or SortDesc style. type : number link : link","title":"Add"},{"location":"Classes/ListviewControl/#addarray","text":"AddArray ( lst ) Adds an array of rows to the ListView . parameters name : lst desc : The array of rows to add. Each row should be an array of the text that should be in each column. type : array","title":"AddArray"},{"location":"Classes/ListviewControl/#delete","text":"Delete ( RowNumber := Null ) Deletes the specified row or all rows. parameters name : RowNumber desc : The index of the row to delete. If the parameter is omitted, all rows in the ListView are deleted. type : number default : Null return value desc : Returns 1 upon success and 0 upon failure. type : number link : link","title":"Delete"},{"location":"Classes/ListviewControl/#deletecol","text":"DeleteCol ( ColumnNumber ) Deletes the specified column and all of the contents beneath it. parameters name : ColumnNumber desc : The index of the column to delete. Once a column is deleted, the column numbers of any that lie to its right are reduced by 1 . Consequently, calling LV_DeleteCol( 2 ) twice would delete the second and third columns. type : number return value desc : It returns 1 upon success and 0 upon failure. type : number link : link","title":"DeleteCol"},{"location":"Classes/ListviewControl/#deleteheaders","text":"DeleteHeaders () Deletes all headers of the ListView . return value desc : Returns 1 if all the headers where removed successfully or 0 if one or more headers could not be deleted. type : bool","title":"DeleteHeaders"},{"location":"Classes/ListviewControl/#finditem","text":"FindItem ( text , index := 0 , partial := false ) Finds the index of a row containing a given string. parameters name : text desc : The text to search for. type : string link : link name : index desc : The index to start the search from, the index itself won't be part of the search. 0 searches from the top of the list. type : number default : 0 link : link name : partial desc : Whether or not to detect partial matches. type : bool default : false return value desc : The index of the found row or -1 on failure. type : number link : link","title":"FindItem"},{"location":"Classes/ListviewControl/#getcount","text":"GetCount ( Mode := \"\" ) Retrieves the total number of rows or columns, or the number of selected rows only. parameters name : Mode desc : When the parameter is omitted, the function returns the total number of rows in the control. When the parameter is \"S\" or \"Selected\", the count includes only the selected/highlighted rows. When the parameter is \"Col\" or \"Column\", the function returns the number of columns in the control. This function is always instantaneous because the control keeps track of these counts. type : string default : \"\" return value desc : The number of rows or columns of the type specified in Mode . type : number link : link","title":"GetCount"},{"location":"Classes/ListviewControl/#getheaders","text":"GetHeaders () Retrieves the column titles as an array. return value desc : The column titles in an array. type : array","title":"GetHeaders"},{"location":"Classes/ListviewControl/#getnext","text":"GetNext ( StartingRowNumber := \"\" , RowType := \"\" ) Retrieves the row number of the next selected, checked, or focused row. parameters name : StartingRowNumber desc : The row index to search from. If StartingRowNumber is omitted or less than 1 , the search begins at the top of the list. Otherwise, the search begins at the row after StartingRowNumber . type : string default : \"\" name : RowType desc : The type of row to find. If RowType is omitted, the function searches for the next selected/highlighted row. Otherwise, specify \"C\" or \"Checked\" to find the next checked row; or \"F\" or \"Focused\" to find the focused row. type : string default : \"\" return value desc : The row number of the next selected, checked, or focused row. type : number link : link","title":"GetNext"},{"location":"Classes/ListviewControl/#getrow","text":"GetRow ( index ) Retrieves a row as an array of strings. parameters name : index desc : The index of the row to retrieve. type : number return value desc : The contents of the row at index . type : array","title":"GetRow"},{"location":"Classes/ListviewControl/#getselection","text":"GetSelection () Retrieves an array of the selected rows. return value desc : The selected rows in an array. type : array","title":"GetSelection"},{"location":"Classes/ListviewControl/#gettext","text":"GetText ( ByRef OutputVar , RowNumber , ColumnNumber := 1 ) Retrieves the text at the specified RowNumber and ColumnNumber and stores it in OutputVar. parameters name : OutputVar desc : The variable to put the text in to. Upon failure, OutputVar is made blank. type : string meta : [ByRef] name : RowNumber desc : The index of the row to retrieve the text from. If RowNumber is 0 , the column header text is retrieved. If the text is longer than 8191, only the first 8191 characters are retrieved. type : number name : ColumnNumber desc : The index of the column to retrieve the text from. Column numbers seen by the script are not altered by any dragging and dropping of columns the user may have done. type : number default : 1 return value desc : returns 1 upon success and 0 upon failure. type : number link : link","title":"GetText"},{"location":"Classes/ListviewControl/#insert","text":"Insert ( RowNumber , Options := \"\" , Cols * ) Inserts a new row at the specified row number. parameters name : RowNumber desc : The index to insert the new row at. Any rows at or beneath RowNumber are shifted downward to make room for the new row. If RowNumber is greater than the number of rows in the list (even as high as 2147483647), the new row is added to the end of the list. type : number name : Options desc : The row options to apply to the new row. See link for a list of available options. type : string default : \"\" link : link name : Cols desc : The columns of the new row, which can be text or numeric. If there are too few fields to fill all the columns, the columns at the end are left blank. If there are too many fields, the fields at the end are completely ignored. type : string|number meta : [variadic] return value desc : Returns 0 upon failure. Upon success, it returns the new row number, which is not necessarily the last row if the ListView has the Sort or SortDesc style. type : number link : link","title":"Insert"},{"location":"Classes/ListviewControl/#insertcol","text":"InsertCol ( ColumnNumber , Options := \"\" , ColumnTitle := \"\" ) Inserts a new column at the specified column number and shifting any other columns to the right to make room parameters name : ColumnNumber desc : The index to place the new column at. If ColumnNumber is larger than the number of columns currently in the control, the new column is added to the end of the list. type : number name : Options desc : The options to apply to the new column. The new column's attributes always start off at their defaults unless changed via Options . type : string default : \"\" link : link name : ColumnTitle desc : The title of the column. type : string default : \"\" return value desc : The index of the newly added column or 0 on failure. type : number link : link","title":"InsertCol"},{"location":"Classes/ListviewControl/#modify","text":"Modify ( RowNumber , Options := \"\" , NewCols * ) Modifies the attributes and/or text of a row. See link for details. parameters name : RowNumber desc : The index of the row to modify. If RowNumber is 0 , all rows in the control are modified. type : number name : Options desc : The row options to apply to the row. See link for a list of available options. type : string default : \"\" link : link name : NewCols desc : The optional new text to set each column to. type : string meta : [variadic] return value desc : Returns 1 upon success and 0 upon failure. If RowNumber is 0 then 1 is returned on complete success and 0 is returned if any part of the operation failed. type : number link : link","title":"Modify"},{"location":"Classes/ListviewControl/#modifycol","text":"ModifyCol ( ColumnNumber := Null , Options := Null , ColumnTitle := Null ) Modifies the attributes and/or text of the specified column and its header. If all parameters are omitted, the width of every column is adjusted to fit the contents of the rows. If only the first parameter is present, only the specified column is auto-sized. Auto-sizing has no effect when not in Report (Details) view. parameters name : ColumnNumber desc : The index of the column to modify. type : number default : Null name : Options desc : The options to apply to the column. type : string default : Null link : link name : ColumnTitle desc : The title of the column. type : string default : Null return value desc : Returns 1 upon success and 0 upon failure. type : number link : link","title":"ModifyCol"},{"location":"Classes/ListviewControl/#redraw","text":"Redraw ( bool ) Enables or disables redrawing of the GridGUI.ListviewControl . While redrawing is disabled then any changes to the rows or columns won't be shown in the GUI. Used to improve performance when performing lots of changes at once. parameters name : bool desc : Whether to enable or disable redrawing of the GridGUI.ListviewControl . type : bool","title":"Redraw"},{"location":"Classes/ListviewControl/#scrollto","text":"ScrollTo ( index := 0 , text := \"\" , partial := false ) Scrolls the ListView so that a given row index is visible, or so that a row with a given string is visible. parameters name : index desc : The row index to ensure the viability of. If index is negative then it will count from the bottom of the ListView . If text is true then index will be where the search is started from. See GridGUI.ListviewControl.FindItem . type : number default : 0 name : text desc : Ignored if left unset otherwise it is the text of the row that should be visible. See GridGUI.ListviewControl.FindItem . type : string default : \"\" name : partial desc : If text is true then partial is whether or not a complete match is need. See GridGUI.ListviewControl.FindItem . type : bool default : false link : link","title":"ScrollTo"},{"location":"Classes/ListviewControl/#setheaders","text":"SetHeaders ( headers ) Sets the column titles to the ones passed in the argument headers . The number of columns after this call will be equal to the length of headers , meaning that columns will be deleted or added as needed. parameters name : headers desc : An array of the new header titles to set. type : array","title":"SetHeaders"},{"location":"Classes/ListviewControl/#setimagelist","text":"SetImageList ( ImageListID , IconType := \"\" ) Sets or replaces an ImageList for displaying icons. See link for details. parameters name : ImageListID desc : The id of an image list returned from a previous call to IL_Create() . type : number name : IconType desc : The type of the icons in the image list. specify 0 for large icons, 1 for small icons, and 2 for state icons. If omitted, the type of icons in the ImageList is detected automatically as large or small. type : string default : \"\" return value desc : If successful, LV_SetImageList() returns the ImageListID that was previously associated with the ListView (or 0 if none). type : number link : link","title":"SetImageList"},{"location":"Classes/Position/","text":"Position Members h desc : The height of the square spanning the down from the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0 w desc : The width of the square spanning to the right of the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0 x desc : The x coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.x is the x coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : number y desc : The y coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.y is the y coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : number Methods __CompareX __CompareX ( pos ) Compares the relative position along the x-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : Positive values are the amount of overlap, negative values are the distance and zero mean that the ranges are touching. type : number __CompareY __CompareY ( pos ) Compares the relative position along the y-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : Positive values are the amount of overlap, negative values are the distance and zero mean that the ranges are touching. type : number __New __New ( x , y , w := 0 , h := 0 ) Constructor. parameters name : x desc : The x coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.x is the x coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : string|number|object name : y desc : The y coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.y is the y coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : string|number|object name : w desc : The width of the square spanning to the right of the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0 name : h desc : The height of the square spanning the down from the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0 return value desc : A new GridGUI.Position instance. type : GridGUI.Position __OneDimentionalCompare __OneDimentionalCompare ( min1 , max1 , min2 , max2 ) Compares the amount of overlap between two ranges. parameters name : min1 desc : The minimum of the first range. type : number name : max1 desc : The maximum of the first range. type : number name : min2 desc : The minimum of the second range. type : number name : max2 desc : The maximum of the second range. type : number return value desc : Positive values are the amount of overlap, negative values are the distance and zero mean that the ranges are touching. type : number __OverlapX __OverlapX ( pos ) Compares the amount of overlap along the x-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : The amount of overlap. type : number __OverlapY __OverlapY ( pos ) Compares the amount of overlap along the y-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : The amount of overlap. type : number Area Area () Calculates the area of the square with sides GridGUI.Position.w and GridGUI.Position.h . return value desc : The area. type : number Compare Compare ( pos ) Compares the relative position along the x-axis and the y-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : An array with the result of the two one dimensional comparisons. The result of the x-axis comparison is in index 1 and the result of the y-axis comparison is in index 2. type : array Contains Contains ( pos ) Check if a GridGUI.Position is contained within the area of this position. parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos was contained within this position. type : bool Copy Copy () Copy Constructor. return value desc : An identical copy of this position. type : GridGUI.Position Disjoint Disjoint ( pos ) Check if a GridGUI.Position does not touch this position. parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos touches this position. type : bool Equal Equal ( pos ) Check if a GridGUI.Position is identical to this position. parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : Whether or not pos is identical to this position. type : bool Intersect Intersect ( pos ) Check if a GridGUI.Position overlaps with this position, that is that at least one corner of one of the two GridGUI.Position is within the other GridGUI.Position . parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos intersects with this position type : bool Middle Middle () Calculates the middle of this position. return value desc : A new GridGUI.Position instance with GridGUI.Position.x and GridGUI.Position.y being the middle of this position. type : GridGUI.Position ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this position. type : string Touch Touch ( pos ) Check if a GridGUI.Position touches this position, but does not overlap with it. parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos is touching this position. type : bool","title":"Position"},{"location":"Classes/Position/#position","text":"","title":"Position"},{"location":"Classes/Position/#members","text":"","title":"Members"},{"location":"Classes/Position/#h","text":"desc : The height of the square spanning the down from the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0","title":"h"},{"location":"Classes/Position/#w","text":"desc : The width of the square spanning to the right of the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0","title":"w"},{"location":"Classes/Position/#x","text":"desc : The x coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.x is the x coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : number","title":"x"},{"location":"Classes/Position/#y","text":"desc : The y coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.y is the y coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : number","title":"y"},{"location":"Classes/Position/#methods","text":"","title":"Methods"},{"location":"Classes/Position/#__comparex","text":"__CompareX ( pos ) Compares the relative position along the x-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : Positive values are the amount of overlap, negative values are the distance and zero mean that the ranges are touching. type : number","title":"__CompareX"},{"location":"Classes/Position/#__comparey","text":"__CompareY ( pos ) Compares the relative position along the y-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : Positive values are the amount of overlap, negative values are the distance and zero mean that the ranges are touching. type : number","title":"__CompareY"},{"location":"Classes/Position/#__new","text":"__New ( x , y , w := 0 , h := 0 ) Constructor. parameters name : x desc : The x coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.x is the x coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : string|number|object name : y desc : The y coordinate of the position, if the optional GridGUI.Position.w and GridGUI.Position.h are non zero then GridGUI.Position.y is the y coordinate of the top left corner of the square spanning GridGUI.Position.w and GridGUI.Position.h down towards the right. type : string|number|object name : w desc : The width of the square spanning to the right of the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0 name : h desc : The height of the square spanning the down from the top left corner consisting of GridGUI.Position.x and GridGUI.Position.y . type : number default : 0 return value desc : A new GridGUI.Position instance. type : GridGUI.Position","title":"__New"},{"location":"Classes/Position/#__onedimentionalcompare","text":"__OneDimentionalCompare ( min1 , max1 , min2 , max2 ) Compares the amount of overlap between two ranges. parameters name : min1 desc : The minimum of the first range. type : number name : max1 desc : The maximum of the first range. type : number name : min2 desc : The minimum of the second range. type : number name : max2 desc : The maximum of the second range. type : number return value desc : Positive values are the amount of overlap, negative values are the distance and zero mean that the ranges are touching. type : number","title":"__OneDimentionalCompare"},{"location":"Classes/Position/#__overlapx","text":"__OverlapX ( pos ) Compares the amount of overlap along the x-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : The amount of overlap. type : number","title":"__OverlapX"},{"location":"Classes/Position/#__overlapy","text":"__OverlapY ( pos ) Compares the amount of overlap along the y-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : The amount of overlap. type : number","title":"__OverlapY"},{"location":"Classes/Position/#area","text":"Area () Calculates the area of the square with sides GridGUI.Position.w and GridGUI.Position.h . return value desc : The area. type : number","title":"Area"},{"location":"Classes/Position/#compare","text":"Compare ( pos ) Compares the relative position along the x-axis and the y-axis with another GridGUI.Position . parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : An array with the result of the two one dimensional comparisons. The result of the x-axis comparison is in index 1 and the result of the y-axis comparison is in index 2. type : array","title":"Compare"},{"location":"Classes/Position/#contains","text":"Contains ( pos ) Check if a GridGUI.Position is contained within the area of this position. parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos was contained within this position. type : bool","title":"Contains"},{"location":"Classes/Position/#copy","text":"Copy () Copy Constructor. return value desc : An identical copy of this position. type : GridGUI.Position","title":"Copy"},{"location":"Classes/Position/#disjoint","text":"Disjoint ( pos ) Check if a GridGUI.Position does not touch this position. parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos touches this position. type : bool","title":"Disjoint"},{"location":"Classes/Position/#equal","text":"Equal ( pos ) Check if a GridGUI.Position is identical to this position. parameters name : pos desc : The GridGUI.Position to compare with. type : GridGUI.Position return value desc : Whether or not pos is identical to this position. type : bool","title":"Equal"},{"location":"Classes/Position/#intersect","text":"Intersect ( pos ) Check if a GridGUI.Position overlaps with this position, that is that at least one corner of one of the two GridGUI.Position is within the other GridGUI.Position . parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos intersects with this position type : bool","title":"Intersect"},{"location":"Classes/Position/#middle","text":"Middle () Calculates the middle of this position. return value desc : A new GridGUI.Position instance with GridGUI.Position.x and GridGUI.Position.y being the middle of this position. type : GridGUI.Position","title":"Middle"},{"location":"Classes/Position/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this position. type : string","title":"ToStr"},{"location":"Classes/Position/#touch","text":"Touch ( pos ) Check if a GridGUI.Position touches this position, but does not overlap with it. parameters name : pos desc : The GridGUI.Position to perform the check on. type : GridGUI.Position return value desc : Whether or not pos is touching this position. type : bool","title":"Touch"},{"location":"Classes/RadioGroupControl/","text":"RadioGroupControl Members callback desc : A callback that will be called whenever a RadioButton in this RadioGroup is pressed, it is called with GridGUI.RadioGroupControl.Checked as an argument. If set to false the callback will be ignored. type : Func|BoundFunc|false default : false meta : [object] Checked desc : An object containing information on the most recently checked RadioButton . The object contains the index under the key \"index\" , the GridGUI.ArbitraryControl object under the key \"ctrl\" and the text of the RadioButton under the key \"text\" . type : object default : {} meta : [object] guiHwnd desc : The hwnd of the GUI that new RadioButton s will be added to if the guiHwnd parameter is not set when calling GridGUI.RadioGroupControl.New . type : hwnd RadioButtons desc : An array of the RadioButton s that are associated with this RadioGroup. type : array default : [] meta : [object] Methods __Callback __Callback ( ctrl ) An internal callback that is registered to all the RadioButton s of this RadioGroup. The callback is used to uncheck the RadioButton s what where not clicked, to update the GridGUI.RadioGroupControl.Checked member and to call the user defined callback GridGUI.RadioGroupControl.callback . parameters name : ctrl desc : The control object of the RadioButton that was clicked. type : GridGUI.ArbitraryControl __New __New ( guiHwnd , callback := false ) Constructor. parameters name : guiHwnd desc : The hwnd of the GUI that the RadioButton s that are added to this RadioGroup should be added to by default. type : hwnd name : callback desc : The callback that should be called whenever a RadioButton in this RadioGroup is pressed, it is called with GridGUI.RadioGroupControl.Checked as an argument. If set to false the callback will be ignored. type : Func|BoundFunc|false default : false meta : [object] return value desc : A new GridGUI.RadioGroupControl instance. type : GridGUI.RadioGroupControl Check Check ( index ) Checks a RadioButton in GridGUI.RadioGroupControl.RadioButtons by its index. parameters name : index desc : The index of the RadioButton to check. type : number New New ( options := \"\" , text := \"\" , guiHwnd := false ) Adds a new RadioButton to this RadioGroup and to a GUI. parameters name : options desc : The options that the RadioButton will be created with. Does not accept vVars and gLabels. type : string default : \"\" link : link name : text desc : The text that will be displayed next to the new RadioButton . type : string default : \"\" name : guiHwnd desc : The hwnd of the GUI that the new RadioButton will be added to. If left unset then the RadioButton will be added to GridGUI.RadioGroupControl.guiHwnd . type : bool default : false return value desc : The control object for the newly added RadioButton . type : GridGUI.ArbitraryControl","title":"RadioGroupControl"},{"location":"Classes/RadioGroupControl/#radiogroupcontrol","text":"","title":"RadioGroupControl"},{"location":"Classes/RadioGroupControl/#members","text":"","title":"Members"},{"location":"Classes/RadioGroupControl/#callback","text":"desc : A callback that will be called whenever a RadioButton in this RadioGroup is pressed, it is called with GridGUI.RadioGroupControl.Checked as an argument. If set to false the callback will be ignored. type : Func|BoundFunc|false default : false meta : [object]","title":"callback"},{"location":"Classes/RadioGroupControl/#checked","text":"desc : An object containing information on the most recently checked RadioButton . The object contains the index under the key \"index\" , the GridGUI.ArbitraryControl object under the key \"ctrl\" and the text of the RadioButton under the key \"text\" . type : object default : {} meta : [object]","title":"Checked"},{"location":"Classes/RadioGroupControl/#guihwnd","text":"desc : The hwnd of the GUI that new RadioButton s will be added to if the guiHwnd parameter is not set when calling GridGUI.RadioGroupControl.New . type : hwnd","title":"guiHwnd"},{"location":"Classes/RadioGroupControl/#radiobuttons","text":"desc : An array of the RadioButton s that are associated with this RadioGroup. type : array default : [] meta : [object]","title":"RadioButtons"},{"location":"Classes/RadioGroupControl/#methods","text":"","title":"Methods"},{"location":"Classes/RadioGroupControl/#__callback","text":"__Callback ( ctrl ) An internal callback that is registered to all the RadioButton s of this RadioGroup. The callback is used to uncheck the RadioButton s what where not clicked, to update the GridGUI.RadioGroupControl.Checked member and to call the user defined callback GridGUI.RadioGroupControl.callback . parameters name : ctrl desc : The control object of the RadioButton that was clicked. type : GridGUI.ArbitraryControl","title":"__Callback"},{"location":"Classes/RadioGroupControl/#__new","text":"__New ( guiHwnd , callback := false ) Constructor. parameters name : guiHwnd desc : The hwnd of the GUI that the RadioButton s that are added to this RadioGroup should be added to by default. type : hwnd name : callback desc : The callback that should be called whenever a RadioButton in this RadioGroup is pressed, it is called with GridGUI.RadioGroupControl.Checked as an argument. If set to false the callback will be ignored. type : Func|BoundFunc|false default : false meta : [object] return value desc : A new GridGUI.RadioGroupControl instance. type : GridGUI.RadioGroupControl","title":"__New"},{"location":"Classes/RadioGroupControl/#check","text":"Check ( index ) Checks a RadioButton in GridGUI.RadioGroupControl.RadioButtons by its index. parameters name : index desc : The index of the RadioButton to check. type : number","title":"Check"},{"location":"Classes/RadioGroupControl/#new","text":"New ( options := \"\" , text := \"\" , guiHwnd := false ) Adds a new RadioButton to this RadioGroup and to a GUI. parameters name : options desc : The options that the RadioButton will be created with. Does not accept vVars and gLabels. type : string default : \"\" link : link name : text desc : The text that will be displayed next to the new RadioButton . type : string default : \"\" name : guiHwnd desc : The hwnd of the GUI that the new RadioButton will be added to. If left unset then the RadioButton will be added to GridGUI.RadioGroupControl.guiHwnd . type : bool default : false return value desc : The control object for the newly added RadioButton . type : GridGUI.ArbitraryControl","title":"New"},{"location":"Classes/Row/","text":"Row Members catched desc : Whether or not the members have already been calculate. type : bool default : false cells desc : A collection of arrays of GridGUI.Cell s indexed by the index of the columns they are placed on. type : Associative Array default : {} meta : [object] confligtingExpanders desc : A collection of cells that have vertical expansion conflicts. type : Associative Array default : {} meta : [object, cached] expanderMaxValue desc : The largest vertical expansion weight in this row. type : number default : 0 meta : [cached] expanders desc : The sum of all the vertical expansion weights of cells that are in this row. type : number default : 0 meta : [cached] fixedWidth desc : The sum of the maximal fixed heights for each column, that is the sum of the largest fixed height for each array of overlapping cells in GridGUI.Column.cells . type : number default : 0 meta : [cached] index desc : The index of the row in the grid. type : number default : 0 minWidth desc : The sum of the maximal minimal heights for each column, that is the sum of the largest minimal height for each array of overlapping cells in GridGUI.Column.cells . type : number default : 0 meta : [cached] nonExpanders desc : The amount of cells with fixed size in this row. type : number default : 0 meta : [cached] Methods __CalculateConfligtingExpanders __CalculateConfligtingExpanders ( c ) Updates GridGUI.Row.confligtingExpanders with the GridGUI.Cell for a cell if it has vertical conflicts. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateExpanders __CalculateExpanders ( c ) Updates GridGUI.Row.expanders with the result of GridGUI.Cell.GetExpansionHeightValue for a cell. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateFixedHeight __CalculateFixedHeight ( c ) Updates GridGUI.Row.fixedHeight with the result of GridGUI.Cell.GetFixedHeight for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateMinHeight __CalculateMinHeight ( c ) Updates GridGUI.Row.minHeight with the result of GridGUI.Cell.GetNeededHeight for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __CalculateNonExpanders __CalculateNonExpanders ( c ) Increments GridGUI.Row.nonExpanders if the GridGUI.Cell does not expand vertically. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell __New __New ( index ) Constructor. parameters name : index desc : The index of the row in the grid. type : number return value desc : A new GridGUI.Row instance. type : GridGUI.Row __ResetConstants __ResetConstants () Resets the cached GridGUI.Row members to their default values. Add Add ( c ) Adds a GridGUI.Cell to the row. parameters name : c desc : The GridGUI.Cell to added to the row. type : GridGUI.Cell CalculateConstants CalculateConstants () Calculates the values for the GridGUI.Row members that are cached. CalculateHeight CalculateHeight ( height , expandersH , nonExpandersH , width , expandersW , nonExpandersW ) Calculates the height of the row. parameters name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : associative array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : associative array return value desc : The height of the row. type : number GetExpanderMaxValue GetExpanderMaxValue () Getter for GridGUI.Row.expanderMaxValue . return value desc : The largest vertical expansion weight of a cell in the row. type : number GetExpanders GetExpanders () Getter for GridGUI.Row.expanders . return value desc : The sum of vertical expansion weight of cells in the row. type : number GetFixedHeight GetFixedHeight () Getter for GridGUI.Row.fixedHeight . return value desc : The largest fixed height of a cell in the row. type : number GetMinHeight GetMinHeight () Getter for GridGUI.Row.minHeight . return value desc : The largest minimal height of a cell in the row. type : number GetNonExpanders GetNonExpanders () Getter for GridGUI.Row.nonExpanders . return value desc : The amount of cells with fixed height in the row. type : number Remove Remove ( c ) Removes a GridGUI.Cell from the row. parameters name : c desc : The GridGUI.Cell to remove from the row. type : GridGUI.Cell","title":"Row"},{"location":"Classes/Row/#row","text":"","title":"Row"},{"location":"Classes/Row/#members","text":"","title":"Members"},{"location":"Classes/Row/#catched","text":"desc : Whether or not the members have already been calculate. type : bool default : false","title":"catched"},{"location":"Classes/Row/#cells","text":"desc : A collection of arrays of GridGUI.Cell s indexed by the index of the columns they are placed on. type : Associative Array default : {} meta : [object]","title":"cells"},{"location":"Classes/Row/#confligtingexpanders","text":"desc : A collection of cells that have vertical expansion conflicts. type : Associative Array default : {} meta : [object, cached]","title":"confligtingExpanders"},{"location":"Classes/Row/#expandermaxvalue","text":"desc : The largest vertical expansion weight in this row. type : number default : 0 meta : [cached]","title":"expanderMaxValue"},{"location":"Classes/Row/#expanders","text":"desc : The sum of all the vertical expansion weights of cells that are in this row. type : number default : 0 meta : [cached]","title":"expanders"},{"location":"Classes/Row/#fixedwidth","text":"desc : The sum of the maximal fixed heights for each column, that is the sum of the largest fixed height for each array of overlapping cells in GridGUI.Column.cells . type : number default : 0 meta : [cached]","title":"fixedWidth"},{"location":"Classes/Row/#index","text":"desc : The index of the row in the grid. type : number default : 0","title":"index"},{"location":"Classes/Row/#minwidth","text":"desc : The sum of the maximal minimal heights for each column, that is the sum of the largest minimal height for each array of overlapping cells in GridGUI.Column.cells . type : number default : 0 meta : [cached]","title":"minWidth"},{"location":"Classes/Row/#nonexpanders","text":"desc : The amount of cells with fixed size in this row. type : number default : 0 meta : [cached]","title":"nonExpanders"},{"location":"Classes/Row/#methods","text":"","title":"Methods"},{"location":"Classes/Row/#__calculateconfligtingexpanders","text":"__CalculateConfligtingExpanders ( c ) Updates GridGUI.Row.confligtingExpanders with the GridGUI.Cell for a cell if it has vertical conflicts. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateConfligtingExpanders"},{"location":"Classes/Row/#__calculateexpanders","text":"__CalculateExpanders ( c ) Updates GridGUI.Row.expanders with the result of GridGUI.Cell.GetExpansionHeightValue for a cell. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateExpanders"},{"location":"Classes/Row/#__calculatefixedheight","text":"__CalculateFixedHeight ( c ) Updates GridGUI.Row.fixedHeight with the result of GridGUI.Cell.GetFixedHeight for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateFixedHeight"},{"location":"Classes/Row/#__calculateminheight","text":"__CalculateMinHeight ( c ) Updates GridGUI.Row.minHeight with the result of GridGUI.Cell.GetNeededHeight for a cell if it is larger than the previous value. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateMinHeight"},{"location":"Classes/Row/#__calculatenonexpanders","text":"__CalculateNonExpanders ( c ) Increments GridGUI.Row.nonExpanders if the GridGUI.Cell does not expand vertically. parameters name : c desc : The GridGUI.Cell to retrieve the value from. type : GridGUI.Cell","title":"__CalculateNonExpanders"},{"location":"Classes/Row/#__new","text":"__New ( index ) Constructor. parameters name : index desc : The index of the row in the grid. type : number return value desc : A new GridGUI.Row instance. type : GridGUI.Row","title":"__New"},{"location":"Classes/Row/#__resetconstants","text":"__ResetConstants () Resets the cached GridGUI.Row members to their default values.","title":"__ResetConstants"},{"location":"Classes/Row/#add","text":"Add ( c ) Adds a GridGUI.Cell to the row. parameters name : c desc : The GridGUI.Cell to added to the row. type : GridGUI.Cell","title":"Add"},{"location":"Classes/Row/#calculateconstants","text":"CalculateConstants () Calculates the values for the GridGUI.Row members that are cached.","title":"CalculateConstants"},{"location":"Classes/Row/#calculateheight","text":"CalculateHeight ( height , expandersH , nonExpandersH , width , expandersW , nonExpandersW ) Calculates the height of the row. parameters name : height desc : The unclaimed height of the grid, that is the height of the grid or subgrid left after removing the height of the fixed cells. type : number name : expandersH desc : An array of the sum of vertical expansion weights for each row. type : associative array name : nonExpandersH desc : An array of the amount of fixed size cells in each row. type : associative array name : width desc : The unclaimed width of the grid, that is the width of the GUI or subgrid left after removing the width of the fixed cells. type : number name : expandersW desc : An array of the sum of horizontal expansion weights for each column. type : associative array name : nonExpandersW desc : An array of the amount of fixed size cells in each column. type : associative array return value desc : The height of the row. type : number","title":"CalculateHeight"},{"location":"Classes/Row/#getexpandermaxvalue","text":"GetExpanderMaxValue () Getter for GridGUI.Row.expanderMaxValue . return value desc : The largest vertical expansion weight of a cell in the row. type : number","title":"GetExpanderMaxValue"},{"location":"Classes/Row/#getexpanders","text":"GetExpanders () Getter for GridGUI.Row.expanders . return value desc : The sum of vertical expansion weight of cells in the row. type : number","title":"GetExpanders"},{"location":"Classes/Row/#getfixedheight","text":"GetFixedHeight () Getter for GridGUI.Row.fixedHeight . return value desc : The largest fixed height of a cell in the row. type : number","title":"GetFixedHeight"},{"location":"Classes/Row/#getminheight","text":"GetMinHeight () Getter for GridGUI.Row.minHeight . return value desc : The largest minimal height of a cell in the row. type : number","title":"GetMinHeight"},{"location":"Classes/Row/#getnonexpanders","text":"GetNonExpanders () Getter for GridGUI.Row.nonExpanders . return value desc : The amount of cells with fixed height in the row. type : number","title":"GetNonExpanders"},{"location":"Classes/Row/#remove","text":"Remove ( c ) Removes a GridGUI.Cell from the row. parameters name : c desc : The GridGUI.Cell to remove from the row. type : GridGUI.Cell","title":"Remove"},{"location":"Classes/Rows/","text":"Rows Members catched desc : Whether or not the members have already been calculate. type : bool default : false expanders desc : A collection of the sum of vertical GridGUI.Cell expansion weights of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached] expandersMaxValue desc : A collection of the maximum vertical GridGUI.Cell expansion weight of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached] fixedHeights desc : A collection of the fixed height of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached] minHeights desc : A collection of the min height of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached] nonExpanders desc : A collection of the amount of vertically fixed GridGUI.Cell s in each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached] rows desc : A collection of the GridGUI.Row s where one or more GridGUI.Cell s have been placed. That is only used rows are generated. type : associative array default : {} meta : [object] Methods __New __New () Constructor. return value desc : A new GridGUI.Rows instance. type : GridGUI.Rows __ResetConstants __ResetConstants () Resets the cached GridGUI.Rows members to their default values. Add Add ( c ) Adds a GridGUI.Cell to the GridGUI.Row s that it spans over. If the GridGUI.Row s are not already in GridGUI.Rows.rows they are added before adding the cell. parameters name : c desc : The GridGUI.Cell to add to the GridGUI.Row s. type : GridGUI.Cell CalculateConstants CalculateConstants () Calculates the values for the GridGUI.Rows members that are cached. CalculateHeights CalculateHeights ( height , expandersH , nonExpandersH , width , expandersW , nonExpandersW ) Calculates the part of the available height that each GridGUI.Row in GridGUI.Rows.rows will get. parameters name : height desc : The height of the grid. That is the height that the grid should fill. type : number name : expandersH desc : The member GridGUI.Rows.expanders type : associative array name : nonExpandersH desc : The member GridGUI.Rows.nonExpanders type : associative array name : width desc : The unclaimed width of the grid. That is the width of the grid that is left after removing the width of the fixed cells. type : number name : expandersW desc : The member GridGUI.Columns.expanders type : associative array name : nonExpandersW desc : The member GridGUI.Columns.nonExpanders type : associative array return value desc : The calculated heights of the GridGUI.Row s in GridGUI.Rows.rows . type : associative array GetFixedHeight GetFixedHeight () Returns the sum of the fixed heights of the GridGUI.Row s in GridGUI.Rows.rows . return value desc : The sum of the fixed heights of the GridGUI.Row s in GridGUI.Rows.rows . type : number GetMinHeight GetMinHeight () Returns the sum of the minimal heights of the GridGUI.Row s in GridGUI.Rows.rows . return value desc : The sum of the minimal heights of the GridGUI.Row s in GridGUI.Rows.rows . type : number ReduceToGuiSize ReduceToGuiSize ( heights , expandedHeights , sumExpandedHeights , excessHeight ) Fixes miscalculations in the height of expanding GridGUI.Cell s by reducing their height down until they all fit in the available height or all have reach their min height. The reduction is done starting with the tallest GridGUI.Row to the shortest. parameters name : heights desc : The calculated heights for the GridGUI.Row s in GridGUI.Rows.rows . type : associative array name : expandedHeights desc : An array of the heights of GridGUI.Row s with one or more vertically expanding GridGUI.Cell if the current height in heights corresponding to the row is larger than the minimum of the row otherwise it wont be included in the expandedHeights type : array name : sumExpandedHeights desc : The sum of the heights in expandedHeights . type : number name : excessHeight desc : The amount of height that the sum of heights would exceed the height of the grid/gui. type : number Remove Remove ( c ) Removes a GridGUI.Cell from the GridGUI.Row s that it spans over. If the GridGUI.Row s are empty after removing the cell the row will be removed as well. parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.Row s. type : GridGUI.Cell","title":"Rows"},{"location":"Classes/Rows/#rows","text":"","title":"Rows"},{"location":"Classes/Rows/#members","text":"","title":"Members"},{"location":"Classes/Rows/#catched","text":"desc : Whether or not the members have already been calculate. type : bool default : false","title":"catched"},{"location":"Classes/Rows/#expanders","text":"desc : A collection of the sum of vertical GridGUI.Cell expansion weights of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached]","title":"expanders"},{"location":"Classes/Rows/#expandersmaxvalue","text":"desc : A collection of the maximum vertical GridGUI.Cell expansion weight of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached]","title":"expandersMaxValue"},{"location":"Classes/Rows/#fixedheights","text":"desc : A collection of the fixed height of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached]","title":"fixedHeights"},{"location":"Classes/Rows/#minheights","text":"desc : A collection of the min height of each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached]","title":"minHeights"},{"location":"Classes/Rows/#nonexpanders","text":"desc : A collection of the amount of vertically fixed GridGUI.Cell s in each GridGUI.Row in GridGUI.Rows.rows . type : associative array default : {} meta : [object, cached]","title":"nonExpanders"},{"location":"Classes/Rows/#rows_1","text":"desc : A collection of the GridGUI.Row s where one or more GridGUI.Cell s have been placed. That is only used rows are generated. type : associative array default : {} meta : [object]","title":"rows"},{"location":"Classes/Rows/#methods","text":"","title":"Methods"},{"location":"Classes/Rows/#__new","text":"__New () Constructor. return value desc : A new GridGUI.Rows instance. type : GridGUI.Rows","title":"__New"},{"location":"Classes/Rows/#__resetconstants","text":"__ResetConstants () Resets the cached GridGUI.Rows members to their default values.","title":"__ResetConstants"},{"location":"Classes/Rows/#add","text":"Add ( c ) Adds a GridGUI.Cell to the GridGUI.Row s that it spans over. If the GridGUI.Row s are not already in GridGUI.Rows.rows they are added before adding the cell. parameters name : c desc : The GridGUI.Cell to add to the GridGUI.Row s. type : GridGUI.Cell","title":"Add"},{"location":"Classes/Rows/#calculateconstants","text":"CalculateConstants () Calculates the values for the GridGUI.Rows members that are cached.","title":"CalculateConstants"},{"location":"Classes/Rows/#calculateheights","text":"CalculateHeights ( height , expandersH , nonExpandersH , width , expandersW , nonExpandersW ) Calculates the part of the available height that each GridGUI.Row in GridGUI.Rows.rows will get. parameters name : height desc : The height of the grid. That is the height that the grid should fill. type : number name : expandersH desc : The member GridGUI.Rows.expanders type : associative array name : nonExpandersH desc : The member GridGUI.Rows.nonExpanders type : associative array name : width desc : The unclaimed width of the grid. That is the width of the grid that is left after removing the width of the fixed cells. type : number name : expandersW desc : The member GridGUI.Columns.expanders type : associative array name : nonExpandersW desc : The member GridGUI.Columns.nonExpanders type : associative array return value desc : The calculated heights of the GridGUI.Row s in GridGUI.Rows.rows . type : associative array","title":"CalculateHeights"},{"location":"Classes/Rows/#getfixedheight","text":"GetFixedHeight () Returns the sum of the fixed heights of the GridGUI.Row s in GridGUI.Rows.rows . return value desc : The sum of the fixed heights of the GridGUI.Row s in GridGUI.Rows.rows . type : number","title":"GetFixedHeight"},{"location":"Classes/Rows/#getminheight","text":"GetMinHeight () Returns the sum of the minimal heights of the GridGUI.Row s in GridGUI.Rows.rows . return value desc : The sum of the minimal heights of the GridGUI.Row s in GridGUI.Rows.rows . type : number","title":"GetMinHeight"},{"location":"Classes/Rows/#reducetoguisize","text":"ReduceToGuiSize ( heights , expandedHeights , sumExpandedHeights , excessHeight ) Fixes miscalculations in the height of expanding GridGUI.Cell s by reducing their height down until they all fit in the available height or all have reach their min height. The reduction is done starting with the tallest GridGUI.Row to the shortest. parameters name : heights desc : The calculated heights for the GridGUI.Row s in GridGUI.Rows.rows . type : associative array name : expandedHeights desc : An array of the heights of GridGUI.Row s with one or more vertically expanding GridGUI.Cell if the current height in heights corresponding to the row is larger than the minimum of the row otherwise it wont be included in the expandedHeights type : array name : sumExpandedHeights desc : The sum of the heights in expandedHeights . type : number name : excessHeight desc : The amount of height that the sum of heights would exceed the height of the grid/gui. type : number","title":"ReduceToGuiSize"},{"location":"Classes/Rows/#remove","text":"Remove ( c ) Removes a GridGUI.Cell from the GridGUI.Row s that it spans over. If the GridGUI.Row s are empty after removing the cell the row will be removed as well. parameters name : c desc : The GridGUI.Cell to remove from the GridGUI.Row s. type : GridGUI.Cell","title":"Remove"},{"location":"Classes/StatusBarControl/","text":"StatusBarControl Members gui desc : The parent GUI of the StatusBar . type : GridGUI.GUI meta : [object] Methods __New __New ( guiHwnd , options := \"\" , text := \"\" ) Constructor. parameters name : guiHwnd desc : The hwnd of the GUI that the StatusBar should be added to. type : hwnd name : options desc : The options that the StatusBar will be created with. Does not accept vVars. type : string default : \"\" link : link name : text desc : The text that the StatusBar will be created with. type : string default : \"\" return value desc : A new GridGUI.StatusBarControl instance. type : GridGUI.StatusBarControl __ResetDefaultGui __ResetDefaultGui ( previous ) Sets the default GUI . Used to restore the old default GUI , so that using the methods of the class won't have any side effects. parameters name : previous desc : The hwnd that should be set as the default GUI type : string|number|object __SetDefaultGui __SetDefaultGui () Sets the default GUI to GridGUI.StatusBarControl.gui so that the SB_Functions work on the right StatusBar . return value desc : The hwnd of the previous default GUI type : hwnd SetIcon SetIcon ( Filename , IconNumber := 1 , PartNumber := 1 ) Displays a small icon to the left of the text in the specified part. See link for details. parameters name : Filename desc : The path to an icon resource, can be any of the following formats ico , cur , ani , exe , dll , cpl and scr . See link for details. type : string|Image-Handle name : IconNumber desc : The icon index in the file pointed to by Filename . See link for details. type : number default : 1 name : PartNumber desc : The part of the StatusBar to put the icon in. type : number default : 1 return value desc : The handle to the icon that was added or 0 on failure. type : HICON link : link SetParts SetParts ( Widths * ) Divides the bar into multiple sections according to the specified widths (in pixels). parameters name : Widths desc : The widths of the parts of the StatusBar except for the last part as it will fill the remaining width of the GUI . If no widths are provided then the StatusBar will have only one part that has the width of the GUI . type : number meta : [variadic] return value desc : The hwnd of the StatusBar or 0 upon failure. type : hwnd link : link SetText SetText ( NewText , PartNumber := 1 , Style := 0 ) Sets the text in the specified part of the StatusBar . parameters name : NewText desc : The text to change a part of the StatusBar to. type : string name : PartNumber desc : The number of the part of the StatusBar to change the text of. type : number default : 1 name : Style desc : Specify 0 for a traditional border that makes that part of the bar look sunken. Specify 1 to have no border or 2 to have border that makes that part of the bar look raised. type : number default : 0 return value desc : Returns 1 upon success or 0 upon failure. type : bool link : link","title":"StatusBarControl"},{"location":"Classes/StatusBarControl/#statusbarcontrol","text":"","title":"StatusBarControl"},{"location":"Classes/StatusBarControl/#members","text":"","title":"Members"},{"location":"Classes/StatusBarControl/#gui","text":"desc : The parent GUI of the StatusBar . type : GridGUI.GUI meta : [object]","title":"gui"},{"location":"Classes/StatusBarControl/#methods","text":"","title":"Methods"},{"location":"Classes/StatusBarControl/#__new","text":"__New ( guiHwnd , options := \"\" , text := \"\" ) Constructor. parameters name : guiHwnd desc : The hwnd of the GUI that the StatusBar should be added to. type : hwnd name : options desc : The options that the StatusBar will be created with. Does not accept vVars. type : string default : \"\" link : link name : text desc : The text that the StatusBar will be created with. type : string default : \"\" return value desc : A new GridGUI.StatusBarControl instance. type : GridGUI.StatusBarControl","title":"__New"},{"location":"Classes/StatusBarControl/#__resetdefaultgui","text":"__ResetDefaultGui ( previous ) Sets the default GUI . Used to restore the old default GUI , so that using the methods of the class won't have any side effects. parameters name : previous desc : The hwnd that should be set as the default GUI type : string|number|object","title":"__ResetDefaultGui"},{"location":"Classes/StatusBarControl/#__setdefaultgui","text":"__SetDefaultGui () Sets the default GUI to GridGUI.StatusBarControl.gui so that the SB_Functions work on the right StatusBar . return value desc : The hwnd of the previous default GUI type : hwnd","title":"__SetDefaultGui"},{"location":"Classes/StatusBarControl/#seticon","text":"SetIcon ( Filename , IconNumber := 1 , PartNumber := 1 ) Displays a small icon to the left of the text in the specified part. See link for details. parameters name : Filename desc : The path to an icon resource, can be any of the following formats ico , cur , ani , exe , dll , cpl and scr . See link for details. type : string|Image-Handle name : IconNumber desc : The icon index in the file pointed to by Filename . See link for details. type : number default : 1 name : PartNumber desc : The part of the StatusBar to put the icon in. type : number default : 1 return value desc : The handle to the icon that was added or 0 on failure. type : HICON link : link","title":"SetIcon"},{"location":"Classes/StatusBarControl/#setparts","text":"SetParts ( Widths * ) Divides the bar into multiple sections according to the specified widths (in pixels). parameters name : Widths desc : The widths of the parts of the StatusBar except for the last part as it will fill the remaining width of the GUI . If no widths are provided then the StatusBar will have only one part that has the width of the GUI . type : number meta : [variadic] return value desc : The hwnd of the StatusBar or 0 upon failure. type : hwnd link : link","title":"SetParts"},{"location":"Classes/StatusBarControl/#settext","text":"SetText ( NewText , PartNumber := 1 , Style := 0 ) Sets the text in the specified part of the StatusBar . parameters name : NewText desc : The text to change a part of the StatusBar to. type : string name : PartNumber desc : The number of the part of the StatusBar to change the text of. type : number default : 1 name : Style desc : Specify 0 for a traditional border that makes that part of the bar look sunken. Specify 1 to have no border or 2 to have border that makes that part of the bar look raised. type : number default : 0 return value desc : Returns 1 upon success or 0 upon failure. type : bool link : link","title":"SetText"},{"location":"Classes/SubGrid/","text":"SubGrid Members DPIScale desc : Whether or not to change the size of controls based on DPI. Needed since a subgrid does not make its own gui to handle the gui options. type : bool meta : [const] hwnd desc : The hwnd of the gui that the GridGUI.SubGrid adds controls to when calling GridGUI.GridGUIClass.Add and GridGUI.GridGUIClass.AddControl . Needed since a subgrid does not make its own gui. type : hwnd minHeight desc : Whether or not to restrict the min height of the subgrid to GridGUI.SubGrid.minHeightVal . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : bool default : false minHeightVal desc : The min height of the GridGUI.SubGrid . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : number default : 0 minWidth desc : Whether or not to restrict the min width of the subgrid to GridGUI.SubGrid.minWidthVal . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : bool default : false minWidthVal desc : The min width of the GridGUI.SubGrid . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : number default : 0 pos desc : The position of the subgrid. Needed since a subgrid does not make its own gui and thus do not have the gui event callbacks. type : GridGUI.Position default : GridGUI.Position(0, 0, 0, 0) meta : [object] Methods __Init __Init ( area ) Sets the min size of the subgrid and initialises the members that are required when managed by a GridGUI.Cell instance. parameters name : area desc : The minimum area that the subgrid will have. type : GridGUI.Position __New __New ( guiHwnd , area := false , DPIScale := true , showGrid := false , justify := false ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GridGUI.SubGrid adds controls to when calling GridGUI.GridGUIClass.Add and GridGUI.GridGUIClass.AddControl . Needed since a subgrid does not make its own gui. type : hwnd name : area desc : The minimum area that the subgrid will have. type : GridGUI.Position |bool default : false name : DPIScale desc : Whether or not to change the size of controls based on DPI. Needed since a subgrid does not make its own gui to handle the gui options. type : bool default : true name : showGrid desc : Whether or not to show a debug grid for the GridGUI.Cell s that where placed in the GridGUI.SubGrid.grid ](../SubGrid/#grid) before [ GridGUI.SubGrid.Draw` was called the first time. type : bool default : false name : justify desc : The position of the controls with in the grid, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string|false default : false return value desc : Returns a new instance of GridGUI.SubGrid . type : GridGUI.SubGrid Draw Draw ( area ) Stores the area in GridGUI.SubGrid.pos and calculates the new positions of the controls in the subgrid based on the settings of their GridGUI.Cell and moved them to their new positions. parameters name : area desc : The area that the controls in the grid will be sized to fit into if possible. type : GridGUI.Position GetPos GetPos () Retrieves the position of the subgrid. Needed in providing the interface required to be managed by a GridGUI.Cell instance. return value desc : The last position that GridGUI.SubGrid.Draw was called with. type : GridGUI.Position MinSize MinSize ( w , h ) Sets the minimum size of the subgrid. The min size is used by a GridGUI.Cell to determin the cells size. parameters name : w desc : The minimal width of the subgrid, if left empty the current min width won't be changed unless both parameters are left empty in which case the min width will be set to the current width of the subgrid. type : number|\"\" name : h desc : The minimal height of the subgrid, if left empty the current min height won't be changed unless both parameters are left empty in which case the min height will be set to the current height of the subgrid. type : number|\"\"","title":"SubGrid"},{"location":"Classes/SubGrid/#subgrid","text":"","title":"SubGrid"},{"location":"Classes/SubGrid/#members","text":"","title":"Members"},{"location":"Classes/SubGrid/#dpiscale","text":"desc : Whether or not to change the size of controls based on DPI. Needed since a subgrid does not make its own gui to handle the gui options. type : bool meta : [const]","title":"DPIScale"},{"location":"Classes/SubGrid/#hwnd","text":"desc : The hwnd of the gui that the GridGUI.SubGrid adds controls to when calling GridGUI.GridGUIClass.Add and GridGUI.GridGUIClass.AddControl . Needed since a subgrid does not make its own gui. type : hwnd","title":"hwnd"},{"location":"Classes/SubGrid/#minheight","text":"desc : Whether or not to restrict the min height of the subgrid to GridGUI.SubGrid.minHeightVal . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : bool default : false","title":"minHeight"},{"location":"Classes/SubGrid/#minheightval","text":"desc : The min height of the GridGUI.SubGrid . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : number default : 0","title":"minHeightVal"},{"location":"Classes/SubGrid/#minwidth","text":"desc : Whether or not to restrict the min width of the subgrid to GridGUI.SubGrid.minWidthVal . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : bool default : false","title":"minWidth"},{"location":"Classes/SubGrid/#minwidthval","text":"desc : The min width of the GridGUI.SubGrid . Needed in providing the interface required to be managed by a GridGUI.Cell instance. type : number default : 0","title":"minWidthVal"},{"location":"Classes/SubGrid/#pos","text":"desc : The position of the subgrid. Needed since a subgrid does not make its own gui and thus do not have the gui event callbacks. type : GridGUI.Position default : GridGUI.Position(0, 0, 0, 0) meta : [object]","title":"pos"},{"location":"Classes/SubGrid/#methods","text":"","title":"Methods"},{"location":"Classes/SubGrid/#__init","text":"__Init ( area ) Sets the min size of the subgrid and initialises the members that are required when managed by a GridGUI.Cell instance. parameters name : area desc : The minimum area that the subgrid will have. type : GridGUI.Position","title":"__Init"},{"location":"Classes/SubGrid/#__new","text":"__New ( guiHwnd , area := false , DPIScale := true , showGrid := false , justify := false ) Constructor. parameters name : guiHwnd desc : The hwnd of the gui that the GridGUI.SubGrid adds controls to when calling GridGUI.GridGUIClass.Add and GridGUI.GridGUIClass.AddControl . Needed since a subgrid does not make its own gui. type : hwnd name : area desc : The minimum area that the subgrid will have. type : GridGUI.Position |bool default : false name : DPIScale desc : Whether or not to change the size of controls based on DPI. Needed since a subgrid does not make its own gui to handle the gui options. type : bool default : true name : showGrid desc : Whether or not to show a debug grid for the GridGUI.Cell s that where placed in the GridGUI.SubGrid.grid ](../SubGrid/#grid) before [ GridGUI.SubGrid.Draw` was called the first time. type : bool default : false name : justify desc : The position of the controls with in the grid, can be any combination of C (Center), N (North), S (South), W (West) and E (East). type : string|false default : false return value desc : Returns a new instance of GridGUI.SubGrid . type : GridGUI.SubGrid","title":"__New"},{"location":"Classes/SubGrid/#draw","text":"Draw ( area ) Stores the area in GridGUI.SubGrid.pos and calculates the new positions of the controls in the subgrid based on the settings of their GridGUI.Cell and moved them to their new positions. parameters name : area desc : The area that the controls in the grid will be sized to fit into if possible. type : GridGUI.Position","title":"Draw"},{"location":"Classes/SubGrid/#getpos","text":"GetPos () Retrieves the position of the subgrid. Needed in providing the interface required to be managed by a GridGUI.Cell instance. return value desc : The last position that GridGUI.SubGrid.Draw was called with. type : GridGUI.Position","title":"GetPos"},{"location":"Classes/SubGrid/#minsize","text":"MinSize ( w , h ) Sets the minimum size of the subgrid. The min size is used by a GridGUI.Cell to determin the cells size. parameters name : w desc : The minimal width of the subgrid, if left empty the current min width won't be changed unless both parameters are left empty in which case the min width will be set to the current width of the subgrid. type : number|\"\" name : h desc : The minimal height of the subgrid, if left empty the current min height won't be changed unless both parameters are left empty in which case the min height will be set to the current height of the subgrid. type : number|\"\"","title":"MinSize"},{"location":"Classes/Tab/","text":"Tab Methods __New __New ( guiHwnd , index , tabName , DPIScale := true , showGrid := false ) parameters name : guiHwnd desc : type : string|number|object link : link name : index desc : type : string|number|object link : link name : tabName desc : type : string|number|object link : link name : DPIScale desc : type : bool default : true link : link name : showGrid desc : type : bool default : false link : link return value desc : type : Add Add ( x , y , type , options := \"\" , text := \"\" , exW := 0 , exH := 0 , fillW := 0 , fillH := 0 , justify := C ) parameters name : x desc : type : string|number|object link : link name : y desc : type : string|number|object link : link name : type desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link name : text desc : type : string default : \"\" link : link name : exW desc : type : number default : 0 link : link name : exH desc : type : number default : 0 link : link name : fillW desc : type : number default : 0 link : link name : fillH desc : type : number default : 0 link : link name : justify desc : type : string default : C link : link return value desc : type : AddControl AddControl ( x , y , ctrl , exW := 0 , exH := 0 , fillW := 0 , fillH := 0 , justify := C ) parameters name : x desc : type : string|number|object link : link name : y desc : type : string|number|object link : link name : ctrl desc : type : string|number|object link : link name : exW desc : type : number default : 0 link : link name : exH desc : type : number default : 0 link : link name : fillW desc : type : number default : 0 link : link name : fillH desc : type : number default : 0 link : link name : justify desc : type : string default : C link : link return value desc : type : Draw Draw ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type :","title":"Tab"},{"location":"Classes/Tab/#tab","text":"","title":"Tab"},{"location":"Classes/Tab/#methods","text":"","title":"Methods"},{"location":"Classes/Tab/#__new","text":"__New ( guiHwnd , index , tabName , DPIScale := true , showGrid := false ) parameters name : guiHwnd desc : type : string|number|object link : link name : index desc : type : string|number|object link : link name : tabName desc : type : string|number|object link : link name : DPIScale desc : type : bool default : true link : link name : showGrid desc : type : bool default : false link : link return value desc : type :","title":"__New"},{"location":"Classes/Tab/#add","text":"Add ( x , y , type , options := \"\" , text := \"\" , exW := 0 , exH := 0 , fillW := 0 , fillH := 0 , justify := C ) parameters name : x desc : type : string|number|object link : link name : y desc : type : string|number|object link : link name : type desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link name : text desc : type : string default : \"\" link : link name : exW desc : type : number default : 0 link : link name : exH desc : type : number default : 0 link : link name : fillW desc : type : number default : 0 link : link name : fillH desc : type : number default : 0 link : link name : justify desc : type : string default : C link : link return value desc : type :","title":"Add"},{"location":"Classes/Tab/#addcontrol","text":"AddControl ( x , y , ctrl , exW := 0 , exH := 0 , fillW := 0 , fillH := 0 , justify := C ) parameters name : x desc : type : string|number|object link : link name : y desc : type : string|number|object link : link name : ctrl desc : type : string|number|object link : link name : exW desc : type : number default : 0 link : link name : exH desc : type : number default : 0 link : link name : fillW desc : type : number default : 0 link : link name : fillH desc : type : number default : 0 link : link name : justify desc : type : string default : C link : link return value desc : type :","title":"AddControl"},{"location":"Classes/Tab/#draw","text":"Draw ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type :","title":"Draw"},{"location":"Classes/TabControl/","text":"TabControl Methods __New __New ( guiHwnd , options := \"\" , text := \"\" , preDrawOtherTabs := true , DPIScale := true , showGrid := false ) parameters name : guiHwnd desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link name : text desc : type : string default : \"\" link : link name : preDrawOtherTabs desc : type : bool default : true link : link name : DPIScale desc : type : bool default : true link : link name : showGrid desc : type : bool default : false link : link return value desc : type : __ParseTabLst __ParseTabLst ( tablst ) parameters name : tablst desc : type : string|number|object link : link return value desc : type : Draw Draw ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type : DrawSelectedTab DrawSelectedTab () return value desc : type : GetDisplayArea GetDisplayArea () return value desc : type : Classes Tab","title":"TabControl"},{"location":"Classes/TabControl/#tabcontrol","text":"","title":"TabControl"},{"location":"Classes/TabControl/#methods","text":"","title":"Methods"},{"location":"Classes/TabControl/#__new","text":"__New ( guiHwnd , options := \"\" , text := \"\" , preDrawOtherTabs := true , DPIScale := true , showGrid := false ) parameters name : guiHwnd desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link name : text desc : type : string default : \"\" link : link name : preDrawOtherTabs desc : type : bool default : true link : link name : DPIScale desc : type : bool default : true link : link name : showGrid desc : type : bool default : false link : link return value desc : type :","title":"__New"},{"location":"Classes/TabControl/#__parsetablst","text":"__ParseTabLst ( tablst ) parameters name : tablst desc : type : string|number|object link : link return value desc : type :","title":"__ParseTabLst"},{"location":"Classes/TabControl/#draw","text":"Draw ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type :","title":"Draw"},{"location":"Classes/TabControl/#drawselectedtab","text":"DrawSelectedTab () return value desc : type :","title":"DrawSelectedTab"},{"location":"Classes/TabControl/#getdisplayarea","text":"GetDisplayArea () return value desc : type :","title":"GetDisplayArea"},{"location":"Classes/TabControl/#classes","text":"Tab","title":"Classes"},{"location":"Classes/TreeviewControl/","text":"TreeviewControl Methods __New __New ( guiHwnd , options := \"\" ) parameters name : guiHwnd desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link return value desc : type : __ResetCurrentTV __ResetCurrentTV ( previous ) parameters name : previous desc : type : string|number|object link : link return value desc : type : __SetCurrentTV __SetCurrentTV () return value desc : type : Add Add ( Name , ParentItemID := \"\" , Options := \"\" ) parameters name : Name desc : type : string|number|object link : link name : ParentItemID desc : type : string default : \"\" link : link name : Options desc : type : string default : \"\" link : link return value desc : type : Delete Delete ( ItemID := \"\" ) parameters name : ItemID desc : type : string default : \"\" link : link return value desc : type : Get Get ( ItemID , Attribute ) parameters name : ItemID desc : type : string|number|object link : link name : Attribute desc : type : string|number|object link : link return value desc : type : GetChild GetChild ( ParentItemID ) parameters name : ParentItemID desc : type : string|number|object link : link return value desc : type : GetCount GetCount () return value desc : type : GetNext GetNext ( ItemID := \"\" , ItemType := \"\" ) parameters name : ItemID desc : type : string default : \"\" link : link name : ItemType desc : type : string default : \"\" link : link return value desc : type : GetParent GetParent ( ItemID ) parameters name : ItemID desc : type : string|number|object link : link return value desc : type : GetPrev GetPrev ( ItemID ) parameters name : ItemID desc : type : string|number|object link : link return value desc : type : GetSelection GetSelection () return value desc : type : GetText GetText ( ByRef := OutputVar , ItemID ) parameters name : ByRef desc : type : string default : OutputVar link : link name : ItemID desc : type : string|number|object link : link return value desc : type : Redraw Redraw ( bool ) parameters name : bool desc : type : string|number|object link : link return value desc : type : SetImageList SetImageList ( ImageListID , IconType := \"\" ) parameters name : ImageListID desc : type : string|number|object link : link name : IconType desc : type : string default : \"\" link : link return value desc : type :","title":"TreeviewControl"},{"location":"Classes/TreeviewControl/#treeviewcontrol","text":"","title":"TreeviewControl"},{"location":"Classes/TreeviewControl/#methods","text":"","title":"Methods"},{"location":"Classes/TreeviewControl/#__new","text":"__New ( guiHwnd , options := \"\" ) parameters name : guiHwnd desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link return value desc : type :","title":"__New"},{"location":"Classes/TreeviewControl/#__resetcurrenttv","text":"__ResetCurrentTV ( previous ) parameters name : previous desc : type : string|number|object link : link return value desc : type :","title":"__ResetCurrentTV"},{"location":"Classes/TreeviewControl/#__setcurrenttv","text":"__SetCurrentTV () return value desc : type :","title":"__SetCurrentTV"},{"location":"Classes/TreeviewControl/#add","text":"Add ( Name , ParentItemID := \"\" , Options := \"\" ) parameters name : Name desc : type : string|number|object link : link name : ParentItemID desc : type : string default : \"\" link : link name : Options desc : type : string default : \"\" link : link return value desc : type :","title":"Add"},{"location":"Classes/TreeviewControl/#delete","text":"Delete ( ItemID := \"\" ) parameters name : ItemID desc : type : string default : \"\" link : link return value desc : type :","title":"Delete"},{"location":"Classes/TreeviewControl/#get","text":"Get ( ItemID , Attribute ) parameters name : ItemID desc : type : string|number|object link : link name : Attribute desc : type : string|number|object link : link return value desc : type :","title":"Get"},{"location":"Classes/TreeviewControl/#getchild","text":"GetChild ( ParentItemID ) parameters name : ParentItemID desc : type : string|number|object link : link return value desc : type :","title":"GetChild"},{"location":"Classes/TreeviewControl/#getcount","text":"GetCount () return value desc : type :","title":"GetCount"},{"location":"Classes/TreeviewControl/#getnext","text":"GetNext ( ItemID := \"\" , ItemType := \"\" ) parameters name : ItemID desc : type : string default : \"\" link : link name : ItemType desc : type : string default : \"\" link : link return value desc : type :","title":"GetNext"},{"location":"Classes/TreeviewControl/#getparent","text":"GetParent ( ItemID ) parameters name : ItemID desc : type : string|number|object link : link return value desc : type :","title":"GetParent"},{"location":"Classes/TreeviewControl/#getprev","text":"GetPrev ( ItemID ) parameters name : ItemID desc : type : string|number|object link : link return value desc : type :","title":"GetPrev"},{"location":"Classes/TreeviewControl/#getselection","text":"GetSelection () return value desc : type :","title":"GetSelection"},{"location":"Classes/TreeviewControl/#gettext","text":"GetText ( ByRef := OutputVar , ItemID ) parameters name : ByRef desc : type : string default : OutputVar link : link name : ItemID desc : type : string|number|object link : link return value desc : type :","title":"GetText"},{"location":"Classes/TreeviewControl/#redraw","text":"Redraw ( bool ) parameters name : bool desc : type : string|number|object link : link return value desc : type :","title":"Redraw"},{"location":"Classes/TreeviewControl/#setimagelist","text":"SetImageList ( ImageListID , IconType := \"\" ) parameters name : ImageListID desc : type : string|number|object link : link name : IconType desc : type : string default : \"\" link : link return value desc : type :","title":"SetImageList"},{"location":"Classes/Util/","text":"Util Methods AddZeros AddZeros ( z ) parameters name : z desc : type : string|number|object return value desc : type : BGRtoRGB BGRtoRGB ( oldValue ) parameters name : oldValue desc : type : string|number|object return value desc : type : ByExH ByExH ( c ) parameters name : c desc : type : GridGUI.Cell return value desc : type : ByExW ByExW ( c ) parameters name : c desc : type : GridGUI.Cell return value desc : type : BySecoundValue BySecoundValue ( lst ) parameters name : lst desc : type : string|number|object return value desc : type : BySize BySize ( pos ) parameters name : pos desc : type : GridGUI.Position return value desc : type : ConvertStObjToObjOfStr ConvertStObjToObjOfStr ( obj ) parameters name : obj desc : type : string|number|object return value desc : type : DPIScale DPIScale ( pos , enlarge := true ) parameters name : pos desc : type : GridGUI.Position name : enlarge desc : type : bool default : true return value desc : type : FindIndex FindIndex ( lst , val , fun := false ) parameters name : lst desc : type : string|number|object name : val desc : type : string|number|object name : fun desc : type : Func|BoundFunc|false default : false return value desc : type : GetSizeByLimitingSide GetSizeByLimitingSide ( pos , ratio ) parameters name : pos desc : type : GridGUI.Position name : ratio desc : type : number return value desc : type : GridGUI.Position Join Join ( sep , params ) parameters name : sep desc : type : string name : params desc : type : array return value desc : type : string Justify Justify ( justifyOptions , area , pos , border ) parameters name : justifyOptions desc : type : string name : area desc : type : GridGUI.Position name : pos desc : type : GridGUI.Position name : border desc : type : GridGUI.Position return value desc : type : GridGUI.Position JustifyCenter JustifyCenter ( area , pos ) parameters name : area desc : type : GridGUI.Position name : pos desc : type : GridGUI.Position return value desc : type : GridGUI.Position prettyPrint prettyPrint ( str ) parameters name : str desc : type : string|number|object return value desc : type : RemoveValue RemoveValue ( lst , val , fun := false ) parameters name : lst desc : type : string|number|object name : val desc : type : string|number|object name : fun desc : type : Func|BoundFunc|false default : false return value desc : type : RGBtoBGR RGBtoBGR ( oldValue ) parameters name : oldValue desc : type : string|number|object return value desc : type : Sort Sort ( obj , fun ) parameters name : obj desc : type : string|number|object name : fun desc : type : Func|BoundFunc return value desc : type : Sum Sum ( obj ) parameters name : obj desc : type : string|number|object return value desc : type :","title":"Util"},{"location":"Classes/Util/#util","text":"","title":"Util"},{"location":"Classes/Util/#methods","text":"","title":"Methods"},{"location":"Classes/Util/#addzeros","text":"AddZeros ( z ) parameters name : z desc : type : string|number|object return value desc : type :","title":"AddZeros"},{"location":"Classes/Util/#bgrtorgb","text":"BGRtoRGB ( oldValue ) parameters name : oldValue desc : type : string|number|object return value desc : type :","title":"BGRtoRGB"},{"location":"Classes/Util/#byexh","text":"ByExH ( c ) parameters name : c desc : type : GridGUI.Cell return value desc : type :","title":"ByExH"},{"location":"Classes/Util/#byexw","text":"ByExW ( c ) parameters name : c desc : type : GridGUI.Cell return value desc : type :","title":"ByExW"},{"location":"Classes/Util/#bysecoundvalue","text":"BySecoundValue ( lst ) parameters name : lst desc : type : string|number|object return value desc : type :","title":"BySecoundValue"},{"location":"Classes/Util/#bysize","text":"BySize ( pos ) parameters name : pos desc : type : GridGUI.Position return value desc : type :","title":"BySize"},{"location":"Classes/Util/#convertstobjtoobjofstr","text":"ConvertStObjToObjOfStr ( obj ) parameters name : obj desc : type : string|number|object return value desc : type :","title":"ConvertStObjToObjOfStr"},{"location":"Classes/Util/#dpiscale","text":"DPIScale ( pos , enlarge := true ) parameters name : pos desc : type : GridGUI.Position name : enlarge desc : type : bool default : true return value desc : type :","title":"DPIScale"},{"location":"Classes/Util/#findindex","text":"FindIndex ( lst , val , fun := false ) parameters name : lst desc : type : string|number|object name : val desc : type : string|number|object name : fun desc : type : Func|BoundFunc|false default : false return value desc : type :","title":"FindIndex"},{"location":"Classes/Util/#getsizebylimitingside","text":"GetSizeByLimitingSide ( pos , ratio ) parameters name : pos desc : type : GridGUI.Position name : ratio desc : type : number return value desc : type : GridGUI.Position","title":"GetSizeByLimitingSide"},{"location":"Classes/Util/#join","text":"Join ( sep , params ) parameters name : sep desc : type : string name : params desc : type : array return value desc : type : string","title":"Join"},{"location":"Classes/Util/#justify","text":"Justify ( justifyOptions , area , pos , border ) parameters name : justifyOptions desc : type : string name : area desc : type : GridGUI.Position name : pos desc : type : GridGUI.Position name : border desc : type : GridGUI.Position return value desc : type : GridGUI.Position","title":"Justify"},{"location":"Classes/Util/#justifycenter","text":"JustifyCenter ( area , pos ) parameters name : area desc : type : GridGUI.Position name : pos desc : type : GridGUI.Position return value desc : type : GridGUI.Position","title":"JustifyCenter"},{"location":"Classes/Util/#prettyprint","text":"prettyPrint ( str ) parameters name : str desc : type : string|number|object return value desc : type :","title":"prettyPrint"},{"location":"Classes/Util/#removevalue","text":"RemoveValue ( lst , val , fun := false ) parameters name : lst desc : type : string|number|object name : val desc : type : string|number|object name : fun desc : type : Func|BoundFunc|false default : false return value desc : type :","title":"RemoveValue"},{"location":"Classes/Util/#rgbtobgr","text":"RGBtoBGR ( oldValue ) parameters name : oldValue desc : type : string|number|object return value desc : type :","title":"RGBtoBGR"},{"location":"Classes/Util/#sort","text":"Sort ( obj , fun ) parameters name : obj desc : type : string|number|object name : fun desc : type : Func|BoundFunc return value desc : type :","title":"Sort"},{"location":"Classes/Util/#sum","text":"Sum ( obj ) parameters name : obj desc : type : string|number|object return value desc : type :","title":"Sum"},{"location":"Classes/Window/","text":"Window Members callbacks desc : The array of GridGUI.GuiCallback s that the class instance was created with. type : array|false default : false meta : [object] hwnd desc : The hwnd of the associated window. type : hwnd Methods __DetectHidden __DetectHidden () Enables the detection of hidden windows using other ahk commands. return value desc : The previous detect hidden windows state. Either \"On\" or \"Off\" . type : string __New __New ( hwnd , callbacks := false ) Constructor. parameters name : hwnd desc : The hwnd of the window that the class instance should work on. type : hwnd name : callbacks desc : An array of GridGUI.GuiCallback s to set up. type : array|false default : false return value desc : A new GridGUI.Window instance. type : GridGUI.Window __Setup __Setup () Sets up the GridGUI.GuiCallback s that where passed to the constructor. They are set up using OnMessage ControlGetFocus ControlGetFocus () Retrieves the hwnd of the control with input focus in the window if any. return value desc : The hwnd of the control with input focus or an empty string if non where found. type : hwnd|\"\" ToStr ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this window. type : string WinActivate WinActivate () A thin method wrapper for WinActivate . link : link WinActive WinActive () A thin method wrapper for WinActive . return value desc : The hwnd of the window associated with this class instance if it is the active window otherwise false . type : hwnd|false link : link WinExist WinExist () A thin method wrapper for WinExist . return value desc : The hwnd of the window associated with this class instance if it exists otherwise false . type : hwnd|false link : link WinGet WinGet ( SubCommand ) A thin method wrapper for WinGet . parameters name : SubCommand desc : The subcommand to retrive from the window. See the link for available subcommands. type : string link : link return value desc : The retrieved value. type : any link : link WinGetPos WinGetPos () A thin method wrapper for WinGetPos , except that it returns a GridGUI.Position instance. return value desc : The position and size of the window. type : GridGUI.Position link : link WinHide WinHide () A thin method wrapper for WinHide . link : link WinMove WinMove ( x := \"\" , y := \"\" , w := \"\" , h := \"\" ) A thin method wrapper for WinMove . parameters name : x desc : The x coordinate that the top left corner of the window will be moved to. If left empty the x coordinate of the top left corner won't change. type : string default : \"\" name : y desc : The y coordinate that the top left corner of the window will be moved to. If left empty the y coordinate of the top left corner won't change. type : string default : \"\" name : w desc : The width the window should be resized to. If left empty the width won't change. type : string default : \"\" name : h desc : The height the window should be resized to. If left empty the height won't change. type : string default : \"\" link : link WinSet WinSet ( SubCommand , value ) A thin method wrapper for WinSet , except it works even if the window is hidden. parameters name : SubCommand desc : The subCommand to set for the window. See link for available subcommands. type : string link : link name : value desc : The value to apply to the subcommand. See link for values used in the subcommands. type : string|number link : link link : link WinShow WinShow () A thin method wrapper for WinShow . link : link","title":"Window"},{"location":"Classes/Window/#window","text":"","title":"Window"},{"location":"Classes/Window/#members","text":"","title":"Members"},{"location":"Classes/Window/#callbacks","text":"desc : The array of GridGUI.GuiCallback s that the class instance was created with. type : array|false default : false meta : [object]","title":"callbacks"},{"location":"Classes/Window/#hwnd","text":"desc : The hwnd of the associated window. type : hwnd","title":"hwnd"},{"location":"Classes/Window/#methods","text":"","title":"Methods"},{"location":"Classes/Window/#__detecthidden","text":"__DetectHidden () Enables the detection of hidden windows using other ahk commands. return value desc : The previous detect hidden windows state. Either \"On\" or \"Off\" . type : string","title":"__DetectHidden"},{"location":"Classes/Window/#__new","text":"__New ( hwnd , callbacks := false ) Constructor. parameters name : hwnd desc : The hwnd of the window that the class instance should work on. type : hwnd name : callbacks desc : An array of GridGUI.GuiCallback s to set up. type : array|false default : false return value desc : A new GridGUI.Window instance. type : GridGUI.Window","title":"__New"},{"location":"Classes/Window/#__setup","text":"__Setup () Sets up the GridGUI.GuiCallback s that where passed to the constructor. They are set up using OnMessage","title":"__Setup"},{"location":"Classes/Window/#controlgetfocus","text":"ControlGetFocus () Retrieves the hwnd of the control with input focus in the window if any. return value desc : The hwnd of the control with input focus or an empty string if non where found. type : hwnd|\"\"","title":"ControlGetFocus"},{"location":"Classes/Window/#tostr","text":"ToStr ( indent := \"\" ) Converts the object to a string. parameters name : indent desc : The amount of indentation to add on each line. type : string default : \"\" return value desc : A string representing this window. type : string","title":"ToStr"},{"location":"Classes/Window/#winactivate","text":"WinActivate () A thin method wrapper for WinActivate . link : link","title":"WinActivate"},{"location":"Classes/Window/#winactive","text":"WinActive () A thin method wrapper for WinActive . return value desc : The hwnd of the window associated with this class instance if it is the active window otherwise false . type : hwnd|false link : link","title":"WinActive"},{"location":"Classes/Window/#winexist","text":"WinExist () A thin method wrapper for WinExist . return value desc : The hwnd of the window associated with this class instance if it exists otherwise false . type : hwnd|false link : link","title":"WinExist"},{"location":"Classes/Window/#winget","text":"WinGet ( SubCommand ) A thin method wrapper for WinGet . parameters name : SubCommand desc : The subcommand to retrive from the window. See the link for available subcommands. type : string link : link return value desc : The retrieved value. type : any link : link","title":"WinGet"},{"location":"Classes/Window/#wingetpos","text":"WinGetPos () A thin method wrapper for WinGetPos , except that it returns a GridGUI.Position instance. return value desc : The position and size of the window. type : GridGUI.Position link : link","title":"WinGetPos"},{"location":"Classes/Window/#winhide","text":"WinHide () A thin method wrapper for WinHide . link : link","title":"WinHide"},{"location":"Classes/Window/#winmove","text":"WinMove ( x := \"\" , y := \"\" , w := \"\" , h := \"\" ) A thin method wrapper for WinMove . parameters name : x desc : The x coordinate that the top left corner of the window will be moved to. If left empty the x coordinate of the top left corner won't change. type : string default : \"\" name : y desc : The y coordinate that the top left corner of the window will be moved to. If left empty the y coordinate of the top left corner won't change. type : string default : \"\" name : w desc : The width the window should be resized to. If left empty the width won't change. type : string default : \"\" name : h desc : The height the window should be resized to. If left empty the height won't change. type : string default : \"\" link : link","title":"WinMove"},{"location":"Classes/Window/#winset","text":"WinSet ( SubCommand , value ) A thin method wrapper for WinSet , except it works even if the window is hidden. parameters name : SubCommand desc : The subCommand to set for the window. See link for available subcommands. type : string link : link name : value desc : The value to apply to the subcommand. See link for values used in the subcommands. type : string|number link : link link : link","title":"WinSet"},{"location":"Classes/Window/#winshow","text":"WinShow () A thin method wrapper for WinShow . link : link","title":"WinShow"},{"location":"Classes/WindowControl/","text":"WindowControl Methods __CheckIfClicked __CheckIfClicked ( wParam , lParam , msg , hwnd ) parameters name : wParam desc : type : string|number|object link : link name : lParam desc : type : string|number|object link : link name : msg desc : type : string|number|object link : link name : hwnd desc : type : string|number|object link : link return value desc : type : __New __New ( guiHwnd , hwnd , options := \"\" ) parameters name : guiHwnd desc : type : string|number|object link : link name : hwnd desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link return value desc : type : __SetUpWindow __SetUpWindow () return value desc : type : Control Control ( subCommand , value ) parameters name : subCommand desc : type : string|number|object link : link name : value desc : type : string|number|object link : link return value desc : type : ControlFocus ControlFocus () return value desc : type : ControlMove ControlMove ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type : Draw Draw ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type : GetPos GetPos () return value desc : type :","title":"WindowControl"},{"location":"Classes/WindowControl/#windowcontrol","text":"","title":"WindowControl"},{"location":"Classes/WindowControl/#methods","text":"","title":"Methods"},{"location":"Classes/WindowControl/#__checkifclicked","text":"__CheckIfClicked ( wParam , lParam , msg , hwnd ) parameters name : wParam desc : type : string|number|object link : link name : lParam desc : type : string|number|object link : link name : msg desc : type : string|number|object link : link name : hwnd desc : type : string|number|object link : link return value desc : type :","title":"__CheckIfClicked"},{"location":"Classes/WindowControl/#__new","text":"__New ( guiHwnd , hwnd , options := \"\" ) parameters name : guiHwnd desc : type : string|number|object link : link name : hwnd desc : type : string|number|object link : link name : options desc : type : string default : \"\" link : link return value desc : type :","title":"__New"},{"location":"Classes/WindowControl/#__setupwindow","text":"__SetUpWindow () return value desc : type :","title":"__SetUpWindow"},{"location":"Classes/WindowControl/#control","text":"Control ( subCommand , value ) parameters name : subCommand desc : type : string|number|object link : link name : value desc : type : string|number|object link : link return value desc : type :","title":"Control"},{"location":"Classes/WindowControl/#controlfocus","text":"ControlFocus () return value desc : type :","title":"ControlFocus"},{"location":"Classes/WindowControl/#controlmove","text":"ControlMove ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type :","title":"ControlMove"},{"location":"Classes/WindowControl/#draw","text":"Draw ( pos ) parameters name : pos desc : type : string|number|object link : link return value desc : type :","title":"Draw"},{"location":"Classes/WindowControl/#getpos","text":"GetPos () return value desc : type :","title":"GetPos"},{"location":"Examples/Example%201/","text":"Example 1 #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) oWB := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"One"},{"location":"Examples/Example%201/#example-1","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) oWB := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example 1"},{"location":"Examples/Example%20Background/","text":"Example Background #Include < GridGUI > myGui := new GridGUI ( \"Background\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp oWB := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" ctrl := myGui . Add ( \"1-3\" , \"1-5\" , \"Picture\" , \"w0 h0\" , \"Images\\background.png\" , , , 1 , 1 ) myGui . RegisterBackground ( ctrl ) myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , 1 , 1 ) myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , \"3-4\" , \"Button\" , , \"Button Button\" , , 1 ) myGui . Add ( \"1-3\" , 5 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Background"},{"location":"Examples/Example%20Background/#example-background","text":"#Include < GridGUI > myGui := new GridGUI ( \"Background\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp oWB := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" ctrl := myGui . Add ( \"1-3\" , \"1-5\" , \"Picture\" , \"w0 h0\" , \"Images\\background.png\" , , , 1 , 1 ) myGui . RegisterBackground ( ctrl ) myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , 1 , 1 ) myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , \"3-4\" , \"Button\" , , \"Button Button\" , , 1 ) myGui . Add ( \"1-3\" , 5 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example Background"},{"location":"Examples/Example%20CSV%20Viewer/","text":"Example CSV Viewer #Include < GridGUI > ; sets defaults for the scripts SetBatchLines , - 1 SetWinDelay , 0 FileEncoding , UTF - 8 ; used to manage changing the cursor when howering over the splitter (progress control) global CurrentCursor := 0 global SuppressCursorChange := 0 ; Creating and styling a GUI myGui := new GridGUI ( \"CSV Viewer\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Color ( \"CED2DD\" ) myGui . Font ( \"s9 c4D2609\" , \"Helvetica\" ) myGui . GuiSizeDelay := false ; Creating a subgrid to hold the settings line SubGrid := new GridGUI . SubGrid ( myGui . hwnd ) ; Add controls to the subgrid ; columns rows ctrl options CB := SubGrid . Add ( 3 , 1 , \"Checkbox\" , { text : \"First Row is header\" , justify : \"WC\" }) ED_RowSep := SubGrid . Add ( 1 , 1 , \"Edit\" , { text : \"Row Sep\" , options : \"-Multi\" , justify : \"EC\" }) ED_ValSep := SubGrid . Add ( 2 , 1 , \"Edit\" , { text : \"Val Sep\" , options : \"-Multi\" , justify : \"EC\" }) ; Sized the subgrid so that the cue banners can be shown SubGrid . AutoSize () SubGrid . MinSize () ; Sets the edit controls to default values ED_RowSep . GuiControl ( \"\" , \" `` n\" ) ED_ValSep . GuiControl ( \"\" , \",\" ) ; Creating the main ListView and header state handler LV := new GridGUI . ListviewControl ( myGui . hwnd , \"+Grid\" ) LV_HS := new HeaderState ( LV ) ; Creating the file list ListView LV_FL := new GridGUI . ListviewControl ( myGui . hwnd , \"AltSubmit -Multi\" , \"FileName|Path\" ) ; Add controls to the GUI ; columns rows ctrl options myGui . AddControl ( \"1-2\" , 1 , SubGrid , { justify : \"WC\" }) myGui . AddControl ( \"1-2\" , 2 , LV_FL , { options : \"r10\" , exH : 1 , fillW : true , fillH : true }) myGui . AddControl ( 4 , \"1-2\" , LV , { exW : 1 , exH : 1 , fillW : true , fillH : true }) SP := myGui . Add ( 3 , \"1-2\" , \"Progress\" , { options : \"w8\" , fillH : true }) ; Removing the horizontal margin of the splitter myGui . GetNewestCellGroup () . borderX := 0 ; Adding file drag and drop for the ListBox myGui . RegisterDropTarget ( LV_FL , Func ( \"AddFiles\" ) . Bind ( LV_FL )) ; Add user input handling LV_FL . Callback := Func ( \"FileSeleted\" ) . Bind ( LV_FL , LV , LV_HS , ED_RowSep , ED_ValSep ) CB . Callback := Func ( \"AddHeader\" ) . Bind ( CB , LV_HS ) ; Sets cue banners for the edit controls EM_SETCUEBANNER := 0x1501 PostMessage , % EM_SETCUEBANNER , False , % & str := \"Row Sep\" , , % \"ahk_id \" ED_RowSep . Hwnd PostMessage , % EM_SETCUEBANNER , False , % & str2 := \"Val Sep\" , , % \"ahk_id \" ED_ValSep . Hwnd ; Sets up OnMessage to handle the splitter OnMessage ( WM_LBUTTONDOWN := 0x0201 , Func ( \"DragResize\" ) . Bind ( myGui , SP . hwnd , LV_FL , LV )) OnMessage ( WM_MOUSEMOVE := 0x0200 , Func ( \"WM_MOUSEMOVE\" ) . Bind ( SP . hwnd )) OnMessage ( WM_SETCURSOR := 0x20 , \"WM_SETCURSOR\" ) ; Shows the GUI myGui . Show ( \"w1200\" ) return FileSeleted ( LV_FL , LV , LV_HS , ED_RowSep , ED_ValSep ) { if ( A_GuiEvent = \"Normal\" ) { path := LV_FL . GetSelection ()[ 1 ][ 2 ] LV . Redraw ( 0 ) LV . Delete () rows := [] num_columns := 0 rSep := UnEscapeSpecialCharaters ( ED_RowSep . GuiControlGet ()) vSep := UnEscapeSpecialCharaters ( ED_ValSep . GuiControlGet ()) for i , line in StrSplit ( FileOpen ( path , \"r `n\" ) . Read (), rSep ) { row := StrSplit ( line , vSep ) rows . Push ( row ) if ( row . Count () > num_columns ) { num_columns := row . Count () } } headers := [] loop % num_columns { headers . Push ( \"Header \" A_Index ) } LV . SetHeaders ( headers ) LV . AddArray ( rows ) LV . Redraw ( 0 ) LV_HS . Reset ( headers , LV . GetRow ( 1 )) LV . ModifyCol () LV_HS . Update () LV . Redraw ( 1 ) } } AddFiles ( LV_FL , files ) { rows := [] for i , path in files { SplitPath , % path , filename rows . Push ([ filename , path ]) } LV_FL . Delete () LV_FL . AddArray ( rows ) LV_FL . ModifyCol () } AddHeader ( CB , LV_HS ) { if ( LV_HS . useRow1 != CB . vVar ) { LV_HS . useRow1 := CB . vVar LV_HS . Update () } } Class HeaderState { useRow1 := false row1 := [] headers := [] deleted := false __New ( LV ) { this . LV := LV } Reset ( headers , row1 ) { this . headers := headers this . row1 := row1 this . deleted := false } Update () { if ( this . useRow1 ) { if ( ! this . deleted ) { this . LV . Delete ( 1 ) } this . deleted := true this . LV . SetHeaders ( this . row1 ) } else { if ( this . deleted ) { this . LV . Insert ( 1 , , this . row1 * ) this . deleted := false } this . LV . SetHeaders ( this . headers ) } } } UnEscapeSpecialCharaters ( str ) { return StrReplace ( StrReplace ( StrReplace ( str , \" `` r\" , \" `r \" ), \" `` t\" , \" `t \" ), \" `` n\" , \" `n \" ) } ; Splitter handling after this point DragResize ( gui , hwnd , ctrl , ctrl2 ) { MouseGetPos , x , y , , ctrl_hwnd , 2 if ( hwnd == ctrl_hwnd ) { SuppressCursorChange := True ctrl . Redraw ( 0 ), ctrl2 . Redraw ( 0 ) pos := ctrl . ControlGetPos () x3 := 0 , y3 := 0 while ( GetKeyState ( \"LButton\" , \"P\" )) { Sleep , 25 MouseGetPos , x2 , y2 if ( x2 != x3 || y2 != y3 ) { ctrl . Options ( \"w\" pos . w + ( x2 - x )) gui . ReDraw () x3 := x2 , y3 := y2 } } MouseGetPos , x2 , y2 ctrl . Options ( \"w\" pos . w + ( x2 - x )) gui . ReDraw () SuppressCursorChange := False ctrl . Redraw ( 1 ), ctrl2 . Redraw ( 1 ) } } WM_SETCURSOR ( wParam , lParam ) { HitTest := lParam & 0xFFFF if ( HitTest = 1 && CurrentCursor != 0 ) { DllCall ( \"SetCursor\" , \"ptr\" , CurrentCursor ) return true ;Do not do further cursor processing (ie: skip default behavior) } ;Else, let the system handle it } WM_MOUSEMOVE ( ctrl_hwnd , wParam , lParam ) { ;A list of cursor constants can be found on the LoadCursor page ;http://msdn.microsoft.com/en-us/library/windows/desktop/ms648391%28v=vs.85%29.aspx static doubleArrow := DllCall ( \"LoadCursor\" , \"ptr\" , 0 , \"ptr\" , 32644 ) if ( ! SuppressCursorChange ) { MouseGetPos , , , , hwnd , 2 if ( hwnd == ctrl_hwnd ) { CurrentCursor := doubleArrow } else { CurrentCursor := 0 ;Set to zero to let WM_SETCURSOR know to do nothing } } }","title":"CSV Viewer"},{"location":"Examples/Example%20CSV%20Viewer/#example-csv-viewer","text":"#Include < GridGUI > ; sets defaults for the scripts SetBatchLines , - 1 SetWinDelay , 0 FileEncoding , UTF - 8 ; used to manage changing the cursor when howering over the splitter (progress control) global CurrentCursor := 0 global SuppressCursorChange := 0 ; Creating and styling a GUI myGui := new GridGUI ( \"CSV Viewer\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Color ( \"CED2DD\" ) myGui . Font ( \"s9 c4D2609\" , \"Helvetica\" ) myGui . GuiSizeDelay := false ; Creating a subgrid to hold the settings line SubGrid := new GridGUI . SubGrid ( myGui . hwnd ) ; Add controls to the subgrid ; columns rows ctrl options CB := SubGrid . Add ( 3 , 1 , \"Checkbox\" , { text : \"First Row is header\" , justify : \"WC\" }) ED_RowSep := SubGrid . Add ( 1 , 1 , \"Edit\" , { text : \"Row Sep\" , options : \"-Multi\" , justify : \"EC\" }) ED_ValSep := SubGrid . Add ( 2 , 1 , \"Edit\" , { text : \"Val Sep\" , options : \"-Multi\" , justify : \"EC\" }) ; Sized the subgrid so that the cue banners can be shown SubGrid . AutoSize () SubGrid . MinSize () ; Sets the edit controls to default values ED_RowSep . GuiControl ( \"\" , \" `` n\" ) ED_ValSep . GuiControl ( \"\" , \",\" ) ; Creating the main ListView and header state handler LV := new GridGUI . ListviewControl ( myGui . hwnd , \"+Grid\" ) LV_HS := new HeaderState ( LV ) ; Creating the file list ListView LV_FL := new GridGUI . ListviewControl ( myGui . hwnd , \"AltSubmit -Multi\" , \"FileName|Path\" ) ; Add controls to the GUI ; columns rows ctrl options myGui . AddControl ( \"1-2\" , 1 , SubGrid , { justify : \"WC\" }) myGui . AddControl ( \"1-2\" , 2 , LV_FL , { options : \"r10\" , exH : 1 , fillW : true , fillH : true }) myGui . AddControl ( 4 , \"1-2\" , LV , { exW : 1 , exH : 1 , fillW : true , fillH : true }) SP := myGui . Add ( 3 , \"1-2\" , \"Progress\" , { options : \"w8\" , fillH : true }) ; Removing the horizontal margin of the splitter myGui . GetNewestCellGroup () . borderX := 0 ; Adding file drag and drop for the ListBox myGui . RegisterDropTarget ( LV_FL , Func ( \"AddFiles\" ) . Bind ( LV_FL )) ; Add user input handling LV_FL . Callback := Func ( \"FileSeleted\" ) . Bind ( LV_FL , LV , LV_HS , ED_RowSep , ED_ValSep ) CB . Callback := Func ( \"AddHeader\" ) . Bind ( CB , LV_HS ) ; Sets cue banners for the edit controls EM_SETCUEBANNER := 0x1501 PostMessage , % EM_SETCUEBANNER , False , % & str := \"Row Sep\" , , % \"ahk_id \" ED_RowSep . Hwnd PostMessage , % EM_SETCUEBANNER , False , % & str2 := \"Val Sep\" , , % \"ahk_id \" ED_ValSep . Hwnd ; Sets up OnMessage to handle the splitter OnMessage ( WM_LBUTTONDOWN := 0x0201 , Func ( \"DragResize\" ) . Bind ( myGui , SP . hwnd , LV_FL , LV )) OnMessage ( WM_MOUSEMOVE := 0x0200 , Func ( \"WM_MOUSEMOVE\" ) . Bind ( SP . hwnd )) OnMessage ( WM_SETCURSOR := 0x20 , \"WM_SETCURSOR\" ) ; Shows the GUI myGui . Show ( \"w1200\" ) return FileSeleted ( LV_FL , LV , LV_HS , ED_RowSep , ED_ValSep ) { if ( A_GuiEvent = \"Normal\" ) { path := LV_FL . GetSelection ()[ 1 ][ 2 ] LV . Redraw ( 0 ) LV . Delete () rows := [] num_columns := 0 rSep := UnEscapeSpecialCharaters ( ED_RowSep . GuiControlGet ()) vSep := UnEscapeSpecialCharaters ( ED_ValSep . GuiControlGet ()) for i , line in StrSplit ( FileOpen ( path , \"r `n\" ) . Read (), rSep ) { row := StrSplit ( line , vSep ) rows . Push ( row ) if ( row . Count () > num_columns ) { num_columns := row . Count () } } headers := [] loop % num_columns { headers . Push ( \"Header \" A_Index ) } LV . SetHeaders ( headers ) LV . AddArray ( rows ) LV . Redraw ( 0 ) LV_HS . Reset ( headers , LV . GetRow ( 1 )) LV . ModifyCol () LV_HS . Update () LV . Redraw ( 1 ) } } AddFiles ( LV_FL , files ) { rows := [] for i , path in files { SplitPath , % path , filename rows . Push ([ filename , path ]) } LV_FL . Delete () LV_FL . AddArray ( rows ) LV_FL . ModifyCol () } AddHeader ( CB , LV_HS ) { if ( LV_HS . useRow1 != CB . vVar ) { LV_HS . useRow1 := CB . vVar LV_HS . Update () } } Class HeaderState { useRow1 := false row1 := [] headers := [] deleted := false __New ( LV ) { this . LV := LV } Reset ( headers , row1 ) { this . headers := headers this . row1 := row1 this . deleted := false } Update () { if ( this . useRow1 ) { if ( ! this . deleted ) { this . LV . Delete ( 1 ) } this . deleted := true this . LV . SetHeaders ( this . row1 ) } else { if ( this . deleted ) { this . LV . Insert ( 1 , , this . row1 * ) this . deleted := false } this . LV . SetHeaders ( this . headers ) } } } UnEscapeSpecialCharaters ( str ) { return StrReplace ( StrReplace ( StrReplace ( str , \" `` r\" , \" `r \" ), \" `` t\" , \" `t \" ), \" `` n\" , \" `n \" ) } ; Splitter handling after this point DragResize ( gui , hwnd , ctrl , ctrl2 ) { MouseGetPos , x , y , , ctrl_hwnd , 2 if ( hwnd == ctrl_hwnd ) { SuppressCursorChange := True ctrl . Redraw ( 0 ), ctrl2 . Redraw ( 0 ) pos := ctrl . ControlGetPos () x3 := 0 , y3 := 0 while ( GetKeyState ( \"LButton\" , \"P\" )) { Sleep , 25 MouseGetPos , x2 , y2 if ( x2 != x3 || y2 != y3 ) { ctrl . Options ( \"w\" pos . w + ( x2 - x )) gui . ReDraw () x3 := x2 , y3 := y2 } } MouseGetPos , x2 , y2 ctrl . Options ( \"w\" pos . w + ( x2 - x )) gui . ReDraw () SuppressCursorChange := False ctrl . Redraw ( 1 ), ctrl2 . Redraw ( 1 ) } } WM_SETCURSOR ( wParam , lParam ) { HitTest := lParam & 0xFFFF if ( HitTest = 1 && CurrentCursor != 0 ) { DllCall ( \"SetCursor\" , \"ptr\" , CurrentCursor ) return true ;Do not do further cursor processing (ie: skip default behavior) } ;Else, let the system handle it } WM_MOUSEMOVE ( ctrl_hwnd , wParam , lParam ) { ;A list of cursor constants can be found on the LoadCursor page ;http://msdn.microsoft.com/en-us/library/windows/desktop/ms648391%28v=vs.85%29.aspx static doubleArrow := DllCall ( \"LoadCursor\" , \"ptr\" , 0 , \"ptr\" , 32644 ) if ( ! SuppressCursorChange ) { MouseGetPos , , , , hwnd , 2 if ( hwnd == ctrl_hwnd ) { CurrentCursor := doubleArrow } else { CurrentCursor := 0 ;Set to zero to let WM_SETCURSOR know to do nothing } } }","title":"Example CSV Viewer"},{"location":"Examples/Example%20CellGroups/","text":"Example CellGroups #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . GetNewestCellGroup () . borderX := 0 ctrl := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) oWB := ctrl . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . GetCellGroup ( ctrl ) . borderX := 0 for i , c in myGui . GetCellGroupsAt ( new GridGUI . Position ( 1 , 4 )) { c . borderX := 0 } for i , c in myGui . grid . cells { c . ctrl . callback := ObjBindMethod ( c , \"ToolTip\" ) } myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"CellGroups"},{"location":"Examples/Example%20CellGroups/#example-cellgroups","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . GetNewestCellGroup () . borderX := 0 ctrl := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) oWB := ctrl . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . GetNewestCellGroup () . borderX := 0 myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . GetCellGroup ( ctrl ) . borderX := 0 for i , c in myGui . GetCellGroupsAt ( new GridGUI . Position ( 1 , 4 )) { c . borderX := 0 } for i , c in myGui . grid . cells { c . ctrl . callback := ObjBindMethod ( c , \"ToolTip\" ) } myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example CellGroups"},{"location":"Examples/Example%20Exp%20Fight/","text":"Example Exp Fight #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-2\" , 1 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( \"3-4\" , 1 , \"Edit\" , \"w0\" , , 1 , , 1 ) loop 5 { myGui . Add ( A_Index , 3 , \"Button\" , , \"x\" , 0 , 0 , 0 , 0 , \"W\" ) myGui . Add ( A_Index , 4 , \"Button\" , , \"x\" , 0 , 0 , 0 , 0 , \"E\" ) } myGui . AutoSize () myGui . Show () return","title":"Exp Fight"},{"location":"Examples/Example%20Exp%20Fight/#example-exp-fight","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-2\" , 1 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( \"3-4\" , 1 , \"Edit\" , \"w0\" , , 1 , , 1 ) loop 5 { myGui . Add ( A_Index , 3 , \"Button\" , , \"x\" , 0 , 0 , 0 , 0 , \"W\" ) myGui . Add ( A_Index , 4 , \"Button\" , , \"x\" , 0 , 0 , 0 , 0 , \"E\" ) } myGui . AutoSize () myGui . Show () return","title":"Example Exp Fight"},{"location":"Examples/Example%20Expanding%20Buttons/","text":"Example Expanding Buttons #Include < GridGUI > myGui := new GridGUI ( \"ahk\" , \"Resize\" , true ) loop 3 { myGui . Add ( A_Index , A_Index , \"Button\" , , A_Index , A_Index != 2 , A_Index != 2 , A_Index != 2 , A_Index != 2 ) } myGui . Show ( \"w500 h500\" ) pos := myGui . WinGetPos () myGui . WinMove ( pos . x - pos . w / 2 ) myGui2 := new GridGUI ( \"ahk\" , \"Resize\" , true ) loop 3 { myGui2 . Add ( A_Index , A_Index , \"Button\" , , A_Index , A_Index = 2 , A_Index = 2 , A_Index = 2 , A_Index = 2 ) } myGui2 . Show ( \"w500 h500\" ) myGui2 . WinMove ( pos . x + pos . w / 2 , pos . y ) myGui . GuiClose := GridGUI . ExitApp myGui2 . GuiClose := GridGUI . ExitApp return","title":"Expanding Buttons"},{"location":"Examples/Example%20Expanding%20Buttons/#example-expanding-buttons","text":"#Include < GridGUI > myGui := new GridGUI ( \"ahk\" , \"Resize\" , true ) loop 3 { myGui . Add ( A_Index , A_Index , \"Button\" , , A_Index , A_Index != 2 , A_Index != 2 , A_Index != 2 , A_Index != 2 ) } myGui . Show ( \"w500 h500\" ) pos := myGui . WinGetPos () myGui . WinMove ( pos . x - pos . w / 2 ) myGui2 := new GridGUI ( \"ahk\" , \"Resize\" , true ) loop 3 { myGui2 . Add ( A_Index , A_Index , \"Button\" , , A_Index , A_Index = 2 , A_Index = 2 , A_Index = 2 , A_Index = 2 ) } myGui2 . Show ( \"w500 h500\" ) myGui2 . WinMove ( pos . x + pos . w / 2 , pos . y ) myGui . GuiClose := GridGUI . ExitApp myGui2 . GuiClose := GridGUI . ExitApp return","title":"Example Expanding Buttons"},{"location":"Examples/Example%20Expansion%20Battle%201/","text":"Example Expansion Battle 1 #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-5\" , 1 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( 1 , \"2-4\" , \"Edit\" , \"w20 h0\" , , , 1 , , 1 ) myGui . Add ( 5 , \"2-4\" , \"Edit\" , \"w20 h0\" , , , 1 , , 1 ) myGui . Add ( \"1-5\" , 5 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( \"2-4\" , 2 , \"Edit\" , \"w0 h0\" , , 1 , 1 , 1 , 1 ) myGui . Add ( \"2-3\" , 3 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( 4 , 3 , \"Button\" , , \"Button\" ) myGui . Show () return","title":"Expansion Battle 1"},{"location":"Examples/Example%20Expansion%20Battle%201/#example-expansion-battle-1","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-5\" , 1 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( 1 , \"2-4\" , \"Edit\" , \"w20 h0\" , , , 1 , , 1 ) myGui . Add ( 5 , \"2-4\" , \"Edit\" , \"w20 h0\" , , , 1 , , 1 ) myGui . Add ( \"1-5\" , 5 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( \"2-4\" , 2 , \"Edit\" , \"w0 h0\" , , 1 , 1 , 1 , 1 ) myGui . Add ( \"2-3\" , 3 , \"Edit\" , \"w0\" , , 1 , , 1 ) myGui . Add ( 4 , 3 , \"Button\" , , \"Button\" ) myGui . Show () return","title":"Example Expansion Battle 1"},{"location":"Examples/Example%20Find%20Text%20in%20Files/","text":"Example Find Text in Files #Include < GridGUI > SetBatchLines , - 1 myGui := new GridGUI ( \"Text to Find\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . GuiSizeDelay := false FEd := myGui . Add ( 1 , 1 , \"Edit\" , , , 1 , , 1 ) FBt := myGui . Add ( 3 , 1 , \"Button\" , , \"Files\" , , , 1 , , \"CW\" ) FBt . callback := Func ( \"ChoseFiles\" ) . Bind ( FEd ) SEd := myGui . Add ( 1 , 2 , \"Edit\" , , , 1 , , 1 ) SBt := myGui . Add ( 3 , 2 , \"Button\" , \"Default\" , \"Search\" , , , , , \"CW\" ) lv_files := new GridGUI . ListviewControl ( myGui . hwnd , , \"File Names|Line Num|Line|Path\" ) myGui . AddControl ( \"1-3\" , 3 , lv_files , 1 , 1 , 1 , 1 ) sbar := new GridGUI . StatusBarControl ( myGui . hwnd ) myGui . AddControl ( \"1-3\" , 4 , sbar , , , 1 ) myGui . GetNewestCellGroup () . borderY := 0 SBt . callback := Func ( \"SearchCallback\" ) . Bind ( lv_files , SEd , FEd , sbar ) sbar . SetParts ( 60 , 40 ) myGui . Show ( \"w700 h700\" ) return #If myGui . WinActive () && myGui . ControlGetFocus () = lv_files . hwnd ^c:: Clipboard := JoinFileTextLine ( \" `n \" , lv_files . GetSelection (), 3 ) ;^a::lv_files.SetSelection() #If SearchCallback ( lstview , term , path , sbar ) { Static s := new Sleepy () term := term . vVar path := path . vVar sbar . SetText ( \"\" , 3 ) s . Start () lstview . Delete () files := GetFilesInFolder ( path , , \"r\" ) count := Search ( lstview , term , files , sbar ) elapsed := s . Elapsed () lstview . ModifyCol (, \"AutoHdr\" ) lstview . ModifyCol ( 1 , \"AutoHdr\" ) sbar . SetText ( \" `t Completed\" , 1 ) sbar . SetText ( \"Found \" count \" occurrences in \" Round ( elapsed / 1000 , 3 ) \" seconds\" , 3 ) } Search ( lstview , term , files , sbar ) { sbar . SetText ( \" `t Searching\" , 1 ) sbar . SetText ( \" `t`t 0.0%\" , 2 ) length := files . Length () count := 0 progress := 0 for i , file in files { SplitPath , % file , FileName , Dir Loop , Read , % file { if ( A_LoopReadLine ~= term ) { lstview . Add (, FileName , A_Index , Trim ( A_LoopReadLine ), Dir ) count ++ } } currentProgress := Round ( A_Index / length * 100 , 1 ) if ( currentProgress != progress ) { sbar . SetText ( \" `t`t \" Round ( A_Index / length * 100 , 1 ) \"%\" , 2 ) progress := currentProgress } } return count } ChoseFiles ( path ) { FileSelectFile , selection , 3 , % path . vVar attributes := FileExist ( selection ) if ( attributes ) { if ( InStr ( attributes , \"D\" )) { selection .= \"\\*\" } path . GuiControl ( \"\" , selection ) } } Class Sleepy { __New () { DllCall ( \"QueryPerformanceFrequency\" , \"Int64*\" , freq ) this . freq := freq } Start () { DllCall ( \"QueryPerformanceCounter\" , \"Int64*\" , start ) this . started := start } Now () { DllCall ( \"QueryPerformanceCounter\" , \"Int64*\" , now ) return now } Elapsed () { return ( this . Now () - this . started ) / this . freq * 1000 } Sleep ( time ) { this . Start () Sleep , % time > 25 ? time - 25 : - 1 While ( this . Elapsed () < time ) { } } } GetFilesInFolder ( path , maxitems := False , mode := \"\" ) { files := [] Loop , Files , % path , % mode { if ( maxitems && A_Index > maxitems ) { Break } files . Push ( A_LoopFileLongPath ) } return files } JoinFileTextLine ( sep , obj , index ) { for key , val in obj str .= val [ index ] . sep return SubStr ( str , 1 , - StrLen ( sep )) }","title":"Find Text in Files"},{"location":"Examples/Example%20Find%20Text%20in%20Files/#example-find-text-in-files","text":"#Include < GridGUI > SetBatchLines , - 1 myGui := new GridGUI ( \"Text to Find\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . GuiSizeDelay := false FEd := myGui . Add ( 1 , 1 , \"Edit\" , , , 1 , , 1 ) FBt := myGui . Add ( 3 , 1 , \"Button\" , , \"Files\" , , , 1 , , \"CW\" ) FBt . callback := Func ( \"ChoseFiles\" ) . Bind ( FEd ) SEd := myGui . Add ( 1 , 2 , \"Edit\" , , , 1 , , 1 ) SBt := myGui . Add ( 3 , 2 , \"Button\" , \"Default\" , \"Search\" , , , , , \"CW\" ) lv_files := new GridGUI . ListviewControl ( myGui . hwnd , , \"File Names|Line Num|Line|Path\" ) myGui . AddControl ( \"1-3\" , 3 , lv_files , 1 , 1 , 1 , 1 ) sbar := new GridGUI . StatusBarControl ( myGui . hwnd ) myGui . AddControl ( \"1-3\" , 4 , sbar , , , 1 ) myGui . GetNewestCellGroup () . borderY := 0 SBt . callback := Func ( \"SearchCallback\" ) . Bind ( lv_files , SEd , FEd , sbar ) sbar . SetParts ( 60 , 40 ) myGui . Show ( \"w700 h700\" ) return #If myGui . WinActive () && myGui . ControlGetFocus () = lv_files . hwnd ^c:: Clipboard := JoinFileTextLine ( \" `n \" , lv_files . GetSelection (), 3 ) ;^a::lv_files.SetSelection() #If SearchCallback ( lstview , term , path , sbar ) { Static s := new Sleepy () term := term . vVar path := path . vVar sbar . SetText ( \"\" , 3 ) s . Start () lstview . Delete () files := GetFilesInFolder ( path , , \"r\" ) count := Search ( lstview , term , files , sbar ) elapsed := s . Elapsed () lstview . ModifyCol (, \"AutoHdr\" ) lstview . ModifyCol ( 1 , \"AutoHdr\" ) sbar . SetText ( \" `t Completed\" , 1 ) sbar . SetText ( \"Found \" count \" occurrences in \" Round ( elapsed / 1000 , 3 ) \" seconds\" , 3 ) } Search ( lstview , term , files , sbar ) { sbar . SetText ( \" `t Searching\" , 1 ) sbar . SetText ( \" `t`t 0.0%\" , 2 ) length := files . Length () count := 0 progress := 0 for i , file in files { SplitPath , % file , FileName , Dir Loop , Read , % file { if ( A_LoopReadLine ~= term ) { lstview . Add (, FileName , A_Index , Trim ( A_LoopReadLine ), Dir ) count ++ } } currentProgress := Round ( A_Index / length * 100 , 1 ) if ( currentProgress != progress ) { sbar . SetText ( \" `t`t \" Round ( A_Index / length * 100 , 1 ) \"%\" , 2 ) progress := currentProgress } } return count } ChoseFiles ( path ) { FileSelectFile , selection , 3 , % path . vVar attributes := FileExist ( selection ) if ( attributes ) { if ( InStr ( attributes , \"D\" )) { selection .= \"\\*\" } path . GuiControl ( \"\" , selection ) } } Class Sleepy { __New () { DllCall ( \"QueryPerformanceFrequency\" , \"Int64*\" , freq ) this . freq := freq } Start () { DllCall ( \"QueryPerformanceCounter\" , \"Int64*\" , start ) this . started := start } Now () { DllCall ( \"QueryPerformanceCounter\" , \"Int64*\" , now ) return now } Elapsed () { return ( this . Now () - this . started ) / this . freq * 1000 } Sleep ( time ) { this . Start () Sleep , % time > 25 ? time - 25 : - 1 While ( this . Elapsed () < time ) { } } } GetFilesInFolder ( path , maxitems := False , mode := \"\" ) { files := [] Loop , Files , % path , % mode { if ( maxitems && A_Index > maxitems ) { Break } files . Push ( A_LoopFileLongPath ) } return files } JoinFileTextLine ( sep , obj , index ) { for key , val in obj str .= val [ index ] . sep return SubStr ( str , 1 , - StrLen ( sep )) }","title":"Example Find Text in Files"},{"location":"Examples/Example%20Font/","text":"Example Font #Include < GridGUI > myGui := new GridGUI ( \"Font Example\" , \"resize\" , True ) myGui . GuiClose := GridGUI . ExitApp args := { text : \"AuToHotKey\" , exW : 1 , exH : 1 } i := 1 myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . Font ( \"cTeal\" , \"Times New Roman\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . add ( 1 , i ++ , \"Text\" , args ) . Font ( \"s12 cFuchsia\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) . Font ( \"s12 q1 cGreen\" , \"Verdana\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . Font ( \"c0000FF\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Font"},{"location":"Examples/Example%20Font/#example-font","text":"#Include < GridGUI > myGui := new GridGUI ( \"Font Example\" , \"resize\" , True ) myGui . GuiClose := GridGUI . ExitApp args := { text : \"AuToHotKey\" , exW : 1 , exH : 1 } i := 1 myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . Font ( \"cTeal\" , \"Times New Roman\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . add ( 1 , i ++ , \"Text\" , args ) . Font ( \"s12 cFuchsia\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) . Font ( \"s12 q1 cGreen\" , \"Verdana\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . Font ( \"c0000FF\" ) myGui . add ( 1 , i ++ , \"Text\" , args ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example Font"},{"location":"Examples/Example%20GDI/","text":"Example GDI #Include , < Gdip > #Include < GridGUI > #NoEnv SetBatchLines , - 1 SetWinDelay , 0 if ( ! pToken := Gdip_Startup ()) { MsgBox , 48 , gdiplus error ! , Gdiplus failed to start . Please ensure you have gdiplus on your system ExitApp } myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) laugh := new GdiLaughingMan ( myGui . hwnd , 100 ) myGui . AddControl ( 3 , \"2-3\" , laugh , 1 , 1 , 1 , 1 ) myGui . GetNewestCellGroup () . SetAspectRatio ( 1 ) myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return Class GdiLaughingMan Extends GridGUI . GdiControl { Images := [] pBackground := 0 pForground := 0 index := 0 interval := 25 ratio := 601 / 552 __New ( guiHwnd , minsize , interval := 25 ) { this . interval := interval Base . __New ( guiHwnd , \"w\" minsize \" h\" minsize , new GridGUI . BoundFunc ( \"GdiLaughingMan.DelayedUpdate\" , this )) this . StartAnimation () } DelayedUpdate ( ctrl ) { fun := new GridGUI . BoundFunc ( \"GdiLaughingMan.UpdateLaughinManImages\" , this , GridGUI . Util . GetSizeByLimitingSide ( this . pos , this . ratio ) . w ) SetTimer , % fun , - 100 this . GDIDraw () } StartAnimation ( interval := 25 ) { if ( this . fun ) { this . StopAnimation () } interval := interval ? interval : this . interval fun := this . fun := new GridGUI . BoundFunc ( \"GdiLaughingMan.Animate\" , this ) SetTimer , % fun , % interval } AnimationSetSpeed ( interval ) { this . StopAnimation () fun := this . fun := new GridGUI . BoundFunc ( \"GdiLaughingMan.Animate\" , this ) SetTimer , % fun , % interval } StopAnimation () { if ( this . fun ) { fun := this . fun SetTimer , % fun , Off this . fun := \"\" } } Animate () { this . index := this . index + 1 < this . imgSize ? this . index + 1 : 1 if ( ! this . pBackground || ! this . pForground ) { return } pText := this . GetNextImage ( this . index ) Gdip_DrawImage ( this . G , this . pBackground ) Gdip_DrawImage ( this . G , pText ) Gdip_DrawImage ( this . G , this . pForground ) this . GDIDraw () } GetNextImage ( index ) { if ( ! this . Images [ index ]) { Gdip_GraphicsClear ( this . G ) this . Images [ index ] := this . GetRotatedImage ( Angle := index * - 1.5 , this . pText ) } return this . Images [ index ] } UpdateLaughinManImages ( size ) { if ( this . pre_size != size - 2 ) { Critical size -= 2 Gdip_GraphicsClear ( this . G ) this . pre_size := size Colour := 0xff111b62 Angle := 0 Font := \"Impact\" Height := size / this . ratio Width := size / this . ratio Width2 := size fSize := 49 / 6 Options := \"x\" Width / 2 \" y\" Height * ( fSize + 17 ) / 550 \" h\" Height * 57 / 550 \" w10 Centre c\" SubStr ( Colour , 3 ) \" r4 s\" Height * fSize * 4 / 550 \" Bold\" Str := \"I thought what I'd do was, I'd pretend I was one of those deaf-mutes. \" Gdip_DisposeImage ( this . pBackground ) Gdip_DisposeImage ( this . pForground ) Gdip_DisposeImage ( this . pText ) this . pBackground := \"\" this . pForground := \"\" this . pBackground := this . GetBackground ( Colour , Width , Height , Width2 ) this . pForground := this . GetForground ( Colour , Width2 , Height ) this . pText := this . CircularText ( Angle , Str , Width , Height , Font , Options ) for i , img in this . Images { Gdip_DisposeImage ( img ) } this . Images := [] this . imgSize := 360 / 1.5 } } CircularText ( Angle , Str , Width , Height , Font , Options ){ pBitmap := Gdip_CreateBitmap ( Width , Height ) G := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( G , 4 ) if ( ! Angle ) { Angle := 360 / StrLen ( Str ) } for i , chr in StrSplit ( Str ) { Gdip_TextToGraphics ( G , chr , Options , Font , Width , Height ) this . RotateAroundCenter ( G , Angle , Width , Height ) } Gdip_DeleteGraphics ( G ) Return pBitmap } GetRotatedImage ( Angle , pBitmap ) { Gdip_GetImageDimensions ( pBitmap , Width , Height ) resBitmap := Gdip_CreateBitmap ( Width , Height ) G := Gdip_GraphicsFromImage ( resBitmap ) Gdip_SetSmoothingMode ( G , 4 ) this . RotateAroundCenter ( G , Angle , Width , Height ) Gdip_DrawImage ( G , pBitmap ) Gdip_DeleteGraphics ( G ) Return resBitmap } RotateAroundCenter ( G , Angle , Width , Height ) { Gdip_TranslateWorldTransform ( G , Width / 2 , Height / 2 ) Gdip_RotateWorldTransform ( G , Angle ) Gdip_TranslateWorldTransform ( G , - Width / 2 , - Height / 2 ) } GetForground ( Colour , Width , Height ) { pBitmap := Gdip_CreateBitmap ( Width + 2 , Height ) G := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( G , 4 ) EH := 550 ; ExampleHight pSize := Height * 32 / EH ; Head Border Width cSize := Height * 114 / EH ; Head Border Width cY := Height * 215 / EH ; Start of Head Hole capOH := Height * 50 / EH ; Cap Opening Height capOY := Height * 247 / EH ; Start of Cap Opening capOX := Width - cSize + pSize / 2 ; Start of Cap Opening hStart := Height * ( 49 + 17 ) / EH ; Start of Head Border pBrush := Gdip_BrushCreateSolid ( 0xffffffff ) Gdip_FillEllipse ( G , pBrush , Width - cSize + pSize / 2 - 1 , cY + pSize / 2 , cSize - pSize , cSize - pSize ) pPen := Gdip_CreatePen ( Colour , pSize ) Gdip_DrawEllipse ( G , pPen , Width - cSize + pSize / 2 - 1 , cY + pSize / 2 , cSize - pSize , cSize - pSize ) pBrush2 := Gdip_BrushCreateSolid ( Colour ) Gdip_FillRectangle ( G , pBrush2 , capOX - cSize / 3 , cY , hStart , pSize ) Gdip_FillRectangle ( G , pBrush2 , capOX - cSize / 3 , cY + capOH + pSize , hStart , pSize ) Gdip_FillRectangle ( G , pBrush , capOX - cSize / 2 , capOY , cSize - pSize / 2 + 0.5 , capOH + 0.5 ) Gdip_DeletePen ( pPen ) Gdip_DeleteBrush ( pBrush ) Gdip_DeleteBrush ( pBrush2 ) Gdip_DeleteGraphics ( G ) return pBitmap } GetBackground ( Colour , Width , Height , Width2 ) { pBitmap := Gdip_CreateBitmap ( Width2 + 2 , Height + 2 ) G := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( G , 4 ) EH := 550 ; ExampleHight bSize := Height * 17 / EH ; Border Width hSize := Height * 32 / EH ; Head Border Width hStart := Height * ( 49 + 17 ) / EH ; Start of Head Border hWidth := hStart * 2 + hSize holeH := Height * 14 / EH ; Head Hole Height holeY := Height * 247 / EH ; Start of Head Hole capH := Height * 32 / EH ; Cap Height capY := Height * 215 / EH ; Start of Head Hole capTopTW := Height * 19 / EH ; Cap Top Top Width capTopBW := Height * 27 / EH ; Cap Top Bottum Width capTopH := Height * 12 / EH ; Cap Top Height capTopY := Height * 58 / EH ; Start of Cap Top capOH := Height * 50 / EH ; Cap Opening Height capOY := Height * 248 / EH ; Start of Cap Opening capOX := Width - hWidth + hStart ; Start of Cap Opening mS := Height * 30 / EH ; Mouth Height mY := Height * 132 / EH ; Start of Mouth pBrush := Gdip_BrushCreateSolid ( 0xffffffff ) pBrush2 := Gdip_BrushCreateSolid ( Colour ) ; Addeds the ahk default gui color as background to make the edges look nicer pBrush555 := Gdip_BrushCreateSolid ( 0xfff0f0f0 ) ;pBrush555 := Gdip_BrushCreateSolid(0xffff50ff) Gdip_FillRectangle ( G , pBrush555 , 0 , 0 , Width2 + 2 , Height + 2 ) ; White Background Gdip_FillEllipse ( G , pBrush , bSize / 2 , bSize / 2 , Width - bSize , Height - bSize ) ; Flat part of Mouth Gdip_FillRectangle ( G , pBrush2 , mY + mS / 2 , capOY + capOH - 1 , Width - ( mY + mS / 2 ) * 2 , mS ) ; Curved part of Mouth pPen := Gdip_CreatePen ( Colour , mS ) Gdip_DrawEllipse ( G , pPen , mY + mS / 2 , mY + mS / 2 , Width - ( mY + mS / 2 ) * 2 , Width - ( mY + mS / 2 ) * 2 ) Gdip_DeletePen ( pPen ) Gdip_FillRectangle ( G , pBrush , mY * 0.8 , mY * 0.8 , Width - mY * 1.5 , capOY + capOH - mY * 0.8 ) ; Eyes this . DrawEyes ( G , Colour , Width , Height ) ; Thin Blue Border pPen := Gdip_CreatePen ( Colour , bSize ) Gdip_DrawEllipse ( G , pPen , bSize / 2 , bSize / 2 , Width - bSize , Height - bSize ) Gdip_DeletePen ( pPen ) ; Thick Blue Border pPen := Gdip_CreatePen ( Colour , hSize ) Gdip_DrawEllipse ( G , pPen , hStart + hSize / 2 , hStart + hSize / 2 , Width - hWidth , Height - hWidth ) Gdip_DeletePen ( pPen ) ; White Hole in the Left Part of the Face Gdip_FillRectangle ( G , pBrush , hStart , holeY , hSize * 1.2 , holeH ) ; Thick Blue Line Over the Eyes Gdip_FillRectangle ( G , pBrush2 , hStart + hSize , capY , Width - hWidth - hSize , capH ) ; Blue Shape On Top the Cap xt := Width / 2 - capTopTW / 2 , yt := capTopY , xb := Width / 2 - capTopBW / 2 , yb := capTopY + capTopH points := xt \",\" yt \"|\" xt + capTopTW \",\" yt \"|\" xb + capTopBW \",\" yb \"|\" xb \",\" yb Gdip_FillPolygon ( G , pBrush2 , points ) ;Gdip_FillRectangle(G, pBrush, capOX - hSize / 2, capOY, hSize * 2, capOH) Gdip_DeleteBrush ( pBrush ) Gdip_DeleteBrush ( pBrush2 ) Gdip_DeleteGraphics ( G ) return pBitmap } DrawEyes ( G , Colour , Width , Height ) { pBitmap := Gdip_CreateBitmap ( Width , Height ) eyesG := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( eyesG , 4 ) EH := 550 ; ExampleHight eyeD := Height * 70 / EH ; Eye Diameter eyeY := Height * 254 / EH ; Start of Eye eyeX1 := Height * 166 / EH ; Start of Eye eyeX2 := Height * 313 / EH ; Start of Eye pupilH := Height * 14 * 2 / EH pBrush := Gdip_BrushCreateSolid ( 0xfffffffff ) pBrush2 := Gdip_BrushCreateSolid ( Colour ) Gdip_FillEllipse ( eyesG , pBrush2 , eyeX1 , eyeY , eyeD , eyeD ) Gdip_FillEllipse ( eyesG , pBrush2 , eyeX2 , eyeY , eyeD , eyeD ) Gdip_FillEllipse ( eyesG , pBrush , eyeX1 - 1 , eyeY + eyeD / 2 - pupilH / 2 , eyeD + 2 , pupilH ) Gdip_FillEllipse ( eyesG , pBrush , eyeX2 - 1 , eyeY + eyeD / 2 - pupilH / 2 , eyeD + 2 , pupilH ) this . ClearRect ( eyesG , eyeX1 * 0.95 , eyeY + eyeD / 2 , eyeD * 1.3 , eyeD / 2 ) this . ClearRect ( eyesG , eyeX2 * 0.95 , eyeY + eyeD / 2 , eyeD * 1.3 , eyeD / 2 ) Gdip_DrawImage ( G , pBitmap ) Gdip_DeleteBrush ( pBrush ) Gdip_DeleteBrush ( pBrush2 ) Gdip_DeleteGraphics ( eyesG ) Gdip_DisposeImage ( pBitmap ) } ClearRect ( G , x , y , w , h ) { Gdip_SetClipRect ( G , x , y , w , h ) Gdip_GraphicsClear ( G ) Gdip_ResetClip ( eyesG ) } }","title":"GDI"},{"location":"Examples/Example%20GDI/#example-gdi","text":"#Include , < Gdip > #Include < GridGUI > #NoEnv SetBatchLines , - 1 SetWinDelay , 0 if ( ! pToken := Gdip_Startup ()) { MsgBox , 48 , gdiplus error ! , Gdiplus failed to start . Please ensure you have gdiplus on your system ExitApp } myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) laugh := new GdiLaughingMan ( myGui . hwnd , 100 ) myGui . AddControl ( 3 , \"2-3\" , laugh , 1 , 1 , 1 , 1 ) myGui . GetNewestCellGroup () . SetAspectRatio ( 1 ) myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return Class GdiLaughingMan Extends GridGUI . GdiControl { Images := [] pBackground := 0 pForground := 0 index := 0 interval := 25 ratio := 601 / 552 __New ( guiHwnd , minsize , interval := 25 ) { this . interval := interval Base . __New ( guiHwnd , \"w\" minsize \" h\" minsize , new GridGUI . BoundFunc ( \"GdiLaughingMan.DelayedUpdate\" , this )) this . StartAnimation () } DelayedUpdate ( ctrl ) { fun := new GridGUI . BoundFunc ( \"GdiLaughingMan.UpdateLaughinManImages\" , this , GridGUI . Util . GetSizeByLimitingSide ( this . pos , this . ratio ) . w ) SetTimer , % fun , - 100 this . GDIDraw () } StartAnimation ( interval := 25 ) { if ( this . fun ) { this . StopAnimation () } interval := interval ? interval : this . interval fun := this . fun := new GridGUI . BoundFunc ( \"GdiLaughingMan.Animate\" , this ) SetTimer , % fun , % interval } AnimationSetSpeed ( interval ) { this . StopAnimation () fun := this . fun := new GridGUI . BoundFunc ( \"GdiLaughingMan.Animate\" , this ) SetTimer , % fun , % interval } StopAnimation () { if ( this . fun ) { fun := this . fun SetTimer , % fun , Off this . fun := \"\" } } Animate () { this . index := this . index + 1 < this . imgSize ? this . index + 1 : 1 if ( ! this . pBackground || ! this . pForground ) { return } pText := this . GetNextImage ( this . index ) Gdip_DrawImage ( this . G , this . pBackground ) Gdip_DrawImage ( this . G , pText ) Gdip_DrawImage ( this . G , this . pForground ) this . GDIDraw () } GetNextImage ( index ) { if ( ! this . Images [ index ]) { Gdip_GraphicsClear ( this . G ) this . Images [ index ] := this . GetRotatedImage ( Angle := index * - 1.5 , this . pText ) } return this . Images [ index ] } UpdateLaughinManImages ( size ) { if ( this . pre_size != size - 2 ) { Critical size -= 2 Gdip_GraphicsClear ( this . G ) this . pre_size := size Colour := 0xff111b62 Angle := 0 Font := \"Impact\" Height := size / this . ratio Width := size / this . ratio Width2 := size fSize := 49 / 6 Options := \"x\" Width / 2 \" y\" Height * ( fSize + 17 ) / 550 \" h\" Height * 57 / 550 \" w10 Centre c\" SubStr ( Colour , 3 ) \" r4 s\" Height * fSize * 4 / 550 \" Bold\" Str := \"I thought what I'd do was, I'd pretend I was one of those deaf-mutes. \" Gdip_DisposeImage ( this . pBackground ) Gdip_DisposeImage ( this . pForground ) Gdip_DisposeImage ( this . pText ) this . pBackground := \"\" this . pForground := \"\" this . pBackground := this . GetBackground ( Colour , Width , Height , Width2 ) this . pForground := this . GetForground ( Colour , Width2 , Height ) this . pText := this . CircularText ( Angle , Str , Width , Height , Font , Options ) for i , img in this . Images { Gdip_DisposeImage ( img ) } this . Images := [] this . imgSize := 360 / 1.5 } } CircularText ( Angle , Str , Width , Height , Font , Options ){ pBitmap := Gdip_CreateBitmap ( Width , Height ) G := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( G , 4 ) if ( ! Angle ) { Angle := 360 / StrLen ( Str ) } for i , chr in StrSplit ( Str ) { Gdip_TextToGraphics ( G , chr , Options , Font , Width , Height ) this . RotateAroundCenter ( G , Angle , Width , Height ) } Gdip_DeleteGraphics ( G ) Return pBitmap } GetRotatedImage ( Angle , pBitmap ) { Gdip_GetImageDimensions ( pBitmap , Width , Height ) resBitmap := Gdip_CreateBitmap ( Width , Height ) G := Gdip_GraphicsFromImage ( resBitmap ) Gdip_SetSmoothingMode ( G , 4 ) this . RotateAroundCenter ( G , Angle , Width , Height ) Gdip_DrawImage ( G , pBitmap ) Gdip_DeleteGraphics ( G ) Return resBitmap } RotateAroundCenter ( G , Angle , Width , Height ) { Gdip_TranslateWorldTransform ( G , Width / 2 , Height / 2 ) Gdip_RotateWorldTransform ( G , Angle ) Gdip_TranslateWorldTransform ( G , - Width / 2 , - Height / 2 ) } GetForground ( Colour , Width , Height ) { pBitmap := Gdip_CreateBitmap ( Width + 2 , Height ) G := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( G , 4 ) EH := 550 ; ExampleHight pSize := Height * 32 / EH ; Head Border Width cSize := Height * 114 / EH ; Head Border Width cY := Height * 215 / EH ; Start of Head Hole capOH := Height * 50 / EH ; Cap Opening Height capOY := Height * 247 / EH ; Start of Cap Opening capOX := Width - cSize + pSize / 2 ; Start of Cap Opening hStart := Height * ( 49 + 17 ) / EH ; Start of Head Border pBrush := Gdip_BrushCreateSolid ( 0xffffffff ) Gdip_FillEllipse ( G , pBrush , Width - cSize + pSize / 2 - 1 , cY + pSize / 2 , cSize - pSize , cSize - pSize ) pPen := Gdip_CreatePen ( Colour , pSize ) Gdip_DrawEllipse ( G , pPen , Width - cSize + pSize / 2 - 1 , cY + pSize / 2 , cSize - pSize , cSize - pSize ) pBrush2 := Gdip_BrushCreateSolid ( Colour ) Gdip_FillRectangle ( G , pBrush2 , capOX - cSize / 3 , cY , hStart , pSize ) Gdip_FillRectangle ( G , pBrush2 , capOX - cSize / 3 , cY + capOH + pSize , hStart , pSize ) Gdip_FillRectangle ( G , pBrush , capOX - cSize / 2 , capOY , cSize - pSize / 2 + 0.5 , capOH + 0.5 ) Gdip_DeletePen ( pPen ) Gdip_DeleteBrush ( pBrush ) Gdip_DeleteBrush ( pBrush2 ) Gdip_DeleteGraphics ( G ) return pBitmap } GetBackground ( Colour , Width , Height , Width2 ) { pBitmap := Gdip_CreateBitmap ( Width2 + 2 , Height + 2 ) G := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( G , 4 ) EH := 550 ; ExampleHight bSize := Height * 17 / EH ; Border Width hSize := Height * 32 / EH ; Head Border Width hStart := Height * ( 49 + 17 ) / EH ; Start of Head Border hWidth := hStart * 2 + hSize holeH := Height * 14 / EH ; Head Hole Height holeY := Height * 247 / EH ; Start of Head Hole capH := Height * 32 / EH ; Cap Height capY := Height * 215 / EH ; Start of Head Hole capTopTW := Height * 19 / EH ; Cap Top Top Width capTopBW := Height * 27 / EH ; Cap Top Bottum Width capTopH := Height * 12 / EH ; Cap Top Height capTopY := Height * 58 / EH ; Start of Cap Top capOH := Height * 50 / EH ; Cap Opening Height capOY := Height * 248 / EH ; Start of Cap Opening capOX := Width - hWidth + hStart ; Start of Cap Opening mS := Height * 30 / EH ; Mouth Height mY := Height * 132 / EH ; Start of Mouth pBrush := Gdip_BrushCreateSolid ( 0xffffffff ) pBrush2 := Gdip_BrushCreateSolid ( Colour ) ; Addeds the ahk default gui color as background to make the edges look nicer pBrush555 := Gdip_BrushCreateSolid ( 0xfff0f0f0 ) ;pBrush555 := Gdip_BrushCreateSolid(0xffff50ff) Gdip_FillRectangle ( G , pBrush555 , 0 , 0 , Width2 + 2 , Height + 2 ) ; White Background Gdip_FillEllipse ( G , pBrush , bSize / 2 , bSize / 2 , Width - bSize , Height - bSize ) ; Flat part of Mouth Gdip_FillRectangle ( G , pBrush2 , mY + mS / 2 , capOY + capOH - 1 , Width - ( mY + mS / 2 ) * 2 , mS ) ; Curved part of Mouth pPen := Gdip_CreatePen ( Colour , mS ) Gdip_DrawEllipse ( G , pPen , mY + mS / 2 , mY + mS / 2 , Width - ( mY + mS / 2 ) * 2 , Width - ( mY + mS / 2 ) * 2 ) Gdip_DeletePen ( pPen ) Gdip_FillRectangle ( G , pBrush , mY * 0.8 , mY * 0.8 , Width - mY * 1.5 , capOY + capOH - mY * 0.8 ) ; Eyes this . DrawEyes ( G , Colour , Width , Height ) ; Thin Blue Border pPen := Gdip_CreatePen ( Colour , bSize ) Gdip_DrawEllipse ( G , pPen , bSize / 2 , bSize / 2 , Width - bSize , Height - bSize ) Gdip_DeletePen ( pPen ) ; Thick Blue Border pPen := Gdip_CreatePen ( Colour , hSize ) Gdip_DrawEllipse ( G , pPen , hStart + hSize / 2 , hStart + hSize / 2 , Width - hWidth , Height - hWidth ) Gdip_DeletePen ( pPen ) ; White Hole in the Left Part of the Face Gdip_FillRectangle ( G , pBrush , hStart , holeY , hSize * 1.2 , holeH ) ; Thick Blue Line Over the Eyes Gdip_FillRectangle ( G , pBrush2 , hStart + hSize , capY , Width - hWidth - hSize , capH ) ; Blue Shape On Top the Cap xt := Width / 2 - capTopTW / 2 , yt := capTopY , xb := Width / 2 - capTopBW / 2 , yb := capTopY + capTopH points := xt \",\" yt \"|\" xt + capTopTW \",\" yt \"|\" xb + capTopBW \",\" yb \"|\" xb \",\" yb Gdip_FillPolygon ( G , pBrush2 , points ) ;Gdip_FillRectangle(G, pBrush, capOX - hSize / 2, capOY, hSize * 2, capOH) Gdip_DeleteBrush ( pBrush ) Gdip_DeleteBrush ( pBrush2 ) Gdip_DeleteGraphics ( G ) return pBitmap } DrawEyes ( G , Colour , Width , Height ) { pBitmap := Gdip_CreateBitmap ( Width , Height ) eyesG := Gdip_GraphicsFromImage ( pBitmap ) Gdip_SetSmoothingMode ( eyesG , 4 ) EH := 550 ; ExampleHight eyeD := Height * 70 / EH ; Eye Diameter eyeY := Height * 254 / EH ; Start of Eye eyeX1 := Height * 166 / EH ; Start of Eye eyeX2 := Height * 313 / EH ; Start of Eye pupilH := Height * 14 * 2 / EH pBrush := Gdip_BrushCreateSolid ( 0xfffffffff ) pBrush2 := Gdip_BrushCreateSolid ( Colour ) Gdip_FillEllipse ( eyesG , pBrush2 , eyeX1 , eyeY , eyeD , eyeD ) Gdip_FillEllipse ( eyesG , pBrush2 , eyeX2 , eyeY , eyeD , eyeD ) Gdip_FillEllipse ( eyesG , pBrush , eyeX1 - 1 , eyeY + eyeD / 2 - pupilH / 2 , eyeD + 2 , pupilH ) Gdip_FillEllipse ( eyesG , pBrush , eyeX2 - 1 , eyeY + eyeD / 2 - pupilH / 2 , eyeD + 2 , pupilH ) this . ClearRect ( eyesG , eyeX1 * 0.95 , eyeY + eyeD / 2 , eyeD * 1.3 , eyeD / 2 ) this . ClearRect ( eyesG , eyeX2 * 0.95 , eyeY + eyeD / 2 , eyeD * 1.3 , eyeD / 2 ) Gdip_DrawImage ( G , pBitmap ) Gdip_DeleteBrush ( pBrush ) Gdip_DeleteBrush ( pBrush2 ) Gdip_DeleteGraphics ( eyesG ) Gdip_DisposeImage ( pBitmap ) } ClearRect ( G , x , y , w , h ) { Gdip_SetClipRect ( G , x , y , w , h ) Gdip_GraphicsClear ( G ) Gdip_ResetClip ( eyesG ) } }","title":"Example GDI"},{"location":"Examples/Example%20Grid%20Button/","text":"Example Grid Button #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( 1 , 1 , \"Button\" , , \"Button1\" ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button2\" ) myGui . Add ( 2 , 1 , \"Button\" , , \"Button3\" ) myGui . Add ( 2 , 2 , \"Button\" , , \"Button4\" ) myGui . Add ( \"1-3\" , 3 , \"Button\" , , \"Button5\" , 1 , , 1 ) myGui . Add ( 3 , \"1-2\" , \"Button\" , , \"Button6\" , 1 , 1 , 1 , 1 ) myGui . Show () return","title":"Grid Button"},{"location":"Examples/Example%20Grid%20Button/#example-grid-button","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( 1 , 1 , \"Button\" , , \"Button1\" ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button2\" ) myGui . Add ( 2 , 1 , \"Button\" , , \"Button3\" ) myGui . Add ( 2 , 2 , \"Button\" , , \"Button4\" ) myGui . Add ( \"1-3\" , 3 , \"Button\" , , \"Button5\" , 1 , , 1 ) myGui . Add ( 3 , \"1-2\" , \"Button\" , , \"Button6\" , 1 , 1 , 1 , 1 ) myGui . Show () return","title":"Example Grid Button"},{"location":"Examples/Example%20Grid%20Game/","text":"Example Grid Game #Include < GridGUI > SetBatchLines , - 1 myGui := new GridGUI ( \"Grid Game\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp subGrid := new GridGUI . SubGrid ( myGui . hwnd ) subGrid . Font ( \"s15\" ) subGrid . Add ( 1 , 1 , \"Text\" , { text : \"Score:\" , justify : \"EC\" , exW : 1 }) score := subGrid . Add ( 2 , 1 , \"Text\" , { text : \"000000\" , justify : \"WC\" , exW : 1 }) subGrid . AutoSize () subGrid . Pos . w := 0 subGrid . __Init ( subGrid . Pos ) score . GuiControl ( \"\" , \"0\" ) myGui . AddControl ( \"1-100\" , 1 , subGrid , 1 , , 1 ) ctrl := myGui . Add ( \"1-100\" , \"2-101\" , \"Text\" , , \"\" , 1 , 1 , 1 , 1 ) myGui . RegisterBackground ( ctrl ) fun := Func ( \"AddButtonTimer\" ) . Bind ( myGui , score , 1 , 100 , 2 , 101 ) SetTimer , % fun , 1000 myGui . Show ( \"w1000 h\" 1000 + subGrid . Pos . h ) myGui . MinSize () return AddButtonTimer ( gui , score , minX , maxX , minY , maxY ) { Random , x , % minX , % maxX Random , y , % minY , % maxY AddButton ( gui , x , y , score ) GuiReDraw ( gui ) } AddButton ( gui , x , y , score ) { ctrl := gui . Add ( x , y , \"Button\" , \"w0 h0\" , \"\" , 1 , 1 , 1 , 1 ) ctrl . callback := Func ( \"RemoveButton\" ) . Bind ( gui , gui . GetNewestCellGroup (), score ) ctrl . ZOrder ( True ) } RemoveButton ( gui , cell , score ) { gui . RemoveCell ( cell ) score . GuiControl ( \"\" , score . GuiControlGet () + 1 ) GuiReDraw ( gui ) } GuiReDraw ( gui ) { gui . Redraw () ;area := gui.pos.copy(), area.x := 0, area.y := 0 ;gui.__DrawGrid(area) }","title":"Grid Game"},{"location":"Examples/Example%20Grid%20Game/#example-grid-game","text":"#Include < GridGUI > SetBatchLines , - 1 myGui := new GridGUI ( \"Grid Game\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp subGrid := new GridGUI . SubGrid ( myGui . hwnd ) subGrid . Font ( \"s15\" ) subGrid . Add ( 1 , 1 , \"Text\" , { text : \"Score:\" , justify : \"EC\" , exW : 1 }) score := subGrid . Add ( 2 , 1 , \"Text\" , { text : \"000000\" , justify : \"WC\" , exW : 1 }) subGrid . AutoSize () subGrid . Pos . w := 0 subGrid . __Init ( subGrid . Pos ) score . GuiControl ( \"\" , \"0\" ) myGui . AddControl ( \"1-100\" , 1 , subGrid , 1 , , 1 ) ctrl := myGui . Add ( \"1-100\" , \"2-101\" , \"Text\" , , \"\" , 1 , 1 , 1 , 1 ) myGui . RegisterBackground ( ctrl ) fun := Func ( \"AddButtonTimer\" ) . Bind ( myGui , score , 1 , 100 , 2 , 101 ) SetTimer , % fun , 1000 myGui . Show ( \"w1000 h\" 1000 + subGrid . Pos . h ) myGui . MinSize () return AddButtonTimer ( gui , score , minX , maxX , minY , maxY ) { Random , x , % minX , % maxX Random , y , % minY , % maxY AddButton ( gui , x , y , score ) GuiReDraw ( gui ) } AddButton ( gui , x , y , score ) { ctrl := gui . Add ( x , y , \"Button\" , \"w0 h0\" , \"\" , 1 , 1 , 1 , 1 ) ctrl . callback := Func ( \"RemoveButton\" ) . Bind ( gui , gui . GetNewestCellGroup (), score ) ctrl . ZOrder ( True ) } RemoveButton ( gui , cell , score ) { gui . RemoveCell ( cell ) score . GuiControl ( \"\" , score . GuiControlGet () + 1 ) GuiReDraw ( gui ) } GuiReDraw ( gui ) { gui . Redraw () ;area := gui.pos.copy(), area.x := 0, area.y := 0 ;gui.__DrawGrid(area) }","title":"Example Grid Game"},{"location":"Examples/Example%20Grid%20Test/","text":"Example Grid Test #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp MsgBox , % myGui . hwnd /* myGui.Add(1, 1, \"Button\", \"w10 h10\") myGui.Add(10, 1, \"Button\", \"w10 h10\") myGui.Add(1, 10, \"Button\", \"w10 h10\") myGui.Add(10, 10, \"Button\", \"w10 h10\") */ loop 8 { myGui . Add ( A_Index + 1 , 1 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } loop 8 { myGui . Add ( A_Index + 1 , 10 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } loop 8 { myGui . Add ( 1 , A_Index + 1 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } loop 8 { myGui . Add ( 10 , A_Index + 1 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } /* loop 10 { myGui.Add(A_Index, 1, \"Button\", \"w10 h10\", , 1, 1) } loop 10 { myGui.Add(A_Index, 10, \"Button\", \"w10 h10\", , 1, 1) } loop 8 { myGui.Add(1, A_Index + 1, \"Button\", \"w10 h10\", , 1, 1) } loop 8 { myGui.Add(10, A_Index + 1, \"Button\", \"w10 h10\", , 1, 1) } */ /* loop 10 { i := A_Index loop 10 { j := A_Index myGui.Add(i, j, \"Button\", \"w10 h10\", , 1, 1) } } */ myGui . Add ( \"2-9\" , \"2-9\" , \"Button\" , , , 1 , 1 , 1 , 1 ) myGui . Show ( \"w500 h500\" ) return","title":"Grid Test"},{"location":"Examples/Example%20Grid%20Test/#example-grid-test","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp MsgBox , % myGui . hwnd /* myGui.Add(1, 1, \"Button\", \"w10 h10\") myGui.Add(10, 1, \"Button\", \"w10 h10\") myGui.Add(1, 10, \"Button\", \"w10 h10\") myGui.Add(10, 10, \"Button\", \"w10 h10\") */ loop 8 { myGui . Add ( A_Index + 1 , 1 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } loop 8 { myGui . Add ( A_Index + 1 , 10 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } loop 8 { myGui . Add ( 1 , A_Index + 1 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } loop 8 { myGui . Add ( 10 , A_Index + 1 , \"Button\" , \"w10 h10\" , , 1 , 1 ) } /* loop 10 { myGui.Add(A_Index, 1, \"Button\", \"w10 h10\", , 1, 1) } loop 10 { myGui.Add(A_Index, 10, \"Button\", \"w10 h10\", , 1, 1) } loop 8 { myGui.Add(1, A_Index + 1, \"Button\", \"w10 h10\", , 1, 1) } loop 8 { myGui.Add(10, A_Index + 1, \"Button\", \"w10 h10\", , 1, 1) } */ /* loop 10 { i := A_Index loop 10 { j := A_Index myGui.Add(i, j, \"Button\", \"w10 h10\", , 1, 1) } } */ myGui . Add ( \"2-9\" , \"2-9\" , \"Button\" , , , 1 , 1 , 1 , 1 ) myGui . Show ( \"w500 h500\" ) return","title":"Example Grid Test"},{"location":"Examples/Example%20GroupBox%20Simple/","text":"Example GroupBox Simple #Include < GridGUI > myGui := new GridGUI ( \"GroupBox\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , \"1-3\" , \"GroupBox\" , \"w40 h40\" , \"Title\" , , , 1 , 1 ) myGui . Add ( 2 , 2 , \"Button\" , \"w50 h50\" , \"Button\" , 1 , 1 , 1 , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"GroupBox Simple"},{"location":"Examples/Example%20GroupBox%20Simple/#example-groupbox-simple","text":"#Include < GridGUI > myGui := new GridGUI ( \"GroupBox\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , \"1-3\" , \"GroupBox\" , \"w40 h40\" , \"Title\" , , , 1 , 1 ) myGui . Add ( 2 , 2 , \"Button\" , \"w50 h50\" , \"Button\" , 1 , 1 , 1 , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example GroupBox Simple"},{"location":"Examples/Example%20GroupBox/","text":"Example GroupBox #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-2\" , 1 , \"Text\" , , \"Find what?\" , , , , , \"CW\" ) myGui . Add ( \"1-2\" , 2 , \"Text\" , , \"Replace with?\" , , , , , \"CW\" ) myGui . Add ( \"3-9\" , 1 , \"Edit\" , \"Multi\" , , 1 , , 1 ) myGui . Add ( \"3-9\" , 2 , \"Edit\" , \"Multi\" , , 1 , , 1 ) myGui . Add ( \"1-6\" , \"3-8\" , \"GroupBox\" , \"w40 h40\" , \"Options\" , , , 1 , 1 , \"C\" ) myGui . Add ( 2 , 4 , \"Checkbox\" , , \"&Case Sensitive\" , , , , , \"CW\" ) myGui . Add ( 2 , 5 , \"Checkbox\" , , \"Replace &All?\" , , , , , \"CW\" ) myGui . Add ( 2 , 6 , \"Checkbox\" , , \"Rege&x Mode\" , , , , , \"CW\" ) myGui . Add ( 2 , 7 , \"Checkbox\" , , \"Remove Blanks?\" , , , , , \"CW\" ) myGui . Add ( 4 , 4 , \"Checkbox\" , , \"&Whole Words Only\" , , , , , \"CW\" ) myGui . Add ( 3 , 6 , \"Button\" , , \"?\" , , , , , \"CW\" ) myGui . Add ( 4 , 6 , \"Checkbox\" , , \"Full Regex\" , , , , , \"CW\" ) myGui . Add ( 5 , 6 , \"Checkbox\" , , \"Show Original?\" , , , , , \"CW\" ) myGui . Add ( 8 , 4 , \"Button\" , , \"&Update Content\" , , , , , \"CW\" ) myGui . Add ( 8 , 5 , \"Button\" , , \"&Copy\" , , , 1 , , \"CW\" ) myGui . Add ( \"1-9\" , 9 , \"Edit\" , \"Multi\" , , 1 , 1 , 1 , 1 ) myGui . Show () return","title":"GroupBox"},{"location":"Examples/Example%20GroupBox/#example-groupbox","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-2\" , 1 , \"Text\" , , \"Find what?\" , , , , , \"CW\" ) myGui . Add ( \"1-2\" , 2 , \"Text\" , , \"Replace with?\" , , , , , \"CW\" ) myGui . Add ( \"3-9\" , 1 , \"Edit\" , \"Multi\" , , 1 , , 1 ) myGui . Add ( \"3-9\" , 2 , \"Edit\" , \"Multi\" , , 1 , , 1 ) myGui . Add ( \"1-6\" , \"3-8\" , \"GroupBox\" , \"w40 h40\" , \"Options\" , , , 1 , 1 , \"C\" ) myGui . Add ( 2 , 4 , \"Checkbox\" , , \"&Case Sensitive\" , , , , , \"CW\" ) myGui . Add ( 2 , 5 , \"Checkbox\" , , \"Replace &All?\" , , , , , \"CW\" ) myGui . Add ( 2 , 6 , \"Checkbox\" , , \"Rege&x Mode\" , , , , , \"CW\" ) myGui . Add ( 2 , 7 , \"Checkbox\" , , \"Remove Blanks?\" , , , , , \"CW\" ) myGui . Add ( 4 , 4 , \"Checkbox\" , , \"&Whole Words Only\" , , , , , \"CW\" ) myGui . Add ( 3 , 6 , \"Button\" , , \"?\" , , , , , \"CW\" ) myGui . Add ( 4 , 6 , \"Checkbox\" , , \"Full Regex\" , , , , , \"CW\" ) myGui . Add ( 5 , 6 , \"Checkbox\" , , \"Show Original?\" , , , , , \"CW\" ) myGui . Add ( 8 , 4 , \"Button\" , , \"&Update Content\" , , , , , \"CW\" ) myGui . Add ( 8 , 5 , \"Button\" , , \"&Copy\" , , , 1 , , \"CW\" ) myGui . Add ( \"1-9\" , 9 , \"Edit\" , \"Multi\" , , 1 , 1 , 1 , 1 ) myGui . Show () return","title":"Example GroupBox"},{"location":"Examples/Example%20Gui%20Events/","text":"Example Gui Events #Include < GridGUI > myGui := new GridGUI ( \"Gui Events\" , \"resize\" ) Menu , SomeMenu , Standard TxtActive := myGui . Add ( 1 , 1 , \"Text\" , \"Center\" , \"Non Active\" ) Lbox := myGui . Add ( 1 , 2 , \"ListBox\" , , , 1 , 1 , 1 , 1 ) myGui . RegisterDropTarget ( Lbox , Func ( \"DroppedFiles\" ) . Bind ( Lbox )) myGui . GuiClose := GridGUI . ExitApp myGui . GuiSize := Func ( \"Size\" ) myGui . GuiMoved := Func ( \"Moved\" ) myGui . GuiActivate := Func ( \"Activated\" ) . Bind ( TxtActive ) myGui . GuiContextMenu := Func ( \"Menu\" ) myGui . AutoSize () myGui . MinSize () myGui . Show () return Size ( pos ) { ToolTip , % pos . ToStr () } Moved ( pos ) { ToolTip , % pos . ToStr () } Activated ( ctrl , bool ) { ctrl . GuiControl ( \"\" , bool ? \"Active\" : \"Non Active\" ) } DroppedFiles ( ctrl , paths ) { ctrl . GuiControl ( \"\" , \"|\" Join ( \"|\" , paths ) \"|\" ) } Menu ( pos ) { Menu , SomeMenu , Show , % pos . x , % pos . y } Join ( sep , params ) { for index , param in params { str .= param sep } return SubStr ( str , 1 , - StrLen ( sep )) }","title":"Gui Events"},{"location":"Examples/Example%20Gui%20Events/#example-gui-events","text":"#Include < GridGUI > myGui := new GridGUI ( \"Gui Events\" , \"resize\" ) Menu , SomeMenu , Standard TxtActive := myGui . Add ( 1 , 1 , \"Text\" , \"Center\" , \"Non Active\" ) Lbox := myGui . Add ( 1 , 2 , \"ListBox\" , , , 1 , 1 , 1 , 1 ) myGui . RegisterDropTarget ( Lbox , Func ( \"DroppedFiles\" ) . Bind ( Lbox )) myGui . GuiClose := GridGUI . ExitApp myGui . GuiSize := Func ( \"Size\" ) myGui . GuiMoved := Func ( \"Moved\" ) myGui . GuiActivate := Func ( \"Activated\" ) . Bind ( TxtActive ) myGui . GuiContextMenu := Func ( \"Menu\" ) myGui . AutoSize () myGui . MinSize () myGui . Show () return Size ( pos ) { ToolTip , % pos . ToStr () } Moved ( pos ) { ToolTip , % pos . ToStr () } Activated ( ctrl , bool ) { ctrl . GuiControl ( \"\" , bool ? \"Active\" : \"Non Active\" ) } DroppedFiles ( ctrl , paths ) { ctrl . GuiControl ( \"\" , \"|\" Join ( \"|\" , paths ) \"|\" ) } Menu ( pos ) { Menu , SomeMenu , Show , % pos . x , % pos . y } Join ( sep , params ) { for index , param in params { str .= param sep } return SubStr ( str , 1 , - StrLen ( sep )) }","title":"Example Gui Events"},{"location":"Examples/Example%20Keyword%20Arguments/","text":"Example Keyword Arguments #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( 1 , 1 , \"Text\" , { text : \"Find what?\" , justify : \"CW\" }) myGui . Add ( 1 , 2 , \"Text\" , { text : \"Replace with?\" , justify : \"CW\" }) myGui . Add ( \"2-7\" , 1 , \"Edit\" , { options : \"Multi\" , exW : 1 , fillW : 1 }) myGui . Add ( \"2-7\" , 2 , \"Edit\" , { options : \"Multi\" , exW : 1 , fillW : 1 }) myGui . Add ( 1 , 3 , \"Checkbox\" , { text : \"&Case Sensitive\" , justify : \"CW\" }) myGui . Add ( 1 , 4 , \"Checkbox\" , { text : \"Replace &All?\" , justify : \"CW\" }) myGui . Add ( 1 , 5 , \"Checkbox\" , { text : \"Rege&x Mode\" , justify : \"CW\" }) myGui . Add ( 1 , 6 , \"Checkbox\" , { text : \"Remove Blanks?\" , justify : \"CW\" }) myGui . Add ( 3 , 3 , \"Checkbox\" , { text : \"&Whole Words Only\" , justify : \"CW\" }) myGui . Add ( 2 , 5 , \"Button\" , { text : \"?\" , justify : \"CW\" }) myGui . Add ( 3 , 5 , \"Checkbox\" , { text : \"Full Regex\" , justify : \"CW\" }) myGui . Add ( 4 , 5 , \"Checkbox\" , { text : \"Show Original?\" , justify : \"CW\" }) myGui . Add ( 6 , 3 , \"Button\" , { text : \"&Update Content\" , justify : \"CW\" }) myGui . Add ( 6 , 4 , \"Button\" , { text : \"&Copy\" , fillW : 1 , justify : \"CW\" }) myGui . Add ( \"1-7\" , 7 , \"Edit\" , { options : \"Multi\" , exW : 1 , exH : 1 , fillW : 1 , fillH : 1 }) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Keyword Arguments"},{"location":"Examples/Example%20Keyword%20Arguments/#example-keyword-arguments","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( 1 , 1 , \"Text\" , { text : \"Find what?\" , justify : \"CW\" }) myGui . Add ( 1 , 2 , \"Text\" , { text : \"Replace with?\" , justify : \"CW\" }) myGui . Add ( \"2-7\" , 1 , \"Edit\" , { options : \"Multi\" , exW : 1 , fillW : 1 }) myGui . Add ( \"2-7\" , 2 , \"Edit\" , { options : \"Multi\" , exW : 1 , fillW : 1 }) myGui . Add ( 1 , 3 , \"Checkbox\" , { text : \"&Case Sensitive\" , justify : \"CW\" }) myGui . Add ( 1 , 4 , \"Checkbox\" , { text : \"Replace &All?\" , justify : \"CW\" }) myGui . Add ( 1 , 5 , \"Checkbox\" , { text : \"Rege&x Mode\" , justify : \"CW\" }) myGui . Add ( 1 , 6 , \"Checkbox\" , { text : \"Remove Blanks?\" , justify : \"CW\" }) myGui . Add ( 3 , 3 , \"Checkbox\" , { text : \"&Whole Words Only\" , justify : \"CW\" }) myGui . Add ( 2 , 5 , \"Button\" , { text : \"?\" , justify : \"CW\" }) myGui . Add ( 3 , 5 , \"Checkbox\" , { text : \"Full Regex\" , justify : \"CW\" }) myGui . Add ( 4 , 5 , \"Checkbox\" , { text : \"Show Original?\" , justify : \"CW\" }) myGui . Add ( 6 , 3 , \"Button\" , { text : \"&Update Content\" , justify : \"CW\" }) myGui . Add ( 6 , 4 , \"Button\" , { text : \"&Copy\" , fillW : 1 , justify : \"CW\" }) myGui . Add ( \"1-7\" , 7 , \"Edit\" , { options : \"Multi\" , exW : 1 , exH : 1 , fillW : 1 , fillH : 1 }) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example Keyword Arguments"},{"location":"Examples/Example%20Margin/","text":"Example Margin #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) oWB := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . Show () return +:: myGui . Margin ( myGui . margins [ \"x\" ] + 1 , myGui . margins [ \"y\" ] + 1 ) -:: myGui . Margin ( myGui . margins [ \"x\" ] - 1 , myGui . margins [ \"y\" ] - 1 )","title":"Margin"},{"location":"Examples/Example%20Margin/#example-margin","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 2 , \"Edit\" , \"w0\" , , 1 , , 1 ) oWB := myGui . Add ( 3 , \"2-3\" , \"ActiveX\" , \"w113 h43\" , \"shell explorer\" ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><html><body style= \"\" {margin:0;} \"\" ><img src= \"\" https://i.imgur.com/FlGrIY3.gif \"\" ></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button\" ) myGui . Add ( 2 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . Show () return +:: myGui . Margin ( myGui . margins [ \"x\" ] + 1 , myGui . margins [ \"y\" ] + 1 ) -:: myGui . Margin ( myGui . margins [ \"x\" ] - 1 , myGui . margins [ \"y\" ] - 1 )","title":"Example Margin"},{"location":"Examples/Example%20RadioGroups%202/","text":"Example RadioGroups 2 #Include < GridGUI > myGui1 := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui2 := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui1 . GuiClose := GridGUI . ExitApp myGui2 . GuiClose := GridGUI . ExitApp RG := new GridGUI . RadioGroupControl ( myGui1 . hwnd ) myGui1 . AddControl ( 1 , 1 , RG . New (, \"G1 Radio 1\" )) myGui1 . AddControl ( 1 , 2 , RG . New ( \"Checked1\" , \"G1 Radio 2\" )) myGui1 . AddControl ( 1 , 3 , RG . New (, \"G1 Radio 3\" )) myGui2 . AddControl ( 1 , 1 , RG . New (, \"Radio 4\" , myGui2 . hwnd )) myGui2 . AddControl ( 1 , 2 , RG . New (, \"Radio 5\" , myGui2 . hwnd )) myGui2 . AddControl ( 1 , 3 , RG . New (, \"Radio 6\" , myGui2 . hwnd )) myGui1 . AutoSize () myGui1 . MinSize () myGui1 . Show () myGui2 . AutoSize () myGui2 . MinSize () myGui2 . Show () myGui2 . Show ( \"x\" myGui1 . pos . x + myGui1 . pos . w ) return","title":"RadioGroups 2"},{"location":"Examples/Example%20RadioGroups%202/#example-radiogroups-2","text":"#Include < GridGUI > myGui1 := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui2 := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui1 . GuiClose := GridGUI . ExitApp myGui2 . GuiClose := GridGUI . ExitApp RG := new GridGUI . RadioGroupControl ( myGui1 . hwnd ) myGui1 . AddControl ( 1 , 1 , RG . New (, \"G1 Radio 1\" )) myGui1 . AddControl ( 1 , 2 , RG . New ( \"Checked1\" , \"G1 Radio 2\" )) myGui1 . AddControl ( 1 , 3 , RG . New (, \"G1 Radio 3\" )) myGui2 . AddControl ( 1 , 1 , RG . New (, \"Radio 4\" , myGui2 . hwnd )) myGui2 . AddControl ( 1 , 2 , RG . New (, \"Radio 5\" , myGui2 . hwnd )) myGui2 . AddControl ( 1 , 3 , RG . New (, \"Radio 6\" , myGui2 . hwnd )) myGui1 . AutoSize () myGui1 . MinSize () myGui1 . Show () myGui2 . AutoSize () myGui2 . MinSize () myGui2 . Show () myGui2 . Show ( \"x\" myGui1 . pos . x + myGui1 . pos . w ) return","title":"Example RadioGroups 2"},{"location":"Examples/Example%20RadioGroups/","text":"Example RadioGroups #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp RG1 := new GridGUI . RadioGroupControl ( myGui . hwnd ) RG2 := new GridGUI . RadioGroupControl ( myGui . hwnd ) myGui . AddControl ( 1 , 1 , RG1 . New (, \"G1 Radio 1\" )) myGui . AddControl ( 1 , 2 , RG1 . New ( \"Checked1\" , \"G1 Radio 2\" )) myGui . AddControl ( 1 , 3 , RG1 . New (, \"G1 Radio 3\" )) myGui . AddControl ( 2 , 1 , RG2 . New (, \"G2 Radio 1\" )) myGui . AddControl ( 2 , 2 , RG2 . New (, \"G2 Radio 2\" )) myGui . AddControl ( 2 , 3 , RG2 . New (, \"G2 Radio 3\" )) Bt := myGui . Add ( \"1-2\" , 4 , \"Button\" , , \"Next\" , 1 , , 1 ) RG1 . callback := Func ( \"ShowSelected\" ) . Bind ( myGui , 1 ) RG2 . callback := Func ( \"ShowSelected\" ) . Bind ( myGui , 2 ) Bt . callback := Func ( \"CheckNextRadioButton\" ) . Bind ( RG1 , RG2 ) myGui . AutoSize () myGui . MinSize () myGui . Show () Sleep , 100 ShowSelected ( myGui , 1 , RG1 . Checked ) return CheckNextRadioButton ( gr1 , gr2 ) { gr1 . Check ( Mod ( gr1 . Checked [ \"index\" ], 3 ) + 1 ) gr2 . Check ( Mod ( gr2 . Checked [ \"index\" ], 3 ) + 1 ) } ShowSelected ( gui , toolNumber , selected ) { CoordMode , ToolTip , Screen ToolTip , % \"index:`t\" selected [ \"index\" ] \" `n \" \"hwnd:`t\" selected [ \"ctrl\" ] . hwnd \" `n \" \"text:`t\" selected [ \"text\" ], % gui . pos . x + gui . pos . w , % gui . pos . y + ( toolNumber = 2 ? gui . pos . h / 2 : 0 ), % toolNumber }","title":"RadioGroups"},{"location":"Examples/Example%20RadioGroups/#example-radiogroups","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp RG1 := new GridGUI . RadioGroupControl ( myGui . hwnd ) RG2 := new GridGUI . RadioGroupControl ( myGui . hwnd ) myGui . AddControl ( 1 , 1 , RG1 . New (, \"G1 Radio 1\" )) myGui . AddControl ( 1 , 2 , RG1 . New ( \"Checked1\" , \"G1 Radio 2\" )) myGui . AddControl ( 1 , 3 , RG1 . New (, \"G1 Radio 3\" )) myGui . AddControl ( 2 , 1 , RG2 . New (, \"G2 Radio 1\" )) myGui . AddControl ( 2 , 2 , RG2 . New (, \"G2 Radio 2\" )) myGui . AddControl ( 2 , 3 , RG2 . New (, \"G2 Radio 3\" )) Bt := myGui . Add ( \"1-2\" , 4 , \"Button\" , , \"Next\" , 1 , , 1 ) RG1 . callback := Func ( \"ShowSelected\" ) . Bind ( myGui , 1 ) RG2 . callback := Func ( \"ShowSelected\" ) . Bind ( myGui , 2 ) Bt . callback := Func ( \"CheckNextRadioButton\" ) . Bind ( RG1 , RG2 ) myGui . AutoSize () myGui . MinSize () myGui . Show () Sleep , 100 ShowSelected ( myGui , 1 , RG1 . Checked ) return CheckNextRadioButton ( gr1 , gr2 ) { gr1 . Check ( Mod ( gr1 . Checked [ \"index\" ], 3 ) + 1 ) gr2 . Check ( Mod ( gr2 . Checked [ \"index\" ], 3 ) + 1 ) } ShowSelected ( gui , toolNumber , selected ) { CoordMode , ToolTip , Screen ToolTip , % \"index:`t\" selected [ \"index\" ] \" `n \" \"hwnd:`t\" selected [ \"ctrl\" ] . hwnd \" `n \" \"text:`t\" selected [ \"text\" ], % gui . pos . x + gui . pos . w , % gui . pos . y + ( toolNumber = 2 ? gui . pos . h / 2 : 0 ), % toolNumber }","title":"Example RadioGroups"},{"location":"Examples/Example%20Scale/","text":"Example Scale #Include < GridGUI > SetBatchLines , - 1 SetControlDelay , 0 SetWinDelay , 0 CoordMode , ToolTip , Screen myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) ; +E0x02000000 +E0x00080000 myGui . GuiClose := GridGUI . ExitApp ed1 := myGui . Add ( \"1-2\" , 1 , \"Edit\" , \"-Multi\" , , , , 1 , , \"WC\" ) ; Adds a subgrid to split the a subgrid := new GridGUI . SubGrid ( myGui . hwnd , , , true ) bt1 := subgrid . Add ( 1 , 1 , \"Button\" , , \"Button\" ) ed2 := subgrid . Add ( 2 , 1 , \"Edit\" , \"w0 -Multi\" , , , , 1 ) bt2 := subgrid . Add ( 1 , 2 , \"Button\" , , \"Button\" ) bt3 := subgrid . Add ( 2 , 2 , \"Button\" , , \"Button Button\" ) ; Sizes the subgrid so that the contained controls will be shown subgrid . grid . justify := \"WC\" subgrid . AutoSize () subgrid . MinSize () myGui . AddControl ( 1 , 2 , subgrid , 1 , 1 , , , \"WC\" ) ; Removes the border around the first subgrid myGui . GetNewestCellGroup () . borderX := 0 myGui . GetNewestCellGroup () . borderY := 0 if ( ! pToken := Gdip_Startup ()) { MsgBox , 48 , gdiplus error ! , Gdiplus failed to start . Please ensure you have gdiplus on your system ExitApp } laugh := new GdiLaughingMan ( myGui . hwnd , subgrid . pos . h - 10 ) subgrid2 := new GridGUI . SubGrid ( myGui . hwnd , , , true ) subgrid2 . AddControl ( 1 , 1 , laugh ) subgrid2 . grid . justify := \"C\" subgrid2 . AutoSize () subgrid2 . MinSize () myGui . AddControl ( 2 , 2 , subgrid2 , , , 1 , 1 ) ; Removes the border around the second subgrid myGui . GetNewestCellGroup () . borderX := 0 myGui . GetNewestCellGroup () . borderY := 0 bt4 := myGui . Add ( \"1-2\" , 3 , \"Button\" , , \"Button\" , , , 1 , , \"WC\" ) myGui . AutoSize () myGui . MinSize () myGui . Show () ctrlFontRatio := GetTextSizeRatio ([ ed1 , ed2 , bt1 , bt2 , bt3 , bt4 ]) ; Makes the all the cells in the grids have their current aspect ration locked GuiFixAspectratio ( subgrid ) GuiFixAspectratio ( subgrid2 ) GuiFixAspectratio ( myGui ) ; Sets the ratio for the laughing man drawing subgrid2 . GetCellGroup ( laugh ) . SetAspectRatio ( laugh . ratio ) ;myGui.Add(1, 2, \"Text\") myGui . GuiSize := Func ( \"SizeFont\" ) . Bind ( myGui , ctrlFontRatio ) return GetTextSizeRatio ( ctrls ) { res := \"\" ctrlFontRatio := {} for i , ctrl in ctrls { ctrlFontRatio [ ctrl ] := ctrl . logfont . PixelHeight ( \"j\" ) / GetClientArea ( ctrl . hwnd ) . h res .= ctrlFontRatio [ ctrl ] \" `n \" } ;ToolTip, % res, 0, 100, 3 return ctrlFontRatio } SizeFont ( gui , ctrls , delay := true ) { res := \"\" for ctrl , ratio in ctrls { pos := ctrl . GetPos () h := pos . h * ratio points := Round ( h * 72 / A_ScreenDPI ) ctrl . Font ( \"s\" points , , false ) if ( ctrl . logfont . PixelWidth ( ctrl . GuiControlGet ( \"\" )) >= pos . w ) { points -- ctrl . Font ( \"s\" points , , false ) } res .= points \" `n \" } gui . Draw ( gui . pos ) ;ToolTip, % res, 0, 0, 2 } GuiFixAspectratio ( gui ) { for i , c in gui . grid . Cells { gui . grid . arbitrator . Remove ( c ) } for i , c in gui . grid . Cells { c . SetAspectRatio () c . exW := c . pos . w / gui . pos . w c . exH := c . pos . h / gui . pos . h c . fillW := true c . fillH := true gui . grid . arbitrator . Add ( c ) } gui . grid . arbitrator . IsReduced := false } GetClientArea ( hwnd ) { local RECT VarSetCapacity ( RECT , 16 , 0 ) DllCall ( \"GetClientRect\" , \"UInt\" , hwnd , \"UInt\" , & RECT ) return new GridGUI . Position ( NumGet ( RECT , 0 , \"int\" ), NumGet ( RECT , 4 , \"int\" ), NumGet ( RECT , 8 , \"int\" ), NumGet ( RECT , 12 , \"int\" )) } #include Example GDI . ahk","title":"Scale"},{"location":"Examples/Example%20Scale/#example-scale","text":"#Include < GridGUI > SetBatchLines , - 1 SetControlDelay , 0 SetWinDelay , 0 CoordMode , ToolTip , Screen myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) ; +E0x02000000 +E0x00080000 myGui . GuiClose := GridGUI . ExitApp ed1 := myGui . Add ( \"1-2\" , 1 , \"Edit\" , \"-Multi\" , , , , 1 , , \"WC\" ) ; Adds a subgrid to split the a subgrid := new GridGUI . SubGrid ( myGui . hwnd , , , true ) bt1 := subgrid . Add ( 1 , 1 , \"Button\" , , \"Button\" ) ed2 := subgrid . Add ( 2 , 1 , \"Edit\" , \"w0 -Multi\" , , , , 1 ) bt2 := subgrid . Add ( 1 , 2 , \"Button\" , , \"Button\" ) bt3 := subgrid . Add ( 2 , 2 , \"Button\" , , \"Button Button\" ) ; Sizes the subgrid so that the contained controls will be shown subgrid . grid . justify := \"WC\" subgrid . AutoSize () subgrid . MinSize () myGui . AddControl ( 1 , 2 , subgrid , 1 , 1 , , , \"WC\" ) ; Removes the border around the first subgrid myGui . GetNewestCellGroup () . borderX := 0 myGui . GetNewestCellGroup () . borderY := 0 if ( ! pToken := Gdip_Startup ()) { MsgBox , 48 , gdiplus error ! , Gdiplus failed to start . Please ensure you have gdiplus on your system ExitApp } laugh := new GdiLaughingMan ( myGui . hwnd , subgrid . pos . h - 10 ) subgrid2 := new GridGUI . SubGrid ( myGui . hwnd , , , true ) subgrid2 . AddControl ( 1 , 1 , laugh ) subgrid2 . grid . justify := \"C\" subgrid2 . AutoSize () subgrid2 . MinSize () myGui . AddControl ( 2 , 2 , subgrid2 , , , 1 , 1 ) ; Removes the border around the second subgrid myGui . GetNewestCellGroup () . borderX := 0 myGui . GetNewestCellGroup () . borderY := 0 bt4 := myGui . Add ( \"1-2\" , 3 , \"Button\" , , \"Button\" , , , 1 , , \"WC\" ) myGui . AutoSize () myGui . MinSize () myGui . Show () ctrlFontRatio := GetTextSizeRatio ([ ed1 , ed2 , bt1 , bt2 , bt3 , bt4 ]) ; Makes the all the cells in the grids have their current aspect ration locked GuiFixAspectratio ( subgrid ) GuiFixAspectratio ( subgrid2 ) GuiFixAspectratio ( myGui ) ; Sets the ratio for the laughing man drawing subgrid2 . GetCellGroup ( laugh ) . SetAspectRatio ( laugh . ratio ) ;myGui.Add(1, 2, \"Text\") myGui . GuiSize := Func ( \"SizeFont\" ) . Bind ( myGui , ctrlFontRatio ) return GetTextSizeRatio ( ctrls ) { res := \"\" ctrlFontRatio := {} for i , ctrl in ctrls { ctrlFontRatio [ ctrl ] := ctrl . logfont . PixelHeight ( \"j\" ) / GetClientArea ( ctrl . hwnd ) . h res .= ctrlFontRatio [ ctrl ] \" `n \" } ;ToolTip, % res, 0, 100, 3 return ctrlFontRatio } SizeFont ( gui , ctrls , delay := true ) { res := \"\" for ctrl , ratio in ctrls { pos := ctrl . GetPos () h := pos . h * ratio points := Round ( h * 72 / A_ScreenDPI ) ctrl . Font ( \"s\" points , , false ) if ( ctrl . logfont . PixelWidth ( ctrl . GuiControlGet ( \"\" )) >= pos . w ) { points -- ctrl . Font ( \"s\" points , , false ) } res .= points \" `n \" } gui . Draw ( gui . pos ) ;ToolTip, % res, 0, 0, 2 } GuiFixAspectratio ( gui ) { for i , c in gui . grid . Cells { gui . grid . arbitrator . Remove ( c ) } for i , c in gui . grid . Cells { c . SetAspectRatio () c . exW := c . pos . w / gui . pos . w c . exH := c . pos . h / gui . pos . h c . fillW := true c . fillH := true gui . grid . arbitrator . Add ( c ) } gui . grid . arbitrator . IsReduced := false } GetClientArea ( hwnd ) { local RECT VarSetCapacity ( RECT , 16 , 0 ) DllCall ( \"GetClientRect\" , \"UInt\" , hwnd , \"UInt\" , & RECT ) return new GridGUI . Position ( NumGet ( RECT , 0 , \"int\" ), NumGet ( RECT , 4 , \"int\" ), NumGet ( RECT , 8 , \"int\" ), NumGet ( RECT , 12 , \"int\" )) } #include Example GDI . ahk","title":"Example Scale"},{"location":"Examples/Example%20Serial%20Terminal/","text":"Example Serial Terminal #SingleInstance Off #Include < GridGUI > SetBatchLines , - 1 WM_DEVICECHANGE := 0x0219 if ( ! FileExist ( \"plink.exe\" )) { UrlDownloadToFile , https :// the . earth . li /~ sgtatham / putty / latest / w64 / plink . exe , plink . exe } Global plinkprocess := 0 ports := GetCOMports () myGui := new GridGUI ( \"Serial Terminal\" , \"resize -DPIScale\" ) myGui . GuiSizeDelay := false console := new ConsoleControl ( myGui . hwnd , \"w0 h0\" ) ; \"/q /k echo off\" ; & powershell -NoExit console . Run ( \"filter timestamp { \"\" $(Get-Date -Format o): $_ \"\" }\" ) ;console.Run(\"filter timestamp {\"\"$([DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()),$(Get-Date -Format o): $_\"\"}\") Sleep , 100 console . Run ( \"clear\" ) cmdline := myGui . add ( \"1-16\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . AddControl ( \"1-16\" , 2 , console , 1 , 1 , 1 , 1 ) bt_connect := myGui . add ( 1 , 3 , \"Button\" , \"w100\" , \"Connect\" ) chb_log := myGui . add ( 3 , 3 , \"CheckBox\" , \"checked\" , \"log\" , , , , , \"EC\" ) chb_time := myGui . add ( 4 , 3 , \"CheckBox\" , \"checked\" , \"timestamp\" , , , , , \"EC\" ) myGui . add ( 5 , 3 , \"Text\" , , \"Port:\" , , , , , \"EC\" ) port := myGui . add ( 6 , 3 , \"DropDownList\" , \"w60\" , StrReplace ( JoinKey ( \"|\" , ports ), \"|\" , \"||\" , 1 ), , , , , \"WC\" ) myGui . add ( 7 , 3 , \"Text\" , , \"flow control:\" , , , , , \"EC\" ) flowcontrol := myGui . add ( 8 , 3 , \"DropDownList\" , \"w35\" , \"N|X||R|D\" , , , , , \"WC\" ) myGui . add ( 9 , 3 , \"Text\" , , \"parity:\" , , , , , \"EC\" ) parity := myGui . add ( 10 , 3 , \"DropDownList\" , \"w35\" , \"n||o|e|m|s\" , , , , , \"WC\" ) myGui . add ( 11 , 3 , \"Text\" , , \"stop bits:\" , , , , , \"EC\" ) stopbits := myGui . add ( 12 , 3 , \"DropDownList\" , \"w40\" , \"1||1.5|2\" , , , , , \"WC\" ) myGui . add ( 13 , 3 , \"Text\" , , \"data bits:\" , , , , , \"EC\" ) databits := myGui . add ( 14 , 3 , \"DropDownList\" , \"w35\" , \"5|6|7|8||9\" , , , , , \"WC\" ) myGui . add ( 15 , 3 , \"Text\" , , \"Baud:\" , , , , , \"EC\" ) baudrate := myGui . add ( 16 , 3 , \"DropDownList\" , \"w70\" , \"300|1200|2400|4800|9600|19200|38400|57600|74880|115200||230400|250000|500000|1000000|2000000\" , , , , , \"WC\" ) bt_connect . Callback := Func ( \"ConnectPressed\" ) . Bind ( console , port , baudrate , flowcontrol , parity , stopbits , databits , chb_time , chb_log ) myGui . AutoSize () myGui . MinSize ( myGui . pos . w , 800 ) myGui . Show ( \"h800\" ) OnMessage ( WM_DEVICECHANGE , Func ( \"WM_DEVICECHANGE\" )) return #If WinActive ( \"ahk_id \" myGui . hwnd ) Enter:: hwnd := myGui . ControlGetFocus () if ( hwnd = cmdline . Hwnd ) { SendCommand ( cmdline , console ) } return #If GuiClose: OnExit : if ( plinkprocess ) { Process , Close , % plinkprocess } Process , Close , % console . pid ; May be a bit forceful? No effect if it already closed. ExitApp return SendCommand ( cmdline , console ) { console . run ( cmdline . vVar ) cmdline . GuiControl ( \"\" , \"\" ) } ConnectPressed ( console , port , baudrate , flowcontrol , parity , stopbits , databits , timestamp , log ) { if ( plinkprocess ) { Process , Close , % plinkprocess } command := \"& \"\" \" A_ScriptDir \"\\plink.exe \"\" -serial \\\\.\\\" port . vVar \" -sercfg \" baudrate . vVar \",\" flowcontrol . vVar \",\" parity . vVar \",\" stopbits . vVar \",\" databits . vVar if ( timestamp . vVar ) { command .= \" | timestamp\" } if ( log . vVar ) { command .= \" | tee \"\" \" A_Now \" - \" port . vVar \".log \"\" \" } console . run ( command ) plinkprocess := WaitForProcess ( \"i)plink\\.exe\" , \"i)\\Q\\\\.\\\" port . vVar \"\\E\" ) } getProcess ( name ) { Process , Exist , % name return ErrorLevel } WaitForProcess ( name := \"\" , cmdline := \"\" , timeout := 5000 ) { start := A_TickCount pid := \"\" while ( A_TickCount - start < timeout ) { processes := GetRunningProcess ( name , cmdline ) if ( processes . Count ()) { processes . _NewEnum () . Next ( pid ) return pid } } } GetRunningProcess ( name := \"\" , cmdline := \"\" ) { map := {} for proc in ComObjGet ( \"winmgmts:\" ) . ExecQuery ( \"Select * from Win32_Process\" ) { if (( ! name || proc . Name ~= name ) && ( ! cmdline || proc . CommandLine ~= cmdline )) { map [ proc . ProcessId ] := proc } } return map } GetCOMports () { portmap := {} Loop , Reg , HKEY_LOCAL_MACHINE \\ HARDWARE \\ DEVICEMAP \\ SERIALCOMM { RegRead , serial if ( serial ~= \"COM\\d+\" ) { portmap [ serial ] := A_LoopRegName } } return portmap } UpdateCOMports () { Global port port . GuiControl ( \"\" , \"|\" SelectString ( JoinKey ( \"|\" , GetCOMports ()), port . vVar )) } Class ConsoleControl Extends GridGUI . WindowControl { __New ( guiHwnd , options := \"\" ) { Base . __New ( guiHwnd , this . __StrartConsole (), options ) } __StrartConsole () { ; Launch hidden cmd.exe and store process ID in pid. Run , % \"powershell\" , , Hide , pid ; Wait for console window to be created, store its ID. DetectHiddenWindows , On WinWait , % \"ahk_pid \" pid WinGet , hwnd , ID , % \"ahk_pid \" pid this . pid := pid return hwnd } PressEnter () { ControlSend , , { Enter }, % \"ahk_id \" this . hwnd } Run ( cmd ) { if ( this . GuiControl ( cmd )) { this . PressEnter () } } GuiControl ( value ) { ConsoleSend ( value , \"ahk_id \" this . hwnd ) if ( ErrorLevel ) { MsgBox , % ErrorLevel return false } return true } GuiControlGet ( subCommand := \"\" , value := \"\" ) { ;GuiControlGet, OutputVar, % SubCommand, % this.hwnd, % value ;return OutputVar } Control ( subCommand , value ) { } } ; Sends text to a console's input stream. WinTitle may specify any window in ; the target process. Since each process may be attached to only one console, ; ConsoleSend fails if the script is already attached to a console. ConsoleSend ( text , WinTitle = \"\" , WinText = \"\" , ExcludeTitle = \"\" , ExcludeText = \"\" ) { DetectHiddenWindows , On WinGet , pid , PID , %WinTitle% , %WinText% , %ExcludeTitle% , %ExcludeText% if ! pid return false , ErrorLevel := \"window\" ; Attach to the console belonging to %WinTitle%'s process. if ! DllCall ( \"AttachConsole\" , \"uint\" , pid ) return false , ErrorLevel := \"AttachConsole\" hConIn := DllCall ( \"CreateFile\" , \"str\" , \"CONIN$\" , \"uint\" , 0xC0000000 , \"uint\" , 0x3 , \"uint\" , 0 , \"uint\" , 0x3 , \"uint\" , 0 , \"uint\" , 0 ) if hConIn = - 1 return false , ErrorLevel := \"CreateFile\" VarSetCapacity ( ir , 24 , 0 ) ; ir := new INPUT_RECORD NumPut ( 1 , ir , 0 , \"UShort\" ) ; ir.EventType := KEY_EVENT NumPut ( 1 , ir , 8 , \"UShort\" ) ; ir.KeyEvent.wRepeatCount := 1 ; wVirtualKeyCode, wVirtualScanCode and dwControlKeyState are not needed, ; so are left at the default value of zero. Loop , Parse , text ; for each character in text { NumPut ( Asc ( A_LoopField ), ir , 14 , \"UShort\" ) NumPut ( true , ir , 4 , \"Int\" ) ; ir.KeyEvent.bKeyDown := true gosub ConsoleSendWrite NumPut ( false , ir , 4 , \"Int\" ) ; ir.KeyEvent.bKeyDown := false gosub ConsoleSendWrite } gosub ConsoleSendCleanup return true ConsoleSendWrite: if ! DllCall ( \"WriteConsoleInput\" , \"uint\" , hconin , \"uint\" , & ir , \"uint\" , 1 , \"uint*\" , 0 ) { gosub ConsoleSendCleanup return false , ErrorLevel := \"WriteConsoleInput\" } return ConsoleSendCleanup: if ( hConIn != \"\" && hConIn !=- 1 ) DllCall ( \"CloseHandle\" , \"uint\" , hConIn ) ; Detach from %WinTitle%'s console. DllCall ( \"FreeConsole\" ) return } WM_DEVICECHANGE ( wParam , lParam ) { ; http://msdn.com/library/aa363480(vs.85,en-us) WM_DEVICECHANGE message static DBT_DEVICEARRIVAL := 0x8000 ; A device or piece of media has been inserted and is now available. static DBT_DEVICEREMOVECOMPLETE := 0x8004 ; A device or piece of media has been removed. static DBT_DEVTYP_VOLUME := 0x00000002 ; Logical volume. This structure is a DEV_BROADCAST_VOLUME structure. static DBT_DEVTYP_PORT := 0x00000003 if ( wParam = DBT_DEVICEARRIVAL ) { if ( NumGet ( lParam + 0 , 4 , \"UInt\" ) = DBT_DEVTYP_PORT ) { ; http://msdn.com/library/aa363246(vs.85,en-us) DEV_BROADCAST_HDR structure fun := Func ( \"UpdateCOMports\" ) SetTimer , % fun , - 100 ;FirstDriveFromMask(NumGet(lParam+0, 12, \"UInt\"), 1) ; http://msdn.com/library/aa363249(vs.85,en-us) DEV_BROADCAST_VOLUME structure } } if ( wparam = DBT_DEVICEREMOVECOMPLETE ) { if ( NumGet ( lParam + 0 , 4 , \"UInt\" ) = DBT_DEVTYP_PORT ) { ; http://msdn.com/library/aa363246(vs.85,en-us) DEV_BROADCAST_HDR structure fun := Func ( \"UpdateCOMports\" ) SetTimer , % fun , - 100 ;FirstDriveFromMask(NumGet(lParam+0, 12, \"UInt\"), 0) ; http://msdn.com/library/aa363249(vs.85,en-us) DEV_BROADCAST_VOLUME structure } } } SelectString ( Haystack , Needle ) { return RegExReplace ( Haystack , Needle \"\\|?\" , Needle \"||\" ) } JoinKey ( sep , obj ) { res := \"\" for key in obj { res .= key sep } return SubStr ( res , 1 , - StrLen ( sep )) }","title":"Serial Terminal"},{"location":"Examples/Example%20Serial%20Terminal/#example-serial-terminal","text":"#SingleInstance Off #Include < GridGUI > SetBatchLines , - 1 WM_DEVICECHANGE := 0x0219 if ( ! FileExist ( \"plink.exe\" )) { UrlDownloadToFile , https :// the . earth . li /~ sgtatham / putty / latest / w64 / plink . exe , plink . exe } Global plinkprocess := 0 ports := GetCOMports () myGui := new GridGUI ( \"Serial Terminal\" , \"resize -DPIScale\" ) myGui . GuiSizeDelay := false console := new ConsoleControl ( myGui . hwnd , \"w0 h0\" ) ; \"/q /k echo off\" ; & powershell -NoExit console . Run ( \"filter timestamp { \"\" $(Get-Date -Format o): $_ \"\" }\" ) ;console.Run(\"filter timestamp {\"\"$([DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()),$(Get-Date -Format o): $_\"\"}\") Sleep , 100 console . Run ( \"clear\" ) cmdline := myGui . add ( \"1-16\" , 1 , \"Edit\" , , , 1 , , 1 ) myGui . AddControl ( \"1-16\" , 2 , console , 1 , 1 , 1 , 1 ) bt_connect := myGui . add ( 1 , 3 , \"Button\" , \"w100\" , \"Connect\" ) chb_log := myGui . add ( 3 , 3 , \"CheckBox\" , \"checked\" , \"log\" , , , , , \"EC\" ) chb_time := myGui . add ( 4 , 3 , \"CheckBox\" , \"checked\" , \"timestamp\" , , , , , \"EC\" ) myGui . add ( 5 , 3 , \"Text\" , , \"Port:\" , , , , , \"EC\" ) port := myGui . add ( 6 , 3 , \"DropDownList\" , \"w60\" , StrReplace ( JoinKey ( \"|\" , ports ), \"|\" , \"||\" , 1 ), , , , , \"WC\" ) myGui . add ( 7 , 3 , \"Text\" , , \"flow control:\" , , , , , \"EC\" ) flowcontrol := myGui . add ( 8 , 3 , \"DropDownList\" , \"w35\" , \"N|X||R|D\" , , , , , \"WC\" ) myGui . add ( 9 , 3 , \"Text\" , , \"parity:\" , , , , , \"EC\" ) parity := myGui . add ( 10 , 3 , \"DropDownList\" , \"w35\" , \"n||o|e|m|s\" , , , , , \"WC\" ) myGui . add ( 11 , 3 , \"Text\" , , \"stop bits:\" , , , , , \"EC\" ) stopbits := myGui . add ( 12 , 3 , \"DropDownList\" , \"w40\" , \"1||1.5|2\" , , , , , \"WC\" ) myGui . add ( 13 , 3 , \"Text\" , , \"data bits:\" , , , , , \"EC\" ) databits := myGui . add ( 14 , 3 , \"DropDownList\" , \"w35\" , \"5|6|7|8||9\" , , , , , \"WC\" ) myGui . add ( 15 , 3 , \"Text\" , , \"Baud:\" , , , , , \"EC\" ) baudrate := myGui . add ( 16 , 3 , \"DropDownList\" , \"w70\" , \"300|1200|2400|4800|9600|19200|38400|57600|74880|115200||230400|250000|500000|1000000|2000000\" , , , , , \"WC\" ) bt_connect . Callback := Func ( \"ConnectPressed\" ) . Bind ( console , port , baudrate , flowcontrol , parity , stopbits , databits , chb_time , chb_log ) myGui . AutoSize () myGui . MinSize ( myGui . pos . w , 800 ) myGui . Show ( \"h800\" ) OnMessage ( WM_DEVICECHANGE , Func ( \"WM_DEVICECHANGE\" )) return #If WinActive ( \"ahk_id \" myGui . hwnd ) Enter:: hwnd := myGui . ControlGetFocus () if ( hwnd = cmdline . Hwnd ) { SendCommand ( cmdline , console ) } return #If GuiClose: OnExit : if ( plinkprocess ) { Process , Close , % plinkprocess } Process , Close , % console . pid ; May be a bit forceful? No effect if it already closed. ExitApp return SendCommand ( cmdline , console ) { console . run ( cmdline . vVar ) cmdline . GuiControl ( \"\" , \"\" ) } ConnectPressed ( console , port , baudrate , flowcontrol , parity , stopbits , databits , timestamp , log ) { if ( plinkprocess ) { Process , Close , % plinkprocess } command := \"& \"\" \" A_ScriptDir \"\\plink.exe \"\" -serial \\\\.\\\" port . vVar \" -sercfg \" baudrate . vVar \",\" flowcontrol . vVar \",\" parity . vVar \",\" stopbits . vVar \",\" databits . vVar if ( timestamp . vVar ) { command .= \" | timestamp\" } if ( log . vVar ) { command .= \" | tee \"\" \" A_Now \" - \" port . vVar \".log \"\" \" } console . run ( command ) plinkprocess := WaitForProcess ( \"i)plink\\.exe\" , \"i)\\Q\\\\.\\\" port . vVar \"\\E\" ) } getProcess ( name ) { Process , Exist , % name return ErrorLevel } WaitForProcess ( name := \"\" , cmdline := \"\" , timeout := 5000 ) { start := A_TickCount pid := \"\" while ( A_TickCount - start < timeout ) { processes := GetRunningProcess ( name , cmdline ) if ( processes . Count ()) { processes . _NewEnum () . Next ( pid ) return pid } } } GetRunningProcess ( name := \"\" , cmdline := \"\" ) { map := {} for proc in ComObjGet ( \"winmgmts:\" ) . ExecQuery ( \"Select * from Win32_Process\" ) { if (( ! name || proc . Name ~= name ) && ( ! cmdline || proc . CommandLine ~= cmdline )) { map [ proc . ProcessId ] := proc } } return map } GetCOMports () { portmap := {} Loop , Reg , HKEY_LOCAL_MACHINE \\ HARDWARE \\ DEVICEMAP \\ SERIALCOMM { RegRead , serial if ( serial ~= \"COM\\d+\" ) { portmap [ serial ] := A_LoopRegName } } return portmap } UpdateCOMports () { Global port port . GuiControl ( \"\" , \"|\" SelectString ( JoinKey ( \"|\" , GetCOMports ()), port . vVar )) } Class ConsoleControl Extends GridGUI . WindowControl { __New ( guiHwnd , options := \"\" ) { Base . __New ( guiHwnd , this . __StrartConsole (), options ) } __StrartConsole () { ; Launch hidden cmd.exe and store process ID in pid. Run , % \"powershell\" , , Hide , pid ; Wait for console window to be created, store its ID. DetectHiddenWindows , On WinWait , % \"ahk_pid \" pid WinGet , hwnd , ID , % \"ahk_pid \" pid this . pid := pid return hwnd } PressEnter () { ControlSend , , { Enter }, % \"ahk_id \" this . hwnd } Run ( cmd ) { if ( this . GuiControl ( cmd )) { this . PressEnter () } } GuiControl ( value ) { ConsoleSend ( value , \"ahk_id \" this . hwnd ) if ( ErrorLevel ) { MsgBox , % ErrorLevel return false } return true } GuiControlGet ( subCommand := \"\" , value := \"\" ) { ;GuiControlGet, OutputVar, % SubCommand, % this.hwnd, % value ;return OutputVar } Control ( subCommand , value ) { } } ; Sends text to a console's input stream. WinTitle may specify any window in ; the target process. Since each process may be attached to only one console, ; ConsoleSend fails if the script is already attached to a console. ConsoleSend ( text , WinTitle = \"\" , WinText = \"\" , ExcludeTitle = \"\" , ExcludeText = \"\" ) { DetectHiddenWindows , On WinGet , pid , PID , %WinTitle% , %WinText% , %ExcludeTitle% , %ExcludeText% if ! pid return false , ErrorLevel := \"window\" ; Attach to the console belonging to %WinTitle%'s process. if ! DllCall ( \"AttachConsole\" , \"uint\" , pid ) return false , ErrorLevel := \"AttachConsole\" hConIn := DllCall ( \"CreateFile\" , \"str\" , \"CONIN$\" , \"uint\" , 0xC0000000 , \"uint\" , 0x3 , \"uint\" , 0 , \"uint\" , 0x3 , \"uint\" , 0 , \"uint\" , 0 ) if hConIn = - 1 return false , ErrorLevel := \"CreateFile\" VarSetCapacity ( ir , 24 , 0 ) ; ir := new INPUT_RECORD NumPut ( 1 , ir , 0 , \"UShort\" ) ; ir.EventType := KEY_EVENT NumPut ( 1 , ir , 8 , \"UShort\" ) ; ir.KeyEvent.wRepeatCount := 1 ; wVirtualKeyCode, wVirtualScanCode and dwControlKeyState are not needed, ; so are left at the default value of zero. Loop , Parse , text ; for each character in text { NumPut ( Asc ( A_LoopField ), ir , 14 , \"UShort\" ) NumPut ( true , ir , 4 , \"Int\" ) ; ir.KeyEvent.bKeyDown := true gosub ConsoleSendWrite NumPut ( false , ir , 4 , \"Int\" ) ; ir.KeyEvent.bKeyDown := false gosub ConsoleSendWrite } gosub ConsoleSendCleanup return true ConsoleSendWrite: if ! DllCall ( \"WriteConsoleInput\" , \"uint\" , hconin , \"uint\" , & ir , \"uint\" , 1 , \"uint*\" , 0 ) { gosub ConsoleSendCleanup return false , ErrorLevel := \"WriteConsoleInput\" } return ConsoleSendCleanup: if ( hConIn != \"\" && hConIn !=- 1 ) DllCall ( \"CloseHandle\" , \"uint\" , hConIn ) ; Detach from %WinTitle%'s console. DllCall ( \"FreeConsole\" ) return } WM_DEVICECHANGE ( wParam , lParam ) { ; http://msdn.com/library/aa363480(vs.85,en-us) WM_DEVICECHANGE message static DBT_DEVICEARRIVAL := 0x8000 ; A device or piece of media has been inserted and is now available. static DBT_DEVICEREMOVECOMPLETE := 0x8004 ; A device or piece of media has been removed. static DBT_DEVTYP_VOLUME := 0x00000002 ; Logical volume. This structure is a DEV_BROADCAST_VOLUME structure. static DBT_DEVTYP_PORT := 0x00000003 if ( wParam = DBT_DEVICEARRIVAL ) { if ( NumGet ( lParam + 0 , 4 , \"UInt\" ) = DBT_DEVTYP_PORT ) { ; http://msdn.com/library/aa363246(vs.85,en-us) DEV_BROADCAST_HDR structure fun := Func ( \"UpdateCOMports\" ) SetTimer , % fun , - 100 ;FirstDriveFromMask(NumGet(lParam+0, 12, \"UInt\"), 1) ; http://msdn.com/library/aa363249(vs.85,en-us) DEV_BROADCAST_VOLUME structure } } if ( wparam = DBT_DEVICEREMOVECOMPLETE ) { if ( NumGet ( lParam + 0 , 4 , \"UInt\" ) = DBT_DEVTYP_PORT ) { ; http://msdn.com/library/aa363246(vs.85,en-us) DEV_BROADCAST_HDR structure fun := Func ( \"UpdateCOMports\" ) SetTimer , % fun , - 100 ;FirstDriveFromMask(NumGet(lParam+0, 12, \"UInt\"), 0) ; http://msdn.com/library/aa363249(vs.85,en-us) DEV_BROADCAST_VOLUME structure } } } SelectString ( Haystack , Needle ) { return RegExReplace ( Haystack , Needle \"\\|?\" , Needle \"||\" ) } JoinKey ( sep , obj ) { res := \"\" for key in obj { res .= key sep } return SubStr ( res , 1 , - StrLen ( sep )) }","title":"Example Serial Terminal"},{"location":"Examples/Example%20SubGrids/","text":"Example SubGrids #Include < GridGUI > myGui := new GridGUI ( \"Sub Grids\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp subGrid1 := new GridGUI . SubGrid ( myGui . hwnd , new GridGUI . Position ( 0 , 0 , 50 , 50 ), , true ) myGui . AddControl ( 1 , 1 , subGrid1 , 1 , 1 , 1 , 1 ) subGrid1 . Add ( 1 , 1 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid2 := new GridGUI . SubGrid ( myGui . hwnd , new GridGUI . Position ( 0 , 0 , 50 , 50 ), , true ) myGui . AddControl ( 2 , 1 , subGrid2 , 1 , 1 , 1 , 1 ) subGrid2 . Add ( 1 , 1 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid2 . Add ( 2 , 2 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid3 := new GridGUI . SubGrid ( myGui . hwnd , new GridGUI . Position ( 0 , 0 , 50 , 50 ), , true ) myGui . AddControl ( \"1-2\" , 2 , subGrid3 , 1 , 1 , 1 , 1 ) subGrid3 . Add ( 1 , 1 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid3 . Add ( 2 , 2 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid3 . Add ( 3 , 3 , \"Button\" , , , 1 , 1 , 1 , 1 ) myGui . AutoSize () myGui . Show ( \"w300 h300\" ) myGui . MinSize () return","title":"SubGrids"},{"location":"Examples/Example%20SubGrids/#example-subgrids","text":"#Include < GridGUI > myGui := new GridGUI ( \"Sub Grids\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp subGrid1 := new GridGUI . SubGrid ( myGui . hwnd , new GridGUI . Position ( 0 , 0 , 50 , 50 ), , true ) myGui . AddControl ( 1 , 1 , subGrid1 , 1 , 1 , 1 , 1 ) subGrid1 . Add ( 1 , 1 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid2 := new GridGUI . SubGrid ( myGui . hwnd , new GridGUI . Position ( 0 , 0 , 50 , 50 ), , true ) myGui . AddControl ( 2 , 1 , subGrid2 , 1 , 1 , 1 , 1 ) subGrid2 . Add ( 1 , 1 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid2 . Add ( 2 , 2 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid3 := new GridGUI . SubGrid ( myGui . hwnd , new GridGUI . Position ( 0 , 0 , 50 , 50 ), , true ) myGui . AddControl ( \"1-2\" , 2 , subGrid3 , 1 , 1 , 1 , 1 ) subGrid3 . Add ( 1 , 1 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid3 . Add ( 2 , 2 , \"Button\" , , , 1 , 1 , 1 , 1 ) subGrid3 . Add ( 3 , 3 , \"Button\" , , , 1 , 1 , 1 , 1 ) myGui . AutoSize () myGui . Show ( \"w300 h300\" ) myGui . MinSize () return","title":"Example SubGrids"},{"location":"Examples/Example%20Tabs/","text":"Example Tabs #Include < GridGUI > args := { Options : \"w0 h0\" , exW : 1 , exH : 1 , fillW : true , fillH : true } myGui := new GridGUI ( \"Tab Example\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp tab := new GridGUI . TabControl ( myGui . hwnd , , \"Name 1|Name 2|Name 3|Name 4\" ) myGui . AddControl ( 1 , 1 , tab , args ) tab . tabs [ 1 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 2 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 2 ] . Add ( 2 , 2 , \"Button\" , args ) tab . tabs [ 3 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 3 ] . Add ( 2 , 2 , \"Button\" , args ) tab . tabs [ 3 ] . Add ( 3 , 3 , \"Button\" , args ) subgrid := new GridGUI . SubGrid ( myGui . hwnd , GridGUI . Area ( 0 , 0 )) subgrid . Margin ( 0 , 0 ) tab . tabs [ 4 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 4 ] . AddControl ( 2 , 2 , subgrid , args ) tab . tabs [ 4 ] . Add ( 3 , 3 , \"Button\" , args ) loop 10 { newsubgrid := new GridGUI . SubGrid ( myGui . hwnd , GridGUI . Area ( 0 , 0 )) newsubgrid . Margin ( 0 , 0 ) subgrid . Add ( 1 , 1 , \"Button\" , args ) subgrid . AddControl ( 2 , 2 , newsubgrid , args ) subgrid . Add ( 3 , 3 , \"Button\" , args ) subgrid . AutoSize () subgrid := newsubgrid } subgrid . AutoSize () myGui . AutoSize () myGui . Show ( \"w300 h300\" ) myGui . MinSize () return","title":"Tabs"},{"location":"Examples/Example%20Tabs/#example-tabs","text":"#Include < GridGUI > args := { Options : \"w0 h0\" , exW : 1 , exH : 1 , fillW : true , fillH : true } myGui := new GridGUI ( \"Tab Example\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp tab := new GridGUI . TabControl ( myGui . hwnd , , \"Name 1|Name 2|Name 3|Name 4\" ) myGui . AddControl ( 1 , 1 , tab , args ) tab . tabs [ 1 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 2 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 2 ] . Add ( 2 , 2 , \"Button\" , args ) tab . tabs [ 3 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 3 ] . Add ( 2 , 2 , \"Button\" , args ) tab . tabs [ 3 ] . Add ( 3 , 3 , \"Button\" , args ) subgrid := new GridGUI . SubGrid ( myGui . hwnd , GridGUI . Area ( 0 , 0 )) subgrid . Margin ( 0 , 0 ) tab . tabs [ 4 ] . Add ( 1 , 1 , \"Button\" , args ) tab . tabs [ 4 ] . AddControl ( 2 , 2 , subgrid , args ) tab . tabs [ 4 ] . Add ( 3 , 3 , \"Button\" , args ) loop 10 { newsubgrid := new GridGUI . SubGrid ( myGui . hwnd , GridGUI . Area ( 0 , 0 )) newsubgrid . Margin ( 0 , 0 ) subgrid . Add ( 1 , 1 , \"Button\" , args ) subgrid . AddControl ( 2 , 2 , newsubgrid , args ) subgrid . Add ( 3 , 3 , \"Button\" , args ) subgrid . AutoSize () subgrid := newsubgrid } subgrid . AutoSize () myGui . AutoSize () myGui . Show ( \"w300 h300\" ) myGui . MinSize () return","title":"Example Tabs"},{"location":"Examples/Example%20Transparent/","text":"Example Transparent #Include < GridGUI > myGUI := new GridGUI () myGui . GuiClose := GridGUI . ExitApp myGUI . Color ( \"EEAA99\" ) myGUI . Options ( \"+AlwaysOnTop +ToolWindow -Caption -border\" ) myGUI . Add ( 1 , 1 , \"Picture\" , \"w500 h-1\" , \"Images\\bottom.jpg\" ) myGUI . WinSet ( \"TransColor\" , \"EEAA99\" ) myGUI . AutoSize () myGUI . Show ( \"x\" 500 \" y\" 500 ) return ~LButton:: if ( toggle := ! toggle ) { myGUI . Hide () } else { myGUI . Show () } return","title":"Transparent"},{"location":"Examples/Example%20Transparent/#example-transparent","text":"#Include < GridGUI > myGUI := new GridGUI () myGui . GuiClose := GridGUI . ExitApp myGUI . Color ( \"EEAA99\" ) myGUI . Options ( \"+AlwaysOnTop +ToolWindow -Caption -border\" ) myGUI . Add ( 1 , 1 , \"Picture\" , \"w500 h-1\" , \"Images\\bottom.jpg\" ) myGUI . WinSet ( \"TransColor\" , \"EEAA99\" ) myGUI . AutoSize () myGUI . Show ( \"x\" 500 \" y\" 500 ) return ~LButton:: if ( toggle := ! toggle ) { myGUI . Hide () } else { myGUI . Show () } return","title":"Example Transparent"},{"location":"Examples/Example%20Unicode/","text":"Example Unicode #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) oWB := myGui . Add ( \"2-3\" , \"2-3\" , \"ActiveX\" , \"w1380 h80\" , \"shell explorer\" , 1 , 1 , 1 , 1 ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><head><meta charset= \"\" UTF-8 \"\" ></head><html><body style= \"\" {margin:0;background-color:#F0F0F0;} \"\" ><p style= \"\" font-size:50px;font-family:segoe ui emoji; \"\" >\" \"???????????????????????????????????????????\" \"</p></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Unicode"},{"location":"Examples/Example%20Unicode/#example-unicode","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , , , 1 , , 1 ) myGui . Add ( 1 , 2 , \"Button\" , , \"Button\" ) oWB := myGui . Add ( \"2-3\" , \"2-3\" , \"ActiveX\" , \"w1380 h80\" , \"shell explorer\" , 1 , 1 , 1 , 1 ) . vVar oWB . Navigate ( \"about:<!DOCTYPE HTML><head><meta charset= \"\" UTF-8 \"\" ></head><html><body style= \"\" {margin:0;background-color:#F0F0F0;} \"\" ><p style= \"\" font-size:50px;font-family:segoe ui emoji; \"\" >\" \"???????????????????????????????????????????\" \"</p></body></html>\" ) oWB . document . body . style . overflow := \"hidden\" myGui . Add ( 1 , 3 , \"Button\" , , \"Button Button\" ) myGui . Add ( \"1-3\" , 4 , \"Button\" , , \"Button\" , 1 , , 1 ) myGui . AutoSize () myGui . MinSize () myGui . Show () return","title":"Example Unicode"},{"location":"Examples/Example%20User%20Input/","text":"Example User Input #Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp ed := myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) bt1 := myGui . Add ( 1 , 2 , \"Button\" , , \"Button 1\" , 1 ) bt2 := myGui . Add ( 2 , 2 , \"Button\" , , \"Button 2\" , 1 ) btc := myGui . Add ( 3 , 2 , \"Button\" , , \"Close1\" , 1 ) btc2 := myGui . Add ( \"1-3\" , 3 , \"Button\" , \"gGuiClose\" , \"Close2\" , 1 ) ed . Callback := Func ( \"ToolTip\" ) . Bind ( \"You are typing\" ) bt1 . Callback := Func ( \"ToolTip\" ) . Bind ( \"You pressed button 1\" ) bt2 . Callback := Func ( \"ShowEditText\" ) . Bind ( ed ) btc . Options ( \"+gGuiClose\" ) myGui . AutoSize () myGui . MinSize () myGui . Show () return ToolTip ( text ) { ToolTip , % text } ShowEditText ( edit ) { ToolTip , % \"You typed \"\" \" edit . vVar \" \"\" in the edit control\" } GuiClose: ExitApp return","title":"User Input"},{"location":"Examples/Example%20User%20Input/#example-user-input","text":"#Include < GridGUI > myGui := new GridGUI ( \"Grid Test\" , \"resize\" , true ) myGui . GuiClose := GridGUI . ExitApp ed := myGui . Add ( \"1-3\" , 1 , \"Edit\" , , , 1 , , 1 ) bt1 := myGui . Add ( 1 , 2 , \"Button\" , , \"Button 1\" , 1 ) bt2 := myGui . Add ( 2 , 2 , \"Button\" , , \"Button 2\" , 1 ) btc := myGui . Add ( 3 , 2 , \"Button\" , , \"Close1\" , 1 ) btc2 := myGui . Add ( \"1-3\" , 3 , \"Button\" , \"gGuiClose\" , \"Close2\" , 1 ) ed . Callback := Func ( \"ToolTip\" ) . Bind ( \"You are typing\" ) bt1 . Callback := Func ( \"ToolTip\" ) . Bind ( \"You pressed button 1\" ) bt2 . Callback := Func ( \"ShowEditText\" ) . Bind ( ed ) btc . Options ( \"+gGuiClose\" ) myGui . AutoSize () myGui . MinSize () myGui . Show () return ToolTip ( text ) { ToolTip , % text } ShowEditText ( edit ) { ToolTip , % \"You typed \"\" \" edit . vVar \" \"\" in the edit control\" } GuiClose: ExitApp return","title":"Example User Input"},{"location":"Examples/Example%20Window%20Grid/","text":"Example Window Grid #Include < GridGUI > SetBatchLines , - 1 CoordMode , Mouse , Screen myGui := new GridGUI ( \"Example Window Grid\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Show ( \"w800 h800\" ) column := 0 row := 1 MaxColumn := 4 return *~LButton:: MouseGetPos , x , y , hwnd ; Uncomment this if you don't like cool stuff if ( hwnd = myGui . hwnd ) { return } SendMessage , 0x84 , 0 , ( x & 0xFFFF ) | ( y & 0xFFFF ) << 16 , , % \"ahk_id \" hwnd RegExMatch ( \"ERROR TRANSPARENT NOWHERE CLIENT CAPTION SYSMENU SIZE MENU HSCROLL VSCROLL MINBUTTON MAXBUTTON LEFT RIGHT TOP TOPLEFT TOPRIGHT BOTTOM BOTTOMLEFT BOTTOMRIGHT BORDER OBJECT CLOSE HELP\" , \"O)(?:\\w+\\s+){\" . ErrorLevel + 2 & 0xFFFFFFFF . \"}(?<AREA>\\w+\\b)\" , HT ) if ( ht [ \"area\" ] = \"CAPTION\" ) { While ( GetKeyState ( \"LButton\" , \"P\" ) && x = _x && y = _y ) { ;Wait until user begins dragging MouseGetPos , _x , _y } While GetKeyState ( \"LButton\" , \"P\" ) { ;Show ToolTip while dragging MouseGetPos , _x , _y } if ( myGui . pos . Contains ( new GridGUI . Position ( _x , _y ))) { window := new GridGUI . WindowControl ( myGui . hwnd , hwnd ) column ++ if ( column = MaxColumn ) { column := 1 row ++ } myGui . AddControl ( column , row , window , 1 , 1 , 1 , 1 ) myGui . ReDraw () } } Return","title":"Window Grid"},{"location":"Examples/Example%20Window%20Grid/#example-window-grid","text":"#Include < GridGUI > SetBatchLines , - 1 CoordMode , Mouse , Screen myGui := new GridGUI ( \"Example Window Grid\" , \"resize\" ) myGui . GuiClose := GridGUI . ExitApp myGui . Show ( \"w800 h800\" ) column := 0 row := 1 MaxColumn := 4 return *~LButton:: MouseGetPos , x , y , hwnd ; Uncomment this if you don't like cool stuff if ( hwnd = myGui . hwnd ) { return } SendMessage , 0x84 , 0 , ( x & 0xFFFF ) | ( y & 0xFFFF ) << 16 , , % \"ahk_id \" hwnd RegExMatch ( \"ERROR TRANSPARENT NOWHERE CLIENT CAPTION SYSMENU SIZE MENU HSCROLL VSCROLL MINBUTTON MAXBUTTON LEFT RIGHT TOP TOPLEFT TOPRIGHT BOTTOM BOTTOMLEFT BOTTOMRIGHT BORDER OBJECT CLOSE HELP\" , \"O)(?:\\w+\\s+){\" . ErrorLevel + 2 & 0xFFFFFFFF . \"}(?<AREA>\\w+\\b)\" , HT ) if ( ht [ \"area\" ] = \"CAPTION\" ) { While ( GetKeyState ( \"LButton\" , \"P\" ) && x = _x && y = _y ) { ;Wait until user begins dragging MouseGetPos , _x , _y } While GetKeyState ( \"LButton\" , \"P\" ) { ;Show ToolTip while dragging MouseGetPos , _x , _y } if ( myGui . pos . Contains ( new GridGUI . Position ( _x , _y ))) { window := new GridGUI . WindowControl ( myGui . hwnd , hwnd ) column ++ if ( column = MaxColumn ) { column := 1 row ++ } myGui . AddControl ( column , row , window , 1 , 1 , 1 , 1 ) myGui . ReDraw () } } Return","title":"Example Window Grid"}]}