{
	"Cell": {
		"desc": "A class representing a grid cell.",
		"members": {
			"gridpos": {
				"desc": "The position and size of the cell in the grid in columns and rows. That is in the same coordinate system that is used when adding cells to a `GridGUI.GridGUIClass`.",
				"type": "GridGUI.Position",
				"meta": ["object"]
			},
			"ctrl": {
				"desc": "The control that is managed by this cell. The control class needs to implement the two methods `ControlGetPos` and `Draw` as well as have the four members `initialWidth`, `initialHeight`, `initialWidthVal` and `initialHeightVal`.",
				"type": "GridGUI.Control",
				"meta": ["object"]
			},
			"exW": {
				"desc": "The horisontal expansion weight of the cell. This is used to calculate the part of the additional GUI width that this cell should take.",
				"type": "number",
				"default": 0
			},
			"exH": {
				"desc": "The vertical expansion weight of the cell. This is used to calculate the part of the additional GUI height that this cell should take.",
				"type": "number",
				"default": 0
			},
			"fillW": {
				"desc": "Whether or not to set the width of the `GridGUI.Cell.ctrl` to the width of the cell.",
				"type": "bool",
				"default": false
			},
			"fillH": {
				"desc": "Whether or not to set the height of the `GridGUI.Cell.ctrl` to the height of the cell.",
				"type": "bool",
				"default": false
			},
			"justifyOptions": {
				"desc": "How the `GridGUI.Cell.ctrl` will be positioned in the cell when drawn. Can be any combination of `C` (Center), `N` (North), `S` (South), `W` (West) and `E` (East).",
				"type": "string",
				"default": "C"
			},
			"borderX": {
				"desc": "The horisontal border or margin of the cell that is the amount of additional width beyond what the `GridGUI.Cell.ctrl` needs that is taken up by the cell.",
				"type": "number",
				"default": 5
			},
			"borderY": {
				"desc": "The vertical border or margin of the cell that is the amount of additional height beyond what the `GridGUI.Cell.ctrl` needs that is taken up by the cell.",
				"type": "number",
				"default": 5
			},
			"ctrlInitialPos": {
				"desc": "The initial position and size of the `GridGUI.Cell.ctrl`. It is used as the min size of the `GridGUI.Cell.ctrl` if no min size is specified.",
				"type": "GridGUI.Position",
				"meta": ["object"]
			},
			"ctrlPos": {
				"desc": "The position and size when the `GridGUI.Cell.ctrl` was last drawn.",
				"type": "GridGUI.Position",
				"meta": ["object"]
			},
			"pos": {
				"desc": "The position and size of the cell.",
				"type": "GridGUI.Position",
				"meta": ["object"]
			},
			"othersW": {
				"desc": "The combined horisontal expansion weight of other cells that this cell is in conflict with. This is used to calculate the part of the additional GUI width that this cell should take.",
				"type": "number",
				"default": 0
			},
			"othersH": {
				"desc": "The combined vertical expansion weight of other cells that this cell is in conflict with. This is used to calculate the part of the additional GUI height that this cell should take.",
				"type": "number",
				"default": 0
			},
			"hasWConfligts": {
				"desc": "Whether or not the cell needs to take any other cells into account when calculating its width.",
				"type": "bool",
				"default": false
			},
			"hasHConfligts": {
				"desc": "Whether or not the cell needs to take any other cells into account when calculating its height.",
				"type": "bool",
				"default": false
			}
		},
		"methods": {
			"__Delete": {
				"desc": "Destructor. Destroys the `GridGUI.Cell.ctrl`."
			},
			"__FindLeastUsedRowColumn": {
				"desc": "Returns the index of the where there are the lest amount of cells with a fixed size or where there is the largest expansion weight.",
				"args": [
					{
						"name": "size",
						"desc": "How many indexes to check.",
						"type": "number"
					},
					{
						"name": "start",
						"desc": "What index to start checking from.",
						"type": "number"
					},
					{
						"name": "nonExpanders",
						"desc": "An array of how many fixed sized cells there are in either the columns or rows.",
						"type": "array"
					},
					{
						"name": "expanders",
						"desc": "An array of how many expanding cells there are in either the columns or rows.",
						"type": "array"
					}
				],
				"returns": {
					"desc": "The found index.",
					"type": "number"
				},
				"comment": "This is shit code. Why would it just overwrite the found index."
			},
			"__New": {
				"desc": "Constructor.",
				"args": [
					{
						"name": "pos",
						"desc": "The position and size of the cell in the grid in columns and rows. That is in the same coordinate system that is used when adding cells to a `GridGUI.GridGUIClass`.",
						"type": "GridGUI.Position"
					},
					{
						"name": "ctrl",
						"desc": "The control that will be managed by this cell. The control class needs to implement the two methods `ControlGetPos` and `Draw` as well as have the four members `initialWidth`, `initialHeight`, `initialWidthVal` and `initialHeightVal`.",
						"type": "GridGUI.Control"
					},
					{
						"name": "exW",
						"desc": "The horisontal expansion weight of the cell. This is used to calculate the part of the additional GUI width that this cell should take.",
						"default": 0,
						"type": "number"
					},
					{
						"name": "exH",
						"desc": "The vertical expansion weight of the cell. This is used to calculate the part of the additional GUI height that this cell should take.",
						"default": 0,
						"type": "number"
					},
					{
						"name": "fillW",
						"desc": "Whether or not to set the width of the `GridGUI.Cell.ctrl` to the width of the cell.",
						"default": false,
						"type": "bool"
					},
					{
						"name": "fillH",
						"desc": "Whether or not to set the height of the `GridGUI.Cell.ctrl` to the height of the cell.",
						"default": false,
						"type": "bool"
					},
					{
						"name": "justify",
						"desc": "How the `GridGUI.Cell.ctrl` will be positioned in the cell when drawn. Can be any combination of `C` (Center), `N` (North), `S` (South), `W` (West) and `E` (East).",
						"default": "C",
						"type": "string"
					},
					{
						"name": "borderX",
						"desc": "The horisontal border or margin of the cell that is the amount of additional width beyond what the control needs that is taken up by the cell.",
						"default": 5,
						"type": "number"
					},
					{
						"name": "borderY",
						"desc": "The vertical border or margin of the cell that is the amount of additional height beyond what the control needs that is taken up by the cell.",
						"default": 5,
						"type": "number"
					}
				],
				"returns": {
					"desc": "A new `GridGUI.Cell` instance.",
					"type": "GridGUI.Cell"
				}
			},
			"__Sum": {
				"desc": "Calculates a partial sum of values in an array from a start index to an end index.",
				"args": [
					{
						"name": "obj",
						"desc": "The array to calculate the sum of.",
						"type": "array"
					},
					{
						"name": "start",
						"desc": "The start index of the range to sum.",
						"type": "number"
					},
					{
						"name": "end",
						"desc": "The end index of the range to sum.",
						"type": "number"
					}
				],
				"returns": {
					"desc": "The sum of the sub-array.",
					"type": "number"
				}
			},
			"Center": {
				"desc": "Centres one area in another.",
				"args": [
					{
						"name": "area",
						"desc": "The area that should be centred in relation to.",
						"type": "GridGUI.Position"
					},
					{
						"name": "pos",
						"desc": "The area to centre.",
						"type": "GridGUI.Position"
					}
				],
				"returns": {
					"desc": "A copy of `pos` centred in `area`.",
					"type": "GridGUI.Position"
				}
			},
			"DestroyCtrl": {
				"desc": "Destroys the `GridGUI.Cell.ctrl`."
			},
			"GetExpandedHeight": {
				"desc": "Calculates the amount of the additional height that the cell should take up.",
				"args": [
					{
						"name": "index",
						"desc": "What index of the positions in the grid that the height is wanted for.",
						"type": "number"
					},
					{
						"name": "height",
						"desc": "The unclaimed height of the GUI. That is the amount left after removing the combined height of all fixed size cells.",
						"type": "number"
					},
					{
						"name": "expanders",
						"desc": "The array of the sum of vertical expansion weights for each row.",
						"type": "array"
					},
					{
						"name": "nonExpanders",
						"desc": "The array of the amount of fixed size cells in each row.",
						"type": "array"
					}
				],
				"returns": {
					"desc": "The calculated height.",
					"type": "number"
				}
			},
			"GetExpandedWidth": {
				"desc": "Calculates the amount of the additional width that the cell should take up.",
				"args": [
					{
						"name": "index",
						"desc": "What index of the positions in the grid that the width is wanted for.",
						"type": "number"
					},
					{
						"name": "width",
						"desc": "The unclaimed width of the GUI. That is the amount left after removing the combined width of all fixed size cells.",
						"type": "number"
					},
					{
						"name": "expanders",
						"desc": "The array of the sum of horisontal expansion weights for each column.",
						"type": "array"
					},
					{
						"name": "nonExpanders",
						"desc": "The array of the amount of fixed size cells in each column.",
						"type": "array"
					}
				],
				"returns": {
					"desc": "The calculated width.",
					"type": "number"
				}
			},
			"GetExpansionHeightValue": {
				"desc": "Getter for `GridGUI.Cell.exH`.",
				"returns": {
					"desc": "The vertical expansion weight.",
					"type": "number"
				}
			},
			"GetExpansionWidthValue": {
				"desc": "Getter for `GridGUI.Cell.exW`.",
				"returns": {
					"desc": "The horisontal expansion weight.",
					"type": "number"
				}
			},
			"GetFixedHeight": {
				"desc": "Returns the fixed height of the cell.",
				"returns": {
					"desc": "The fixed height of the cell. For non vertically expanding and non vertically filling cells the min-height of the `GridGUI.Cell.ctrl` plus 2 times the vertical margin is returned. For vertically expanding and or vertically filling cells 0 is returned unless an min-height where specified in which case the min-height of the `GridGUI.Cell.ctrl` plus 2 time the vertical margin is returned unless the min-height is 0 then 0 is returned.",
					"type": "number"
				}
			},
			"GetFixedWidth": {
				"desc": "Returns the fixed width of the cell.",
				"returns": {
					"desc": "The fixed width of the cell. For non horisontally expanding and non horisontally filling cells the min-width of the `GridGUI.Cell.ctrl` plus 2 times the horisontal margin is returned. For horisontally expanding and or horisontally filling cells 0 is returned unless an min-width where specified in which case the min-width of the `GridGUI.Cell.ctrl` plus 2 time the vertical margin is returned unless the min-width is 0 then 0 is returned.",
					"type": "number"
				}
			},
			"GetNeededHeight": {
				"desc": "Returns the needed height of the cell.",
				"returns": {
					"desc": "The needed height of the cell. That is the min-height of the `GridGUI.Cell.ctrl` plus two times the vertical margin.",
					"type": "number"
				}
			},
			"GetNeededWidth": {
				"desc": "Returns the needed width of the cell.",
				"returns": {
					"desc": "The needed width of the cell. That is the min-width of the `GridGUI.Cell.ctrl` plus two times the horisontal margin.",
					"type": "number"
				}
			},
			"Justify": {
				"desc": "Justifies an area within another area. That is places the area according to a set of rules within the larger area.",
				"args": [
					{
						"name": "area",
						"desc": "The area to position the other area within.",
						"type": "GridGUI.Position"
					},
					{
						"name": "pos",
						"desc": "The area to position in the larger area.",
						"type": "GridGUI.Position"
					}
				],
				"returns": {
					"desc": "A copy of `pos` that is justified within `area`.",
					"type": "GridGUI.Position"
				}
			},
			"SetArea": {
				"desc": "Sets the position and size of the cell.",
				"args": [
					{
						"name": "offset",
						"desc": "The coordinate offset that the cell should be translated by. Used to support `GridGUI.SubGrid`s within a GUI, since the calculated positions are relative to the client area.",
						"type": "GridGUI.Position"
					},
					{
						"name": "widths",
						"desc": "An array of the calculate width for each column.",
						"type": "array"
					},
					{
						"name": "heights",
						"desc": "An array of the calculate height for each row.",
						"type": "array"
					}
				]
			},
			"SetCtrlSize": {
				"desc": "Calculates the size the `GridGUI.Cell.ctrl` should use given a specific cell size.",
				"args": [
					{
						"name": "pos",
						"desc": "The size to fit the `GridGUI.Cell.ctrl` within.",
						"type": "GridGUI.Position"
					}
				],
				"returns": {
					"desc": "An area sized according to the cell members to fit within `pos`.",
					"type": "GridGUI.Position"
				}
			},
			"ToolTip": {
				"desc": "Shows a tooltip of the cell as a string."
			},
			"ToStr": {
				"desc": "Converts the object to a string.",
				"args": [
					{
						"name": "indent",
						"desc": "The amount of indentation to add on each line.",
						"default": "",
						"type": "string"
					}
				],
				"returns": {
					"desc": "A string representing this cell.",
					"type": "string"
				}
			},
			"Update": {
				"desc": "Updates the position of the `GridGUI.Cell.ctrl` and draws it."
			}
		}
	},
	"Column": {
		"desc": "A class representing a grid column.",
		"members": {
			"index": {
				"desc": "The index of the column in the grid.",
				"type": "number",
				"default": 0
			},
			"cells": {
				"desc": "A collection of arrays of `GridGUI.Cell`s indexed by the index of the rows they are placed on.",
				"type": "Associative Array",
				"default": "{}",
				"meta": ["object"]
			},
			"fixedWidth": {
				"desc": "The maximal fixed width of the cells, that is the largest fixed width for a cell in `GridGUI.Column.cells`.",
				"type": "number",
				"default": 0
			},
			"minWidth": {
				"desc": "The maximal minimal width for the cells, that is the largest minimal width for a cell in `GridGUI.Column.cells`.",
				"type": "number",
				"default": 0,
				"meta": []
			},
			"expanders": {
				"desc": "The sum of all the horisontal expansion weights of cells that are in this column.",
				"type": "number",
				"default": 0
			},
			"expanderMaxValue": {
				"desc": "The largest horisontal expansion weight in this column.",
				"type": "number",
				"default": 0
			},
			"nonExpanders": {
				"desc": "The amount of cells with fixed size in this column.",
				"type": "number",
				"default": 0
			},
			"catched": {
				"desc": "Whether or not the members have already been calculate.",
				"type": "bool",
				"default": false
			},
			"confligtingExpanders": {
				"desc": "A collection of cells that have horisontal expansion conflicts.",
				"type": "Associative Array",
				"default": "{}",
				"meta": ["object"]
			}
		},
		"methods": {
			"__CalculateConfligtingExpanders": {
				"desc": "Updates `GridGUI.Column.confligtingExpanders` with the `GridGUI.Cell` for a cell if it has horisontal conflicts.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateExpanders": {
				"desc": "Updates `GridGUI.Column.expanders` with the result of `GridGUI.Cell.GetExpansionWidthValue` for a cell.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateFixedWidth": {
				"desc": "Updates `GridGUI.Column.fixedWidth` with the result of `GridGUI.Cell.GetFixedWidth` for a cell if it is larger than the previous value.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateMinWidth": {
				"desc": "Updates `GridGUI.Column.minWidth` with the result of `GridGUI.Cell.GetNeededWidth` for a cell if it is larger than the previous value.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateNonExpanders": {
				"desc": "Increments `GridGUI.Column.nonExpanders` if the `GridGUI.Cell` does not expand horisontally.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__New": {
				"desc": "Constructor.",
				"args": [
					{
						"name": "index",
						"desc": "The index of the column in the grid.",
						"type": "number"
					}
				],
				"returns": {
					"desc": "A new `GridGUI.Column` instance.",
					"type": "GridGUI.Column"
				}
			},
			"__ResetConstants": {
				"desc": "Resets the column members to their default values."
			},
			"Add": {
				"desc": "Adds a `GridGUI.Cell` to the column.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to added to the column.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"CalculateConstants": {
				"desc": "Calculates the values for the members."
			},
			"CalculateWidth": {
				"desc": "Calculates the width of the column.",
				"args": [
					{
						"name": "width",
						"desc": "The width of the grid, that is the width of the GUI or subgrid.",
						"type": "number"
					},
					{
						"name": "expanders",
						"desc": "An array of the sum of horisontal expansion weights for each column.",
						"type": "array"
					},
					{
						"name": "nonExpanders",
						"desc": "An array of the amount of fixed size cells in each column.",
						"type": "array"
					}
				],
				"returns": {
					"desc": "The width of the column.",
					"type": "number"
				}
			},
			"GetExpanderMaxValue": {
				"desc": "Getter for `GridGUI.Column.expanderMaxValue`.",
				"returns": {
					"desc": "The largest horisontal expansion weight of a cell in the column.",
					"type": "number"
				}
			},
			"GetExpanders": {
				"desc": "Getter for `GridGUI.Column.expanders`.",
				"returns": {
					"desc": "The sum of horisontal expansion weight of cells in the column.",
					"type": "number"
				}
			},
			"GetFixedWidth": {
				"desc": "Getter for `GridGUI.Column.fixedWidth`.",
				"returns": {
					"desc": "The largest fixed width of a cell in the column.",
					"type": "number"
				}
			},
			"GetMinWidth": {
				"desc": "Getter for `GridGUI.Column.minWidth`.",
				"returns": {
					"desc": "The largest minimal width of a cell in the column.",
					"type": "number"
				}
			},
			"GetNonExpanders": {
				"desc": "Getter for `GridGUI.Column.nonExpanders`.",
				"returns": {
					"desc": "The amount of cells with fixed width in the column.",
					"type": "number"
				}
			},
			"Remove": {
				"desc": "Removes a `GridGUI.Cell` from the column.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to remove from the column.",
						"type": "GridGUI.Cell"
					}
				]
			}
		}
	},
	"Columns": {
		"desc": "A class managing a collection of `GridGUI.Column`s.",
		"members": {},
		"methods": {
			"__New": {
				"desc": "Constructor.",
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"__ResetConstants": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Add": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CalculateConstants": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CalculateWidths": {
				"args": [
					{
						"name": "width",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "expanders",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "nonExpanders",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"GetFixedWidth": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"GetMinWidth": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ReduceToGuiSize": {
				"args": [
					{
						"name": "widths",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "expandedWidths",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "sumExpandedWidths",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "excessWidth",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Remove": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			}
		}
	},
	"ExpanderArbitrator": {
		"desc": "A class that try to find cells that conflict and resolve the conflicts.",
		"members": {},
		"methods": {
			"__New": {
				"desc": "Constructor.",
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Add": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CheckConflicts": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					},
					{
						"name": "expander",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CheckOverlapping": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					},
					{
						"name": "expander",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Init": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"InitCheck": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"IsExpander": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"IsInHeightConflictWith": {
				"args": [
					{
						"name": "c1",
						"desc": "",
						"type": "GridGUI.Cell"
					},
					{
						"name": "c2",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"IsInWidthConflictWith": {
				"args": [
					{
						"name": "c1",
						"desc": "",
						"type": "GridGUI.Cell"
					},
					{
						"name": "c2",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ReCalculate": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Reduce": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Remove": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"SortConflicts": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"UnInit": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"UnInitCheck": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Update": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			}
		}
	},
	"Grid": {
		"desc": "A class representing a grid with rows, columns and cells.",
		"classes": {},
		"members": {},
		"methods": {
			"__New": {
				"desc": "Constructor.",
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"AddCell": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CalculatePositions": {
				"args": [
					{
						"name": "area",
						"desc": "",
						"type": "GridGUI.Position"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"GetMinHeight": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"GetMinWidth": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"RemoveCell": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ResetConstants": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			}
		}
	},
	"Row": {
		"desc": "A class representing a grid row.",
		"members": {
			"index": {
				"desc": "The index of the row in the grid.",
				"type": "number",
				"default": 0
			},
			"cells": {
				"desc": "A collection of arrays of `GridGUI.Cell`s indexed by the index of the columns they are placed on.",
				"type": "Associative Array",
				"default": "{}",
				"meta": ["object"]
			},
			"fixedWidth": {
				"desc": "The sum of the maximal fixed heights for each column, that is the sum of the largest fixed height for each array of overlapping cells in `GridGUI.Column.cells`.",
				"type": "number",
				"default": 0
			},
			"minWidth": {
				"desc": "The sum of the maximal minimal heights for each column, that is the sum of the largest minimal height for each array of overlapping cells in `GridGUI.Column.cells`.",
				"type": "number",
				"default": 0,
				"meta": []
			},
			"expanders": {
				"desc": "The sum of all the vertical expansion weights of cells that are in this row.",
				"type": "number",
				"default": 0
			},
			"expanderMaxValue": {
				"desc": "The largest vertical expansion weight in this row.",
				"type": "number",
				"default": 0
			},
			"nonExpanders": {
				"desc": "The amount of cells with fixed size in this row.",
				"type": "number",
				"default": 0
			},
			"catched": {
				"desc": "Whether or not the members have already been calculate.",
				"type": "bool",
				"default": false,
				"meta": []
			},
			"confligtingExpanders": {
				"desc": "A collection of cells that have vertical expansion conflicts.",
				"type": "Associative Array",
				"default": "{}",
				"meta": ["object"]
			}
		},
		"methods": {
			"__CalculateConfligtingExpanders": {
				"desc": "Updates `GridGUI.Row.confligtingExpanders` with the `GridGUI.Cell` for a cell if it has vertical conflicts.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateExpanders": {
				"desc": "Updates `GridGUI.Row.expanders` with the result of `GridGUI.Cell.GetExpansionHeightValue` for a cell.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateFixedHeight": {
				"desc": "Updates `GridGUI.Row.fixedHeight` with the result of `GridGUI.Cell.GetFixedHeight` for a cell if it is larger than the previous value.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateMinHeight": {
				"desc": "Updates `GridGUI.Row.minHeight` with the result of `GridGUI.Cell.GetNeededHeight` for a cell if it is larger than the previous value.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__CalculateNonExpanders": {
				"desc": "Increments `GridGUI.Row.nonExpanders` if the `GridGUI.Cell` does not expand vertically.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to retrieve the value from.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"__New": {
				"desc": "Constructor.",
				"args": [
					{
						"name": "index",
						"desc": "The index of the row in the grid.",
						"type": "number"
					}
				],
				"returns": {
					"desc": "A new `GridGUI.Row` instance.",
					"type": "GridGUI.Row"
				}
			},
			"__ResetConstants": {
				"desc": "Resets the row members to their default values."
			},
			"Add": {
				"desc": "Adds a `GridGUI.Cell` to the row.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to added to the row.",
						"type": "GridGUI.Cell"
					}
				]
			},
			"CalculateConstants": {
				"desc": "Calculates the values for the members."
			},
			"CalculateHeight": {
				"desc": "Calculates the height of the row.",
				"args": [
					{
						"name": "height",
						"desc": "The height of the grid, that is the height of the GUI or subgrid.",
						"type": "number"
					},
					{
						"name": "expanders",
						"desc": "An array of the sum of vertical expansion weights for each row.",
						"type": "array"
					},
					{
						"name": "nonExpanders",
						"desc": "An array of the amount of fixed size cells in each row.",
						"type": "array"
					}
				],
				"returns": {
					"desc": "The height of the row.",
					"type": "number"
				}
			},
			"GetExpanderMaxValue": {
				"desc": "Getter for `GridGUI.Row.expanderMaxValue`.",
				"returns": {
					"desc": "The largest vertical expansion weight of a cell in the row.",
					"type": "number"
				}
			},
			"GetExpanders": {
				"desc": "Getter for `GridGUI.Row.expanders`.",
				"returns": {
					"desc": "The sum of vertical expansion weight of cells in the row.",
					"type": "number"
				}
			},
			"GetFixedHeight": {
				"desc": "Getter for `GridGUI.Row.fixedHeight`.",
				"returns": {
					"desc": "The largest fixed height of a cell in the row.",
					"type": "number"
				}
			},
			"GetMinHeight": {
				"desc": "Getter for `GridGUI.Row.minHeight`.",
				"returns": {
					"desc": "The largest minimal height of a cell in the row.",
					"type": "number"
				}
			},
			"GetNonExpanders": {
				"desc": "Getter for `GridGUI.Row.nonExpanders`.",
				"returns": {
					"desc": "The amount of cells with fixed height in the row.",
					"type": "number"
				}
			},
			"Remove": {
				"desc": "Removes a `GridGUI.Cell` from the row.",
				"args": [
					{
						"name": "c",
						"desc": "The `GridGUI.Cell` to remove from the row.",
						"type": "GridGUI.Cell"
					}
				]
			}
		}
	},
	"Rows": {
		"desc": "A class managing a collection of `GridGUI.Row`s.",
		"members": {},
		"methods": {
			"__New": {
				"desc": "Constructor.",
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"__ResetConstants": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Add": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CalculateConstants": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"CalculateHeights": {
				"args": [
					{
						"name": "height",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "expanders",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "nonExpanders",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"GetFixedHeight": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"GetMinHeight": {
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ReduceToGuiSize": {
				"args": [
					{
						"name": "heights",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "expandedHeights",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "sumExpandedHeights",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "excessHeight",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Remove": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			}
		}
	},
	"Util": {
		"desc": "A collection of utility methods used by this lib.",
		"members": {},
		"methods": {
			"AddZeros": {
				"args": [
					{
						"name": "z",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"BGRtoRGB": {
				"args": [
					{
						"name": "oldValue",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ByExH": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ByExW": {
				"args": [
					{
						"name": "c",
						"desc": "",
						"type": "GridGUI.Cell"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"BySecoundValue": {
				"args": [
					{
						"name": "lst",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"BySize": {
				"args": [
					{
						"name": "pos",
						"desc": "",
						"type": "GridGUI.Position"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"ConvertStObjToObjOfStr": {
				"args": [
					{
						"name": "obj",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"DPIScale": {
				"args": [
					{
						"name": "pos",
						"desc": "",
						"type": "GridGUI.Position"
					},
					{
						"name": "enlarge",
						"desc": "",
						"default": true,
						"type": "bool"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"FindIndex": {
				"args": [
					{
						"name": "lst",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "val",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "fun",
						"desc": "",
						"default": false,
						"type": "Func|BoundFunc|false"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"prettyPrint": {
				"args": [
					{
						"name": "str",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"RemoveValue": {
				"args": [
					{
						"name": "lst",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "val",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "fun",
						"desc": "",
						"default": false,
						"type": "Func|BoundFunc|false"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"RGBtoBGR": {
				"args": [
					{
						"name": "oldValue",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Sort": {
				"args": [
					{
						"name": "obj",
						"desc": "",
						"type": "string|number|object"
					},
					{
						"name": "fun",
						"desc": "",
						"type": "Func|BoundFunc"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			},
			"Sum": {
				"args": [
					{
						"name": "obj",
						"desc": "",
						"type": "string|number|object"
					}
				],
				"desc": "",
				"returns": {
					"desc": "",
					"type": ""
				}
			}
		}
	}
}